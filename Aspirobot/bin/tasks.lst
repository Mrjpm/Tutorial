

HI-TECH Software dsPIC Macro Assembler V9.62 build 7866                    Page 1
                                                       Tue Jan 05 21:44:32 2016

HI-TECH Software Standard Code Generator build 7866
     1  000000                     opt subtitle "HI-TECH Software Standard Code Gen
                                 erator build 7866"
     2                           
     3  000000                     pcl	equ	46
     4  000000                     pch	equ	48
     5  000000                     sr	equ	66
     6  000000                     carry	equ	0
     7  000000                     zerobit	equ	1
     8                           	psect	neardata,class=NEARXDATA,space=1,reloc=2
     9                           	psect	neardata
    10                           	global	_xNextTaskUnblockTime
    11  000CAC                     align 2
    12  000CAC                     _xNextTaskUnblockTime:
    13                           		file	"C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\tasks.c"
    14                           	line	250
    15                           
    16  000CAC                     	ds	2
    17                           	psect	nearidata,class=NEARCODE,reloc=4,delta=1,
                                 width=2
    18                           	psect	nearidata
    19  01FFF8                     align 4
    20                           
    21  01FFF8  0000FFFF           	dw	(65535)
    22                           	global	_xTaskGenericCreate
    23                           	signat	_xTaskGenericCreate,32826
    24                           	psect	text,class=CODE,delta=2,reloc=4
    25                           	psect	text
    26                           	line	552
    27  00E670                     _xTaskGenericCreate:
    28  00E670  0004E81C           	goto	f19871
              00000000           
    29  00E674                     f19870:
    30                           
    31                           ;tasks.c: 551: BaseType_t xTaskGenericCreate( Ta
                                 skFunction_t pxTaskCode, const char * const pcNa
                                 me, const uint16_t usStackDepth, void * const pv
                                 Parameters, UBaseType_t uxPriority, TaskHandle_t
                                  * const pxCreatedTask, StackType_t * const puxS
                                 tackBuffer,...
    32                           
    33                           ;tasks.c: 552: {
    34                           
    35                           ;tasks.c: 553: BaseType_t xReturn;
    36                           
    37                           ;tasks.c: 554: TCB_t * pxNewTCB;
    38                           
    39                           ;tasks.c: 555: StackType_t *pxTopOfStack;
    40                           
    41                           ;tasks.c: 557: ;
    42                           
    43                           ;tasks.c: 558: ;
    44                           
    45                           ;tasks.c: 562: pxNewTCB = prvAllocateTCBAndStack
                                 ( usStackDepth, puxStackBuffer );
    46                           
    47                           	global	_prvAllocateTCBAndStack
    48                           	signat	_prvAllocateTCBAndStack,8250
    49                           ;_pvParameters stored from w6
    50                           	line	562
    51  00E674  002FFF67           	mov.w	#((0+f19876+6)-0),w7
    52  00E676  00478387           	add.w	sp,w7,w7
    53  00E678  00780B86           	mov.w	w6,[w7]
    54                           ;_usStackDepth stored from w4
    55  00E67A  002FFF86           	mov.w	#((0+f19876+8)-0),w6
    56  00E67C  00478306           	add.w	sp,w6,w6
    57  00E67E  00780B04           	mov.w	w4,[w6]
    58                           ;_pcName stored from w2
    59  00E680  002FFFA6           	mov.w	#((0+f19876+10)-0),w6
    60  00E682  00478306           	add.w	sp,w6,w6
    61  00E684  00780B02           	mov.w	w2,[w6]
    62                           ;_pxTaskCode stored from w0
    63  00E686  002FFFC6           	mov.w	#((0+f19876+12)-0),w6
    64  00E688  00478306           	add.w	sp,w6,w6
    65  00E68A  00780B00           	mov.w	w0,[w6]
    66  00E68C  0097B13F           	mov.w	[sp+((0+f19873+-6)-0)],w2
    67  00E68E  0097B84F           	mov.w	[sp+((0+f19876+8)-0)],w0
    68  00E690  0002F88C           	call	(_prvAllocateTCBAndStack)	;0 bytes adjustm
              00000000           ent
    69  00E694  002FFF26           	mov.w	#((0+f19876+2)-0),w6
    70  00E696  00478306           	add.w	sp,w6,w6
    71  00E698  00780B00           	mov.w	w0,[w6]
    72                           ;tasks.c: 564: if( pxNewTCB != (0) )
    73                           
    74                           	line	564
    75  00E69A  002FFF26           	mov.w	#((0+f19876+2)-0),w6
    76  00E69C  00478306           	add.w	sp,w6,w6
    77  00E69E  00E00016           	cp0.w	[w6]
    78  00E6A0  00320002           	bra	z,u11
    79  00E6A2  0004E6AA           	goto	u10
              00000000           
    80  00E6A6                     u11:
    81  00E6A6  0004E7C0           	goto	lab708
              00000000           
    82  00E6AA                     u10:
    83                           ;tasks.c: 565: {
    84                           
    85                           ;tasks.c: 607: {
    86                           
    87                           ;tasks.c: 608: pxTopOfStack = pxNewTCB->pxStack;
    88                           
    89                           	line	608
    90  00E6AA  0097BB9F           	mov.w	[sp+((0+f19876+2)-0)],w7
    91  00E6AC  00B00187           	add.w	#24,w7
    92  00E6AE  002FFF46           	mov.w	#((0+f19876+4)-0),w6
    93  00E6B0  00478306           	add.w	sp,w6,w6
    94  00E6B2  00780B17           	mov.w	[w7],[w6]
    95                           ;tasks.c: 611: ;
    96                           
    97                           ;tasks.c: 616: pxNewTCB->pxEndOfStack = pxNewTCB
                                 ->pxStack + ( usStackDepth - 1 );
    98                           
    99                           	line	616
   100  00E6B4  002FFFE6           	mov.w	#-2,w6
   101  00E6B6  0097BB9F           	mov.w	[sp+((0+f19876+2)-0)],w7
   102  00E6B8  00B00187           	add.w	#24,w7
   103  00E6BA  00780197           	mov.w	[w7],w3
   104  00E6BC  0097BACF           	mov.w	[sp+((0+f19876+8)-0)],w5
   105  00E6BE  00DD2AC1           	sl	w5,#1,w5
   106  00E6C0  00428283           	add.w	w5,w3,w5
   107  00E6C2  00428286           	add.w	w5,w6,w5
   108  00E6C4  002FFF26           	mov.w	#((0+f19876+2)-0),w6
   109  00E6C6  00478306           	add.w	sp,w6,w6
   110  00E6C8  00780396           	mov	[w6],w7
   111  00E6CA  00980BF5           	mov.w	w5,[w7+30]
   112                           ;tasks.c: 617: }
   113                           
   114                           ;tasks.c: 621: prvInitialiseTCBVariables( pxNewT
                                 CB, pcName, uxPriority, xRegions, usStackDepth )
                                 ;
   115                           
   116                           	global	_prvInitialiseTCBVariables
   117                           	signat	_prvInitialiseTCBVariables,20538
   118                           	line	621
   119  00E6CC  002FFF86           	mov.w	#((0+f19876+8)-0),w6
   120  00E6CE  00478306           	add.w	sp,w6,w6
   121  00E6D0  00780316           	mov.w	[w6],w6
   122  00E6D2  00781F86           	push	w6
   123  00E6D4  0097B31F           	mov.w	[sp+((0+f19873+-8)-2)],w6
   124  00E6D6  0097B24F           	mov.w	[sp+((0+f19873+-2)-2)],w4
   125  00E6D8  0097B94F           	mov.w	[sp+((0+f19876+10)-2)],w2
   126  00E6DA  0097B80F           	mov.w	[sp+((0+f19876+2)-2)],w0
   127  00E6DC  0002F664           	call	(_prvInitialiseTCBVariables)	;2 bytes adju
              00000000           stment
   128                           ;tasks.c: 632: {
   129                           
   130                           ;tasks.c: 633: pxNewTCB->pxTopOfStack = pxPortIn
                                 itialiseStack( pxTopOfStack, pxTaskCode, pvParam
                                 eters );
   131                           
   132                           	global	_pxPortInitialiseStack
   133                           	signat	_pxPortInitialiseStack,12346
   134                           	line	633
   135  00E6E0  0097BA3F           	mov.w	[sp+((0+f19876+6)-0)],w4
   136  00E6E2  0097B96F           	mov.w	[sp+((0+f19876+12)-0)],w2
   137  00E6E4  0097B82F           	mov.w	[sp+((0+f19876+4)-0)],w0
   138  00E6E6  0002C8A4           	call	(_pxPortInitialiseStack)	;0 bytes adjustme
              00000000           nt
   139  00E6EA  002FFF26           	mov.w	#((0+f19876+2)-0),w6
   140  00E6EC  00478306           	add.w	sp,w6,w6
   141  00E6EE  00780316           	mov.w	[w6],w6
   142  00E6F0  00780B00           	mov.w	w0,[w6]
   143                           ;tasks.c: 634: }
   144                           
   145                           ;tasks.c: 637: if( ( void * ) pxCreatedTask != (
                                 0) )
   146                           
   147                           	line	637
   148  00E6F2  002FFE86           	mov.w	#((0+f19873+-4)-0),w6
   149  00E6F4  00478306           	add.w	sp,w6,w6
   150  00E6F6  00E00016           	cp0.w	[w6]
   151  00E6F8  00320002           	bra	z,u21
   152  00E6FA  0004E702           	goto	u20
              00000000           
   153  00E6FE                     u21:
   154  00E6FE  0004E710           	goto	lab709
              00000000           
   155  00E702                     u20:
   156                           ;tasks.c: 638: {
   157                           
   158                           ;tasks.c: 642: *pxCreatedTask = ( TaskHandle_t )
                                  pxNewTCB;
   159                           
   160                           	line	642
   161  00E702  0097BB1F           	mov.w	[sp+((0+f19876+2)-0)], w6
   162  00E704  002FFE87           	mov.w	#((0+f19873+-4)-0),w7
   163  00E706  00478387           	add.w	sp,w7,w7
   164  00E708  00780397           	mov.w	[w7],w7
   165  00E70A  00780B86           	mov.w	w6,[w7]
   166                           ;tasks.c: 643: }
   167                           
   168                           	line	643
   169  00E70C  0004E710           	goto	lab710
              00000000           
   170                           	line	644
   171  00E710                     lab709:
   172                           ;tasks.c: 644: else
   173                           
   174                           ;tasks.c: 645: {
   175                           
   176                           ;tasks.c: 646: ;
   177                           
   178                           	line	647
   179  00E710                     lab710:
   180                           ;tasks.c: 647: }
   181                           
   182                           ;tasks.c: 651: vPortEnterCritical();
   183                           
   184                           	global	_vPortEnterCritical
   185                           	signat	_vPortEnterCritical,26
   186                           	line	651
   187  00E710  0002CA10           	call	(_vPortEnterCritical)
              00000000           
   188                           ;tasks.c: 652: {
   189                           
   190                           ;tasks.c: 653: uxCurrentNumberOfTasks++;
   191                           
   192                           	global	_uxCurrentNumberOfTasks
   193                           	line	653
   194  00E714  00EC2806           	inc.w	_uxCurrentNumberOfTasks
   195                           ;tasks.c: 654: if( pxCurrentTCB == (0) )
   196                           
   197                           	global	_pxCurrentTCB
   198                           	line	654
   199  00E716  00E20800           	cp0.w	_pxCurrentTCB
   200  00E718  003A0002           	bra	nz,u31
   201  00E71A  0004E722           	goto	u30
              00000000           
   202  00E71E                     u31:
   203  00E71E  0004E744           	goto	lab711
              00000000           
   204  00E722                     u30:
   205                           ;tasks.c: 655: {
   206                           
   207                           ;tasks.c: 658: pxCurrentTCB = pxNewTCB;
   208                           
   209                           	line	658
   210  00E722  002FFF26           	mov.w	#((0+f19876+2)-0),w6
   211  00E724  00478306           	add.w	sp,w6,w6
   212  00E726  00780316           	mov.w	[w6],w6
   213  00E728  00884006           	mov	w6,_pxCurrentTCB
   214                           ;tasks.c: 660: if( uxCurrentNumberOfTasks == ( U
                                 BaseType_t ) 1 )
   215                           
   216                           	line	660
   217  00E72A  00804036           	mov	_uxCurrentNumberOfTasks,w6
   218  00E72C  00E13061           	cp.w	w6, #1
   219  00E72E  003A0002           	bra	nz,u41
   220  00E730  0004E738           	goto	u40
              00000000           
   221  00E734                     u41:
   222  00E734  0004E740           	goto	lab712
              00000000           
   223  00E738                     u40:
   224                           ;tasks.c: 661: {
   225                           
   226                           ;tasks.c: 665: prvInitialiseTaskLists();
   227                           
   228                           	global	_prvInitialiseTaskLists
   229                           	signat	_prvInitialiseTaskLists,26
   230                           	line	665
   231  00E738  0002F790           	call	(_prvInitialiseTaskLists)
              00000000           
   232                           ;tasks.c: 666: }
   233                           
   234                           	line	666
   235  00E73C  0004E740           	goto	lab713
              00000000           
   236                           	line	667
   237  00E740                     lab712:
   238                           ;tasks.c: 667: else
   239                           
   240                           ;tasks.c: 668: {
   241                           
   242                           ;tasks.c: 669: ;
   243                           
   244                           	line	670
   245  00E740                     lab713:
   246                           ;tasks.c: 670: }
   247                           
   248                           ;tasks.c: 671: }
   249                           
   250                           	line	671
   251  00E740  0004E77A           	goto	lab714
              00000000           
   252                           	line	672
   253  00E744                     lab711:
   254                           ;tasks.c: 672: else
   255                           
   256                           ;tasks.c: 673: {
   257                           
   258                           ;tasks.c: 677: if( xSchedulerRunning == ( ( Base
                                 Type_t ) 0 ) )
   259                           
   260                           	global	_xSchedulerRunning
   261                           	line	677
   262  00E744  00E20812           	cp0.w	_xSchedulerRunning
   263  00E746  003A0002           	bra	nz,u51
   264  00E748  0004E750           	goto	u50
              00000000           
   265  00E74C                     u51:
   266  00E74C  0004E77A           	goto	lab715
              00000000           
   267  00E750                     u50:
   268                           ;tasks.c: 678: {
   269                           
   270                           ;tasks.c: 679: if( pxCurrentTCB->uxPriority <= u
                                 xPriority )
   271                           
   272                           	line	679
   273  00E750  002FFEA6           	mov.w	#((0+f19873+-2)-0),w6
   274  00E752  00478306           	add.w	sp,w6,w6
   275  00E754  00780316           	mov.w	[w6],w6
   276  00E756  00208007           	mov.w	#_pxCurrentTCB,w7
   277  00E758  00780397           	mov.w	[w7],w7
   278  00E75A  00B00167           	add.w	#22,w7
   279  00E75C  00780297           	mov.w	[w7],w5
   280  00E75E  00E12806           	cp.w	w5, w6
   281  00E760  003E0002           	bra	gtu,u61
   282  00E762  0004E76A           	goto	u60
              00000000           
   283  00E766                     u61:
   284  00E766  0004E776           	goto	lab716
              00000000           
   285  00E76A                     u60:
   286                           ;tasks.c: 680: {
   287                           
   288                           ;tasks.c: 681: pxCurrentTCB = pxNewTCB;
   289                           
   290                           	line	681
   291  00E76A  002FFF26           	mov.w	#((0+f19876+2)-0),w6
   292  00E76C  00478306           	add.w	sp,w6,w6
   293  00E76E  00780316           	mov.w	[w6],w6
   294  00E770  00884006           	mov	w6,_pxCurrentTCB
   295                           ;tasks.c: 682: }
   296                           
   297                           	line	682
   298  00E772  0004E776           	goto	lab717
              00000000           
   299                           	line	683
   300  00E776                     lab716:
   301                           ;tasks.c: 683: else
   302                           
   303                           ;tasks.c: 684: {
   304                           
   305                           ;tasks.c: 685: ;
   306                           
   307                           	line	686
   308  00E776                     lab717:
   309                           ;tasks.c: 686: }
   310                           
   311                           ;tasks.c: 687: }
   312                           
   313                           	line	687
   314  00E776  0004E77A           	goto	lab718
              00000000           
   315                           	line	688
   316  00E77A                     lab715:
   317                           ;tasks.c: 688: else
   318                           
   319                           ;tasks.c: 689: {
   320                           
   321                           ;tasks.c: 690: ;
   322                           
   323                           	line	691
   324  00E77A                     lab718:
   325                           	line	692
   326  00E77A                     lab714:
   327                           ;tasks.c: 691: }
   328                           
   329                           ;tasks.c: 692: }
   330                           
   331                           ;tasks.c: 694: uxTaskNumber++;
   332                           
   333                           	global	_uxTaskNumber
   334                           	line	694
   335  00E77A  00EC280C           	inc.w	_uxTaskNumber
   336                           ;tasks.c: 702: ;
   337                           
   338                           ;tasks.c: 704: ; { if( ( ( pxNewTCB )->uxPriorit
                                 y ) > uxTopReadyPriority ) { uxTopReadyPriority 
                                 = ( ( pxNewTCB )->uxPriority ); } }; vListInsert
                                 End( &( pxReadyTasksLists[ ( pxNewTCB )->uxPrior
                                 ity ] ), &( ( pxNewTCB )->xGenericListItem ) );
   339                           
   340                           	global	_uxTopReadyPriority
   341                           	line	704
   342  00E77C  00804076           	mov	_uxTopReadyPriority,w6
   343  00E77E  0097BB9F           	mov.w	[sp+((0+f19876+2)-0)],w7
   344  00E780  00B00167           	add.w	#22,w7
   345  00E782  00780297           	mov.w	[w7],w5
   346  00E784  00E12806           	cp.w	w5, w6
   347  00E786  00360002           	bra	leu,u71
   348  00E788  0004E790           	goto	u70
              00000000           
   349  00E78C                     u71:
   350  00E78C  0004E798           	goto	lab719
              00000000           
   351  00E790                     u70:
   352  00E790  0097BB9F           	mov.w	[sp+((0+f19876+2)-0)],w7
   353  00E792  00B00167           	add.w	#22,w7
   354  00E794  00780317           	mov.w	[w7],w6
   355  00E796  00884076           	mov	w6,_uxTopReadyPriority
   356  00E798                     lab719:
   357                           	global	_vListInsertEnd
   358                           	signat	_vListInsertEnd,8250
   359                           	global	_pxReadyTasksLists
   360  00E798  0097B91F           	mov.w	[sp+((0+f19876+2)-0)],w2
   361  00E79A  00B00022           	add.w	#2,w2
   362  00E79C  00208406           	mov	#_pxReadyTasksLists,w6
   363  00E79E  002000A4           	mov.w	#0Ah,w4
   364  00E7A0  0097BB9F           	mov.w	[sp+((0+f19876+2)-0)],w7
   365  00E7A2  00B00167           	add.w	#22,w7
   366  00E7A4  00780297           	mov.w	[w7],w5
   367  00E7A6  00780005           	mov.w	w5,w0
   368  00E7A8  00B80004           	mul.uu	w0,w4,w0
   369  00E7AA  00400006           	add.w	w0,w6,w0
   370  00E7AC  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
   371                           ;tasks.c: 706: xReturn = ( ( ( BaseType_t ) 1 ) 
                                 );
   372                           
   373                           	line	706
   374  00E7B0  00200017           	mov.w	#01h,w7
   375  00E7B2  002FFF06           	mov.w	#((0+f19876+0)-0),w6
   376  00E7B4  00478306           	add.w	sp,w6,w6
   377  00E7B6  00780B07           	mov.w	w7,[w6]
   378                           ;tasks.c: 707: ( void ) pxNewTCB;
   379                           
   380                           ;tasks.c: 708: }
   381                           
   382                           ;tasks.c: 709: vPortExitCritical();
   383                           
   384                           	global	_vPortExitCritical
   385                           	signat	_vPortExitCritical,26
   386                           	line	709
   387  00E7B8  0002CA22           	call	(_vPortExitCritical)
              00000000           
   388                           ;tasks.c: 710: }
   389                           
   390                           	line	710
   391  00E7BC  0004E7C8           	goto	lab720
              00000000           
   392                           	line	711
   393  00E7C0                     lab708:
   394                           ;tasks.c: 711: else
   395                           
   396                           ;tasks.c: 712: {
   397                           
   398                           ;tasks.c: 713: xReturn = ( -1 );
   399                           
   400                           	line	713
   401  00E7C0  002FFFF7           	mov.w	#-1,w7
   402  00E7C2  002FFF06           	mov.w	#((0+f19876+0)-0),w6
   403  00E7C4  00478306           	add.w	sp,w6,w6
   404  00E7C6  00780B07           	mov.w	w7,[w6]
   405                           ;tasks.c: 714: ;
   406                           
   407                           	line	715
   408  00E7C8                     lab720:
   409                           ;tasks.c: 715: }
   410                           
   411                           ;tasks.c: 717: if( xReturn == ( ( ( BaseType_t )
                                  1 ) ) )
   412                           
   413                           	line	717
   414  00E7C8  0097BB0F           	mov.w	[sp+((0+f19876+0)-0)],w6
   415  00E7CA  00E13061           	cp.w	w6, #1
   416  00E7CC  003A0002           	bra	nz,u81
   417  00E7CE  0004E7D6           	goto	u80
              00000000           
   418  00E7D2                     u81:
   419  00E7D2  0004E808           	goto	lab721
              00000000           
   420  00E7D6                     u80:
   421                           ;tasks.c: 718: {
   422                           
   423                           ;tasks.c: 719: if( xSchedulerRunning != ( ( Base
                                 Type_t ) 0 ) )
   424                           
   425                           	line	719
   426  00E7D6  00E20812           	cp0.w	_xSchedulerRunning
   427  00E7D8  00320002           	bra	z,u91
   428  00E7DA  0004E7E2           	goto	u90
              00000000           
   429  00E7DE                     u91:
   430  00E7DE  0004E808           	goto	lab722
              00000000           
   431  00E7E2                     u90:
   432                           ;tasks.c: 720: {
   433                           
   434                           ;tasks.c: 723: if( pxCurrentTCB->uxPriority < ux
                                 Priority )
   435                           
   436                           	line	723
   437  00E7E2  002FFEA6           	mov.w	#((0+f19873+-2)-0),w6
   438  00E7E4  00478306           	add.w	sp,w6,w6
   439  00E7E6  00780316           	mov.w	[w6],w6
   440  00E7E8  00208007           	mov.w	#_pxCurrentTCB,w7
   441  00E7EA  00780397           	mov.w	[w7],w7
   442  00E7EC  00B00167           	add.w	#22,w7
   443  00E7EE  00780297           	mov.w	[w7],w5
   444  00E7F0  00E12806           	cp.w	w5, w6
   445  00E7F2  00310002           	bra	geu,u101
   446  00E7F4  0004E7FC           	goto	u100
              00000000           
   447  00E7F8                     u101:
   448  00E7F8  0004E804           	goto	lab723
              00000000           
   449  00E7FC                     u100:
   450                           ;tasks.c: 724: {
   451                           
   452                           ;tasks.c: 725: vPortYield();
   453                           
   454                           	global	_vPortYield
   455                           	signat	_vPortYield,26
   456                           	line	725
   457  00E7FC  0002C410           	call	(_vPortYield)
              00000000           
   458                           ;tasks.c: 726: }
   459                           
   460                           	line	726
   461  00E800  0004E804           	goto	lab724
              00000000           
   462                           	line	727
   463  00E804                     lab723:
   464                           ;tasks.c: 727: else
   465                           
   466                           ;tasks.c: 728: {
   467                           
   468                           ;tasks.c: 729: ;
   469                           
   470                           	line	730
   471  00E804                     lab724:
   472                           ;tasks.c: 730: }
   473                           
   474                           ;tasks.c: 731: }
   475                           
   476                           	line	731
   477  00E804  0004E808           	goto	lab725
              00000000           
   478                           	line	732
   479  00E808                     lab722:
   480                           ;tasks.c: 732: else
   481                           
   482                           ;tasks.c: 733: {
   483                           
   484                           ;tasks.c: 734: ;
   485                           
   486                           	line	735
   487  00E808                     lab725:
   488                           	line	736
   489  00E808                     lab721:
   490                           ;tasks.c: 735: }
   491                           
   492                           ;tasks.c: 736: }
   493                           
   494                           ;tasks.c: 738: return xReturn;
   495                           
   496                           	line	738
   497  00E808  0097B80F           	mov.w	[sp+((0+f19876+0)-0)], w0
   498  00E80A  00780000           	mov.w	w0,w0
   499  00E80C  0004E810           	goto	lab707
              00000000           
   500                           ;tasks.c: 739: }
   501                           
   502                           	line	739
   503  00E810                     lab707:
   504                           	global	_xTaskGenericCreate
   505                           
   506  00E810  00B1010F           	sub.w	#16,sp
   507  00E812  00578768           	sub	sp,#8,w14
   508  00E814  0078274F           	mov.w	[--sp],[--w14]
   509  00E816  0078274F           	mov.w	[--sp],[--w14]
   510  00E818  00B1004F           	sub	#4,sp
   511  00E81A  00060000           	return
   512                           	line	552
   513                           
   514  00E81C                     f19871:
   515                           
   516  00E81C  00B0010F           	add.w	#16,sp
   517  00E81E  0004E674           	goto	f19870
              00000000           
   518  000000                     f19876	equ	-16		;stack offset for auto's
   519+ 000000                     f19873	equ	-20		;stack offset for parameters
   520+                          	line	0
   521+                          	global	 __end_of_xTaskGenericCreate
   522+ 00E822                     __end_of_xTaskGenericCreate:
   523                           	global	_vTaskDelayUntil
   524                           	signat	_vTaskDelayUntil,8250
   525                           	line	827
   526  00E822                     _vTaskDelayUntil:
   527  00E822  0004E952           	goto	f19961
              00000000           
   528  00E826                     f19960:
   529                           
   530                           ;tasks.c: 826: void vTaskDelayUntil( TickType_t 
                                 * const pxPreviousWakeTime, const TickType_t xTi
                                 meIncrement )
   531                           
   532                           ;tasks.c: 827: {
   533                           
   534                           ;tasks.c: 828: TickType_t xTimeToWake;
   535                           
   536                           ;tasks.c: 829: BaseType_t xAlreadyYielded, xShou
                                 ldDelay = ( ( BaseType_t ) 0 );
   537                           
   538                           	line	829
   539  00E826  00200007           	mov.w	#0,w7
   540  00E828  002FFF66           	mov.w	#((0+f19966+4)-0),w6
   541  00E82A  00478306           	add.w	sp,w6,w6
   542  00E82C  00780B07           	mov.w	w7,[w6]
   543                           ;tasks.c: 831: ;
   544                           
   545                           ;tasks.c: 832: ;
   546                           
   547                           ;tasks.c: 833: ;
   548                           
   549                           ;tasks.c: 835: vTaskSuspendAll();
   550                           
   551                           	global	_vTaskSuspendAll
   552                           	signat	_vTaskSuspendAll,26
   553                           ;_xTimeIncrement stored from w2
   554                           	line	835
   555  00E82E  002FFF86           	mov.w	#((0+f19966+6)-0),w6
   556  00E830  00478306           	add.w	sp,w6,w6
   557  00E832  00780B02           	mov.w	w2,[w6]
   558                           ;_pxPreviousWakeTime stored from w0
   559  00E834  002FFFA6           	mov.w	#((0+f19966+8)-0),w6
   560  00E836  00478306           	add.w	sp,w6,w6
   561  00E838  00780B00           	mov.w	w0,[w6]
   562  00E83A  0002EF04           	call	(_vTaskSuspendAll)
              00000000           
   563                           ;tasks.c: 836: {
   564                           
   565                           ;tasks.c: 839: const TickType_t xConstTickCount 
                                 = xTickCount;
   566                           
   567                           	global	_xTickCount
   568                           	line	839
   569  00E83E  008040A7           	mov	_xTickCount,w7
   570  00E840  002FFFC6           	mov.w	#((0+f19966+10)-0),w6
   571  00E842  00478306           	add.w	sp,w6,w6
   572  00E844  00780B07           	mov.w	w7,[w6]
   573                           ;tasks.c: 842: xTimeToWake = *pxPreviousWakeTime
                                  + xTimeIncrement;
   574                           
   575                           	line	842
   576  00E846  002FFF86           	mov.w	#((0+f19966+6)-0),w6
   577  00E848  00478306           	add.w	sp,w6,w6
   578  00E84A  00780316           	mov.w	[w6],w6
   579  00E84C  0097BBDF           	mov.w	[sp+((0+f19966+8)-0)],w7
   580  00E84E  00780297           	mov.w	[w7],w5
   581  00E850  00428286           	add.w	w5,w6,w5
   582  00E852  002FFF26           	mov.w	#((0+f19966+0)-0),w6
   583  00E854  00478306           	add.w	sp,w6,w6
   584  00E856  00780B05           	mov.w	w5,[w6]
   585                           ;tasks.c: 844: if( xConstTickCount < *pxPrevious
                                 WakeTime )
   586                           
   587                           	line	844
   588  00E858  0097BB5F           	mov.w	[sp+((0+f19966+8)-0)],w6
   589  00E85A  00780396           	mov.w	[w6],w7
   590  00E85C  002FFFC6           	mov.w	#((0+f19966+10)-0),w6
   591  00E85E  00478306           	add.w	sp,w6,w6
   592  00E860  00780316           	mov.w	[w6],w6
   593  00E862  00E13007           	cp.w	w6, w7
   594  00E864  00310002           	bra	geu,u111
   595  00E866  0004E86E           	goto	u110
              00000000           
   596  00E86A                     u111:
   597  00E86A  0004E8B0           	goto	lab727
              00000000           
   598  00E86E                     u110:
   599                           ;tasks.c: 845: {
   600                           
   601                           ;tasks.c: 851: if( ( xTimeToWake < *pxPreviousWa
                                 keTime ) && ( xTimeToWake > xConstTickCount ) )
   602                           
   603                           	line	851
   604  00E86E  0097BB5F           	mov.w	[sp+((0+f19966+8)-0)],w6
   605  00E870  00780396           	mov.w	[w6],w7
   606  00E872  002FFF26           	mov.w	#((0+f19966+0)-0),w6
   607  00E874  00478306           	add.w	sp,w6,w6
   608  00E876  00780316           	mov.w	[w6],w6
   609  00E878  00E13007           	cp.w	w6, w7
   610  00E87A  0031000E           	bra	geu,u121
   611  00E87C  0004E880           	goto	u120
              00000000           
   612  00E880                     u120:
   613  00E880  002FFFC6           	mov.w	#((0+f19966+10)-0),w6
   614  00E882  00478306           	add.w	sp,w6,w6
   615  00E884  00780396           	mov.w	[w6],w7
   616  00E886  002FFF26           	mov.w	#((0+f19966+0)-0),w6
   617  00E888  00478306           	add.w	sp,w6,w6
   618  00E88A  00780316           	mov.w	[w6],w6
   619  00E88C  00E13007           	cp.w	w6, w7
   620  00E88E  00360004           	bra	leu,u131
   621  00E890  0004E894           	goto	u130
              00000000           
   622  00E894                     u130:
   623  00E894  0004E8A0           	goto	u140
              00000000           
   624  00E898                     u121:
   625  00E898                     u131:
   626  00E898  0004E89C           	goto	u141
              00000000           
   627  00E89C                     u141:
   628  00E89C  0004E8AC           	goto	lab728
              00000000           
   629  00E8A0                     u140:
   630                           ;tasks.c: 852: {
   631                           
   632                           ;tasks.c: 853: xShouldDelay = ( ( BaseType_t ) 1
                                  );
   633                           
   634                           	line	853
   635  00E8A0  00200017           	mov.w	#01h,w7
   636  00E8A2  002FFF66           	mov.w	#((0+f19966+4)-0),w6
   637  00E8A4  00478306           	add.w	sp,w6,w6
   638  00E8A6  00780B07           	mov.w	w7,[w6]
   639                           ;tasks.c: 854: }
   640                           
   641                           	line	854
   642  00E8A8  0004E8AC           	goto	lab729
              00000000           
   643                           	line	855
   644  00E8AC                     lab728:
   645                           ;tasks.c: 855: else
   646                           
   647                           ;tasks.c: 856: {
   648                           
   649                           ;tasks.c: 857: ;
   650                           
   651                           	line	858
   652  00E8AC                     lab729:
   653                           ;tasks.c: 858: }
   654                           
   655                           ;tasks.c: 859: }
   656                           
   657                           	line	859
   658  00E8AC  0004E8EE           	goto	lab730
              00000000           
   659                           	line	860
   660  00E8B0                     lab727:
   661                           ;tasks.c: 860: else
   662                           
   663                           ;tasks.c: 861: {
   664                           
   665                           ;tasks.c: 865: if( ( xTimeToWake < *pxPreviousWa
                                 keTime ) || ( xTimeToWake > xConstTickCount ) )
   666                           
   667                           	line	865
   668  00E8B0  0097BB5F           	mov.w	[sp+((0+f19966+8)-0)],w6
   669  00E8B2  00780396           	mov.w	[w6],w7
   670  00E8B4  002FFF26           	mov.w	#((0+f19966+0)-0),w6
   671  00E8B6  00478306           	add.w	sp,w6,w6
   672  00E8B8  00780316           	mov.w	[w6],w6
   673  00E8BA  00E13007           	cp.w	w6, w7
   674  00E8BC  00310002           	bra	geu,u151
   675  00E8BE  0004E8D6           	goto	u150
              00000000           
   676  00E8C2                     u151:
   677  00E8C2  002FFFC6           	mov.w	#((0+f19966+10)-0),w6
   678  00E8C4  00478306           	add.w	sp,w6,w6
   679  00E8C6  00780396           	mov.w	[w6],w7
   680  00E8C8  002FFF26           	mov.w	#((0+f19966+0)-0),w6
   681  00E8CA  00478306           	add.w	sp,w6,w6
   682  00E8CC  00780316           	mov.w	[w6],w6
   683  00E8CE  00E13007           	cp.w	w6, w7
   684  00E8D0  00360004           	bra	leu,u161
   685  00E8D2  0004E8D6           	goto	u160
              00000000           
   686  00E8D6                     u150:
   687  00E8D6                     u160:
   688  00E8D6  0004E8E2           	goto	u170
              00000000           
   689  00E8DA                     u161:
   690  00E8DA  0004E8DE           	goto	u171
              00000000           
   691  00E8DE                     u171:
   692  00E8DE  0004E8EE           	goto	lab731
              00000000           
   693  00E8E2                     u170:
   694                           ;tasks.c: 866: {
   695                           
   696                           ;tasks.c: 867: xShouldDelay = ( ( BaseType_t ) 1
                                  );
   697                           
   698                           	line	867
   699  00E8E2  00200017           	mov.w	#01h,w7
   700  00E8E4  002FFF66           	mov.w	#((0+f19966+4)-0),w6
   701  00E8E6  00478306           	add.w	sp,w6,w6
   702  00E8E8  00780B07           	mov.w	w7,[w6]
   703                           ;tasks.c: 868: }
   704                           
   705                           	line	868
   706  00E8EA  0004E8EE           	goto	lab732
              00000000           
   707                           	line	869
   708  00E8EE                     lab731:
   709                           ;tasks.c: 869: else
   710                           
   711                           ;tasks.c: 870: {
   712                           
   713                           ;tasks.c: 871: ;
   714                           
   715                           	line	872
   716  00E8EE                     lab732:
   717                           	line	873
   718  00E8EE                     lab730:
   719                           ;tasks.c: 872: }
   720                           
   721                           ;tasks.c: 873: }
   722                           
   723                           ;tasks.c: 876: *pxPreviousWakeTime = xTimeToWake
                                 ;
   724                           
   725                           	line	876
   726  00E8EE  0097BB1F           	mov.w	[sp+((0+f19966+0)-0)], w6
   727  00E8F0  002FFFA7           	mov.w	#((0+f19966+8)-0),w7
   728  00E8F2  00478387           	add.w	sp,w7,w7
   729  00E8F4  00780397           	mov.w	[w7],w7
   730  00E8F6  00780B86           	mov.w	w6,[w7]
   731                           ;tasks.c: 878: if( xShouldDelay != ( ( BaseType_
                                 t ) 0 ) )
   732                           
   733                           	line	878
   734  00E8F8  002FFF66           	mov.w	#((0+f19966+4)-0),w6
   735  00E8FA  00478306           	add.w	sp,w6,w6
   736  00E8FC  00E00016           	cp0.w	[w6]
   737  00E8FE  00320002           	bra	z,u181
   738  00E900  0004E908           	goto	u180
              00000000           
   739  00E904                     u181:
   740  00E904  0004E92C           	goto	lab733
              00000000           
   741  00E908                     u180:
   742                           ;tasks.c: 879: {
   743                           
   744                           ;tasks.c: 880: ;
   745                           
   746                           ;tasks.c: 884: if( uxListRemove( &( pxCurrentTCB
                                 ->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   747                           
   748                           	global	_uxListRemove
   749                           	signat	_uxListRemove,4154
   750                           	line	884
   751  00E908  00208006           	mov.w	#_pxCurrentTCB,w6
   752  00E90A  00780016           	mov.w	[w6],w0
   753  00E90C  00B00020           	add.w	#2,w0
   754  00E90E  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
   755  00E912  00E00000           	cp0.w	w0
   756  00E914  003A0002           	bra	nz,u191
   757  00E916  0004E91E           	goto	u190
              00000000           
   758  00E91A                     u191:
   759  00E91A  0004E922           	goto	lab734
              00000000           
   760  00E91E                     u190:
   761                           ;tasks.c: 885: {
   762                           
   763                           ;tasks.c: 889: ;
   764                           
   765                           ;tasks.c: 890: }
   766                           
   767                           	line	890
   768  00E91E  0004E922           	goto	lab735
              00000000           
   769                           	line	891
   770  00E922                     lab734:
   771                           ;tasks.c: 891: else
   772                           
   773                           ;tasks.c: 892: {
   774                           
   775                           ;tasks.c: 893: ;
   776                           
   777                           	line	894
   778  00E922                     lab735:
   779                           ;tasks.c: 894: }
   780                           
   781                           ;tasks.c: 896: prvAddCurrentTaskToDelayedList( x
                                 TimeToWake );
   782                           
   783                           	global	_prvAddCurrentTaskToDelayedList
   784                           	signat	_prvAddCurrentTaskToDelayedList,4154
   785                           	line	896
   786  00E922  0097B81F           	mov.w	[sp+((0+f19966+0)-0)],w0
   787  00E924  0002F81E           	call	(_prvAddCurrentTaskToDelayedList)	;0 bytes
              00000000            adjustment
   788                           ;tasks.c: 897: }
   789                           
   790                           	line	897
   791  00E928  0004E92C           	goto	lab736
              00000000           
   792                           	line	898
   793  00E92C                     lab733:
   794                           ;tasks.c: 898: else
   795                           
   796                           ;tasks.c: 899: {
   797                           
   798                           ;tasks.c: 900: ;
   799                           
   800                           	line	901
   801  00E92C                     lab736:
   802                           ;tasks.c: 901: }
   803                           
   804                           ;tasks.c: 902: }
   805                           
   806                           ;tasks.c: 903: xAlreadyYielded = xTaskResumeAll(
                                 );
   807                           
   808                           	global	_xTaskResumeAll
   809                           	signat	_xTaskResumeAll,26
   810                           	line	903
   811  00E92C  0002EF10           	call	(_xTaskResumeAll)
              00000000           
   812  00E930  002FFF46           	mov.w	#((0+f19966+2)-0),w6
   813  00E932  00478306           	add.w	sp,w6,w6
   814  00E934  00780B00           	mov.w	w0,[w6]
   815                           ;tasks.c: 907: if( xAlreadyYielded == ( ( BaseTy
                                 pe_t ) 0 ) )
   816                           
   817                           	line	907
   818  00E936  002FFF46           	mov.w	#((0+f19966+2)-0),w6
   819  00E938  00478306           	add.w	sp,w6,w6
   820  00E93A  00E00016           	cp0.w	[w6]
   821  00E93C  003A0002           	bra	nz,u201
   822  00E93E  0004E946           	goto	u200
              00000000           
   823  00E942                     u201:
   824  00E942  0004E94E           	goto	lab737
              00000000           
   825  00E946                     u200:
   826                           ;tasks.c: 908: {
   827                           
   828                           ;tasks.c: 909: vPortYield();
   829                           
   830                           	line	909
   831  00E946  0002C410           	call	(_vPortYield)
              00000000           
   832                           ;tasks.c: 910: }
   833                           
   834                           	line	910
   835  00E94A  0004E94E           	goto	lab738
              00000000           
   836                           	line	911
   837  00E94E                     lab737:
   838                           ;tasks.c: 911: else
   839                           
   840                           ;tasks.c: 912: {
   841                           
   842                           ;tasks.c: 913: ;
   843                           
   844                           	line	914
   845  00E94E                     lab738:
   846                           ;tasks.c: 914: }
   847                           
   848                           ;tasks.c: 915: }
   849                           
   850                           	line	915
   851  00E94E                     lab726:
   852                           	global	_vTaskDelayUntil
   853                           
   854  00E94E  00B100EF           	sub.w	#14,sp
   855  00E950  00060000           	return
   856                           	line	827
   857                           
   858  00E952                     f19961:
   859                           
   860  00E952  00B000EF           	add.w	#14,sp
   861  00E954  0004E826           	goto	f19960
              00000000           
   862  000000                     f19966	equ	-14		;stack offset for auto's
   863  000000                     f19963	equ	-18		;stack offset for parameters
   864                           	line	0
   865                           	global	 __end_of_vTaskDelayUntil
   866  00E958                     __end_of_vTaskDelayUntil:
   867                           	global	_vTaskDelay
   868                           	signat	_vTaskDelay,4154
   869                           	line	923
   870  00E958                     _vTaskDelay:
   871  00E958  0004E9DA           	goto	f20011
              00000000           
   872  00E95C                     f20010:
   873                           
   874                           ;tasks.c: 922: void vTaskDelay( const TickType_t
                                  xTicksToDelay )
   875                           
   876                           ;tasks.c: 923: {
   877                           
   878                           ;tasks.c: 924: TickType_t xTimeToWake;
   879                           
   880                           ;tasks.c: 925: BaseType_t xAlreadyYielded = ( ( 
                                 BaseType_t ) 0 );
   881                           
   882                           	line	925
   883  00E95C  00200007           	mov.w	#0,w7
   884  00E95E  002FFFA6           	mov.w	#((0+f20016+2)-0),w6
   885  00E960  00478306           	add.w	sp,w6,w6
   886  00E962  00780B07           	mov.w	w7,[w6]
   887                           ;tasks.c: 929: if( xTicksToDelay > ( TickType_t 
                                 ) 0U )
   888                           
   889                           ;_xTicksToDelay stored from w0
   890                           	line	929
   891  00E964  002FFFC6           	mov.w	#((0+f20016+4)-0),w6
   892  00E966  00478306           	add.w	sp,w6,w6
   893  00E968  00780B00           	mov.w	w0,[w6]
   894  00E96A  002FFFC6           	mov.w	#((0+f20016+4)-0),w6
   895  00E96C  00478306           	add.w	sp,w6,w6
   896  00E96E  00E00016           	cp0.w	[w6]
   897  00E970  00320002           	bra	z,u211
   898  00E972  0004E97A           	goto	u210
              00000000           
   899  00E976                     u211:
   900  00E976  0004E9BE           	goto	lab740
              00000000           
   901  00E97A                     u210:
   902                           ;tasks.c: 930: {
   903                           
   904                           ;tasks.c: 931: ;
   905                           
   906                           ;tasks.c: 932: vTaskSuspendAll();
   907                           
   908                           	line	932
   909  00E97A  0002EF04           	call	(_vTaskSuspendAll)
              00000000           
   910                           ;tasks.c: 933: {
   911                           
   912                           ;tasks.c: 934: ;
   913                           
   914                           ;tasks.c: 946: xTimeToWake = xTickCount + xTicks
                                 ToDelay;
   915                           
   916                           	line	946
   917  00E97E  00208146           	mov.w	#_xTickCount,w6
   918  00E980  00780396           	mov.w	[w6],w7
   919  00E982  002FFFC6           	mov.w	#((0+f20016+4)-0),w6
   920  00E984  00478306           	add.w	sp,w6,w6
   921  00E986  00780316           	mov.w	[w6],w6
   922  00E988  00438386           	add.w	w7,w6,w7
   923  00E98A  002FFF86           	mov.w	#((0+f20016+0)-0),w6
   924  00E98C  00478306           	add.w	sp,w6,w6
   925  00E98E  00780B07           	mov.w	w7,[w6]
   926                           ;tasks.c: 951: if( uxListRemove( &( pxCurrentTCB
                                 ->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   927                           
   928                           	line	951
   929  00E990  00208006           	mov.w	#_pxCurrentTCB,w6
   930  00E992  00780016           	mov.w	[w6],w0
   931  00E994  00B00020           	add.w	#2,w0
   932  00E996  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
   933  00E99A  00E00000           	cp0.w	w0
   934  00E99C  003A0002           	bra	nz,u221
   935  00E99E  0004E9A6           	goto	u220
              00000000           
   936  00E9A2                     u221:
   937  00E9A2  0004E9AA           	goto	lab741
              00000000           
   938  00E9A6                     u220:
   939                           ;tasks.c: 952: {
   940                           
   941                           ;tasks.c: 956: ;
   942                           
   943                           ;tasks.c: 957: }
   944                           
   945                           	line	957
   946  00E9A6  0004E9AA           	goto	lab742
              00000000           
   947                           	line	958
   948  00E9AA                     lab741:
   949                           ;tasks.c: 958: else
   950                           
   951                           ;tasks.c: 959: {
   952                           
   953                           ;tasks.c: 960: ;
   954                           
   955                           	line	961
   956  00E9AA                     lab742:
   957                           ;tasks.c: 961: }
   958                           
   959                           ;tasks.c: 962: prvAddCurrentTaskToDelayedList( x
                                 TimeToWake );
   960                           
   961                           	line	962
   962  00E9AA  0097B84F           	mov.w	[sp+((0+f20016+0)-0)],w0
   963  00E9AC  0002F81E           	call	(_prvAddCurrentTaskToDelayedList)	;0 bytes
              00000000            adjustment
   964                           ;tasks.c: 963: }
   965                           
   966                           ;tasks.c: 964: xAlreadyYielded = xTaskResumeAll(
                                 );
   967                           
   968                           	line	964
   969  00E9B0  0002EF10           	call	(_xTaskResumeAll)
              00000000           
   970  00E9B4  002FFFA6           	mov.w	#((0+f20016+2)-0),w6
   971  00E9B6  00478306           	add.w	sp,w6,w6
   972  00E9B8  00780B00           	mov.w	w0,[w6]
   973                           ;tasks.c: 965: }
   974                           
   975                           	line	965
   976  00E9BA  0004E9BE           	goto	lab743
              00000000           
   977                           	line	966
   978  00E9BE                     lab740:
   979                           ;tasks.c: 966: else
   980                           
   981                           ;tasks.c: 967: {
   982                           
   983                           ;tasks.c: 968: ;
   984                           
   985                           	line	969
   986  00E9BE                     lab743:
   987                           ;tasks.c: 969: }
   988                           
   989                           ;tasks.c: 973: if( xAlreadyYielded == ( ( BaseTy
                                 pe_t ) 0 ) )
   990                           
   991                           	line	973
   992  00E9BE  002FFFA6           	mov.w	#((0+f20016+2)-0),w6
   993  00E9C0  00478306           	add.w	sp,w6,w6
   994  00E9C2  00E00016           	cp0.w	[w6]
   995  00E9C4  003A0002           	bra	nz,u231
   996  00E9C6  0004E9CE           	goto	u230
              00000000           
   997  00E9CA                     u231:
   998  00E9CA  0004E9D6           	goto	lab744
              00000000           
   999  00E9CE                     u230:
  1000                           ;tasks.c: 974: {
  1001                           
  1002                           ;tasks.c: 975: vPortYield();
  1003                           
  1004                           	line	975
  1005  00E9CE  0002C410           	call	(_vPortYield)
              00000000           
  1006                           ;tasks.c: 976: }
  1007                           
  1008                           	line	976
  1009  00E9D2  0004E9D6           	goto	lab745
              00000000           
  1010                           	line	977
  1011  00E9D6                     lab744:
  1012                           ;tasks.c: 977: else
  1013                           
  1014                           ;tasks.c: 978: {
  1015                           
  1016                           ;tasks.c: 979: ;
  1017                           
  1018                           	line	980
  1019  00E9D6                     lab745:
  1020                           ;tasks.c: 980: }
  1021                           
  1022                           ;tasks.c: 981: }
  1023                           
  1024                           	line	981
  1025  00E9D6                     lab739:
  1026                           	global	_vTaskDelay
  1027                           
  1028  00E9D6  00B1008F           	sub.w	#8,sp
  1029  00E9D8  00060000           	return
  1030                           	line	923
  1031                           
  1032  00E9DA                     f20011:
  1033                           
  1034  00E9DA  00B0008F           	add.w	#8,sp
  1035  00E9DC  0004E95C           	goto	f20010
              00000000           
  1036  000000                     f20016	equ	-8		;stack offset for auto's
  1037  000000                     f20013	equ	-12		;stack offset for parameters
  1038                           	line	0
  1039                           	global	 __end_of_vTaskDelay
  1040  00E9E0                     __end_of_vTaskDelay:
  1041                           	global	_vTaskPrioritySet
  1042                           	signat	_vTaskPrioritySet,8250
  1043                           	line	1121
  1044  00E9E0                     _vTaskPrioritySet:
  1045  00E9E0  0004EBA4           	goto	f20021
              00000000           
  1046  00E9E4                     f20020:
  1047                           
  1048                           ;tasks.c: 1120: void vTaskPrioritySet( TaskHandl
                                 e_t xTask, UBaseType_t uxNewPriority )
  1049                           
  1050                           ;tasks.c: 1121: {
  1051                           
  1052                           ;tasks.c: 1122: TCB_t *pxTCB;
  1053                           
  1054                           ;tasks.c: 1123: UBaseType_t uxCurrentBasePriorit
                                 y, uxPriorityUsedOnEntry;
  1055                           
  1056                           ;tasks.c: 1124: BaseType_t xYieldRequired = ( ( 
                                 BaseType_t ) 0 );
  1057                           
  1058                           	line	1124
  1059  00E9E4  00200007           	mov.w	#0,w7
  1060  00E9E6  002FFF86           	mov.w	#((0+f20026+6)-0),w6
  1061  00E9E8  00478306           	add.w	sp,w6,w6
  1062  00E9EA  00780B07           	mov.w	w7,[w6]
  1063                           ;tasks.c: 1126: ;
  1064                           
  1065                           ;tasks.c: 1129: if( uxNewPriority >= ( UBaseType
                                 _t ) ( 4 ) )
  1066                           
  1067                           ;_uxNewPriority stored from w2
  1068                           	line	1129
  1069  00E9EC  002FFFA6           	mov.w	#((0+f20026+8)-0),w6
  1070  00E9EE  00478306           	add.w	sp,w6,w6
  1071  00E9F0  00780B02           	mov.w	w2,[w6]
  1072                           ;_xTask stored from w0
  1073  00E9F2  002FFFC6           	mov.w	#((0+f20026+10)-0),w6
  1074  00E9F4  00478306           	add.w	sp,w6,w6
  1075  00E9F6  00780B00           	mov.w	w0,[w6]
  1076  00E9F8  00200047           	mov.w	#04h,w7
  1077  00E9FA  002FFFA6           	mov.w	#((0+f20026+8)-0),w6
  1078  00E9FC  00478306           	add.w	sp,w6,w6
  1079  00E9FE  00780316           	mov.w	[w6],w6
  1080  00EA00  00E13007           	cp.w	w6, w7
  1081  00EA02  00390002           	bra	ltu,u241
  1082  00EA04  0004EA0C           	goto	u240
              00000000           
  1083  00EA08                     u241:
  1084  00EA08  0004EA18           	goto	lab747
              00000000           
  1085  00EA0C                     u240:
  1086                           ;tasks.c: 1130: {
  1087                           
  1088                           ;tasks.c: 1131: uxNewPriority = ( UBaseType_t ) 
                                 ( 4 ) - ( UBaseType_t ) 1U;
  1089                           
  1090                           	line	1131
  1091  00EA0C  00200037           	mov.w	#03h,w7
  1092  00EA0E  002FFFA6           	mov.w	#((0+f20026+8)-0),w6
  1093  00EA10  00478306           	add.w	sp,w6,w6
  1094  00EA12  00780B07           	mov.w	w7,[w6]
  1095                           ;tasks.c: 1132: }
  1096                           
  1097                           	line	1132
  1098  00EA14  0004EA18           	goto	lab748
              00000000           
  1099                           	line	1133
  1100  00EA18                     lab747:
  1101                           ;tasks.c: 1133: else
  1102                           
  1103                           ;tasks.c: 1134: {
  1104                           
  1105                           ;tasks.c: 1135: ;
  1106                           
  1107                           	line	1136
  1108  00EA18                     lab748:
  1109                           ;tasks.c: 1136: }
  1110                           
  1111                           ;tasks.c: 1138: vPortEnterCritical();
  1112                           
  1113                           	line	1138
  1114  00EA18  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  1115                           ;tasks.c: 1139: {
  1116                           
  1117                           ;tasks.c: 1142: pxTCB = ( ( ( xTask ) == (0) ) ?
                                  ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( xTask 
                                 ) );
  1118                           
  1119                           	line	1142
  1120  00EA1C  002FFFC6           	mov.w	#((0+f20026+10)-0),w6
  1121  00EA1E  00478306           	add.w	sp,w6,w6
  1122  00EA20  00E00016           	cp0.w	[w6]
  1123  00EA22  00320009           	bra	z,u251
  1124  00EA24  0004EA28           	goto	u250
              00000000           
  1125  00EA28                     u250:
  1126  00EA28  0097B86F           	mov.w	[sp+((0+f20026+10)-0)],w0
  1127  00EA2A  0004EA3A           	goto	u264
              00000000           
  1128  00EA2E                     u263:
  1129  00EA2E  00208006           	mov.w	#_pxCurrentTCB,w6
  1130  00EA30  00780016           	mov.w	[w6],w0
  1131  00EA32  0004EA3A           	goto	u264
              00000000           
  1132  00EA36                     u251:
  1133  00EA36  0004EA2E           	goto	u263
              00000000           
  1134  00EA3A                     u264:
  1135  00EA3A  002FFF26           	mov.w	#((0+f20026+0)-0),w6
  1136  00EA3C  00478306           	add.w	sp,w6,w6
  1137  00EA3E  00780B00           	mov.w	w0,[w6]
  1138                           ;tasks.c: 1144: ;
  1139                           
  1140                           ;tasks.c: 1151: {
  1141                           
  1142                           ;tasks.c: 1152: uxCurrentBasePriority = pxTCB->u
                                 xPriority;
  1143                           
  1144                           	line	1152
  1145  00EA40  0097BB9F           	mov.w	[sp+((0+f20026+0)-0)],w7
  1146  00EA42  00B00167           	add.w	#22,w7
  1147  00EA44  002FFF46           	mov.w	#((0+f20026+2)-0),w6
  1148  00EA46  00478306           	add.w	sp,w6,w6
  1149  00EA48  00780B17           	mov.w	[w7],[w6]
  1150                           ;tasks.c: 1153: }
  1151                           
  1152                           ;tasks.c: 1156: if( uxCurrentBasePriority != uxN
                                 ewPriority )
  1153                           
  1154                           	line	1156
  1155  00EA4A  0097BBDF           	mov.w	[sp+((0+f20026+8)-0)],w7
  1156  00EA4C  0097BB2F           	mov.w	[sp+((0+f20026+2)-0)],w6
  1157  00EA4E  00E13007           	cp.w	w6, w7
  1158  00EA50  00320002           	bra	z,u271
  1159  00EA52  0004EA5A           	goto	u270
              00000000           
  1160  00EA56                     u271:
  1161  00EA56  0004EB9C           	goto	lab749
              00000000           
  1162  00EA5A                     u270:
  1163                           ;tasks.c: 1157: {
  1164                           
  1165                           ;tasks.c: 1160: if( uxNewPriority > uxCurrentBas
                                 ePriority )
  1166                           
  1167                           	line	1160
  1168  00EA5A  002FFF46           	mov.w	#((0+f20026+2)-0),w6
  1169  00EA5C  00478306           	add.w	sp,w6,w6
  1170  00EA5E  00780396           	mov.w	[w6],w7
  1171  00EA60  002FFFA6           	mov.w	#((0+f20026+8)-0),w6
  1172  00EA62  00478306           	add.w	sp,w6,w6
  1173  00EA64  00780316           	mov.w	[w6],w6
  1174  00EA66  00E13007           	cp.w	w6, w7
  1175  00EA68  00360002           	bra	leu,u281
  1176  00EA6A  0004EA72           	goto	u280
              00000000           
  1177  00EA6E                     u281:
  1178  00EA6E  0004EAB2           	goto	lab750
              00000000           
  1179  00EA72                     u280:
  1180                           ;tasks.c: 1161: {
  1181                           
  1182                           ;tasks.c: 1162: if( pxTCB != pxCurrentTCB )
  1183                           
  1184                           	line	1162
  1185  00EA72  00208006           	mov.w	#_pxCurrentTCB,w6
  1186  00EA74  00780396           	mov.w	[w6],w7
  1187  00EA76  0097BB1F           	mov.w	[sp+((0+f20026+0)-0)],w6
  1188  00EA78  00E13007           	cp.w	w6, w7
  1189  00EA7A  00320002           	bra	z,u291
  1190  00EA7C  0004EA84           	goto	u290
              00000000           
  1191  00EA80                     u291:
  1192  00EA80  0004EAAE           	goto	lab751
              00000000           
  1193  00EA84                     u290:
  1194                           ;tasks.c: 1163: {
  1195                           
  1196                           ;tasks.c: 1167: if( uxNewPriority >= pxCurrentTC
                                 B->uxPriority )
  1197                           
  1198                           	line	1167
  1199  00EA84  00208006           	mov.w	#_pxCurrentTCB,w6
  1200  00EA86  00780316           	mov.w	[w6],w6
  1201  00EA88  00B00166           	add.w	#22,w6
  1202  00EA8A  00780396           	mov.w	[w6],w7
  1203  00EA8C  002FFFA6           	mov.w	#((0+f20026+8)-0),w6
  1204  00EA8E  00478306           	add.w	sp,w6,w6
  1205  00EA90  00780316           	mov.w	[w6],w6
  1206  00EA92  00E13007           	cp.w	w6, w7
  1207  00EA94  00390002           	bra	ltu,u301
  1208  00EA96  0004EA9E           	goto	u300
              00000000           
  1209  00EA9A                     u301:
  1210  00EA9A  0004EAAA           	goto	lab752
              00000000           
  1211  00EA9E                     u300:
  1212                           ;tasks.c: 1168: {
  1213                           
  1214                           ;tasks.c: 1169: xYieldRequired = ( ( BaseType_t 
                                 ) 1 );
  1215                           
  1216                           	line	1169
  1217  00EA9E  00200017           	mov.w	#01h,w7
  1218  00EAA0  002FFF86           	mov.w	#((0+f20026+6)-0),w6
  1219  00EAA2  00478306           	add.w	sp,w6,w6
  1220  00EAA4  00780B07           	mov.w	w7,[w6]
  1221                           ;tasks.c: 1170: }
  1222                           
  1223                           	line	1170
  1224  00EAA6  0004EAAA           	goto	lab753
              00000000           
  1225                           	line	1171
  1226  00EAAA                     lab752:
  1227                           ;tasks.c: 1171: else
  1228                           
  1229                           ;tasks.c: 1172: {
  1230                           
  1231                           ;tasks.c: 1173: ;
  1232                           
  1233                           	line	1174
  1234  00EAAA                     lab753:
  1235                           ;tasks.c: 1174: }
  1236                           
  1237                           ;tasks.c: 1175: }
  1238                           
  1239                           	line	1175
  1240  00EAAA  0004EAAE           	goto	lab754
              00000000           
  1241                           	line	1176
  1242  00EAAE                     lab751:
  1243                           ;tasks.c: 1176: else
  1244                           
  1245                           ;tasks.c: 1177: {
  1246                           
  1247                           	line	1181
  1248  00EAAE                     lab754:
  1249                           ;tasks.c: 1181: }
  1250                           
  1251                           ;tasks.c: 1182: }
  1252                           
  1253                           	line	1182
  1254  00EAAE  0004EAD0           	goto	lab755
              00000000           
  1255                           	line	1183
  1256  00EAB2                     lab750:
  1257                           ;tasks.c: 1183: else if( pxTCB == pxCurrentTCB )
  1258                           
  1259  00EAB2  00208006           	mov.w	#_pxCurrentTCB,w6
  1260  00EAB4  00780396           	mov.w	[w6],w7
  1261  00EAB6  0097BB1F           	mov.w	[sp+((0+f20026+0)-0)],w6
  1262  00EAB8  00E13007           	cp.w	w6, w7
  1263  00EABA  003A0002           	bra	nz,u311
  1264  00EABC  0004EAC4           	goto	u310
              00000000           
  1265  00EAC0                     u311:
  1266  00EAC0  0004EAD0           	goto	lab756
              00000000           
  1267  00EAC4                     u310:
  1268                           ;tasks.c: 1184: {
  1269                           
  1270                           ;tasks.c: 1188: xYieldRequired = ( ( BaseType_t 
                                 ) 1 );
  1271                           
  1272                           	line	1188
  1273  00EAC4  00200017           	mov.w	#01h,w7
  1274  00EAC6  002FFF86           	mov.w	#((0+f20026+6)-0),w6
  1275  00EAC8  00478306           	add.w	sp,w6,w6
  1276  00EACA  00780B07           	mov.w	w7,[w6]
  1277                           ;tasks.c: 1189: }
  1278                           
  1279                           	line	1189
  1280  00EACC  0004EAD0           	goto	lab757
              00000000           
  1281                           	line	1190
  1282  00EAD0                     lab756:
  1283                           ;tasks.c: 1190: else
  1284                           
  1285                           ;tasks.c: 1191: {
  1286                           
  1287                           	line	1195
  1288  00EAD0                     lab757:
  1289  00EAD0                     lab755:
  1290                           ;tasks.c: 1195: }
  1291                           
  1292                           ;tasks.c: 1200: uxPriorityUsedOnEntry = pxTCB->u
                                 xPriority;
  1293                           
  1294                           	line	1200
  1295  00EAD0  0097BB9F           	mov.w	[sp+((0+f20026+0)-0)],w7
  1296  00EAD2  00B00167           	add.w	#22,w7
  1297  00EAD4  002FFF66           	mov.w	#((0+f20026+4)-0),w6
  1298  00EAD6  00478306           	add.w	sp,w6,w6
  1299  00EAD8  00780B17           	mov.w	[w7],[w6]
  1300                           ;tasks.c: 1219: {
  1301                           
  1302                           ;tasks.c: 1220: pxTCB->uxPriority = uxNewPriorit
                                 y;
  1303                           
  1304                           	line	1220
  1305  00EADA  002FFFA6           	mov.w	#((0+f20026+8)-0),w6
  1306  00EADC  00478306           	add.w	sp,w6,w6
  1307  00EADE  00780316           	mov.w	[w6],w6
  1308  00EAE0  002FFF27           	mov.w	#((0+f20026+0)-0),w7
  1309  00EAE2  00478387           	add.w	sp,w7,w7
  1310  00EAE4  00780297           	mov	[w7],w5
  1311  00EAE6  00980AB6           	mov.w	w6,[w5+22]
  1312                           ;tasks.c: 1221: }
  1313                           
  1314                           ;tasks.c: 1226: if( ( ( ( &( pxTCB->xEventListIt
                                 em ) )->xItemValue ) & 0x8000U ) == 0UL )
  1315                           
  1316                           	line	1226
  1317  00EAE8  00280006           	mov.w	#-32768,w6
  1318  00EAEA  0097BB9F           	mov.w	[sp+((0+f20026+0)-0)],w7
  1319  00EAEC  00B000C7           	add.w	#12,w7
  1320  00EAEE  00780297           	mov.w	[w7],w5
  1321  00EAF0  00628286           	and.w	w5,w6,w5
  1322  00EAF2  00E00005           	cp0.w	w5
  1323  00EAF4  003A0002           	bra	nz,u321
  1324  00EAF6  0004EAFE           	goto	u320
              00000000           
  1325  00EAFA                     u321:
  1326  00EAFA  0004EB14           	goto	lab758
              00000000           
  1327  00EAFE                     u320:
  1328                           ;tasks.c: 1227: {
  1329                           
  1330                           ;tasks.c: 1228: ( ( &( pxTCB->xEventListItem ) )
                                 ->xItemValue = ( ( ( TickType_t ) ( 4 ) - ( Tick
                                 Type_t ) uxNewPriority ) ) );
  1331                           
  1332                           	line	1228
  1333  00EAFE  002FFFA6           	mov.w	#((0+f20026+8)-0),w6
  1334  00EB00  00478306           	add.w	sp,w6,w6
  1335  00EB02  00780396           	mov.w	[w6],w7
  1336  00EB04  00200046           	mov.w	#04h,w6
  1337  00EB06  00530307           	sub.w	w6,w7,w6
  1338  00EB08  002FFF27           	mov.w	#((0+f20026+0)-0),w7
  1339  00EB0A  00478387           	add.w	sp,w7,w7
  1340  00EB0C  00780297           	mov	[w7],w5
  1341  00EB0E  009802E6           	mov.w	w6,[w5+12]
  1342                           ;tasks.c: 1229: }
  1343                           
  1344                           	line	1229
  1345  00EB10  0004EB14           	goto	lab759
              00000000           
  1346                           	line	1230
  1347  00EB14                     lab758:
  1348                           ;tasks.c: 1230: else
  1349                           
  1350                           ;tasks.c: 1231: {
  1351                           
  1352                           ;tasks.c: 1232: ;
  1353                           
  1354                           	line	1233
  1355  00EB14                     lab759:
  1356                           ;tasks.c: 1233: }
  1357                           
  1358                           ;tasks.c: 1239: if( ( ( BaseType_t ) ( ( &( pxTC
                                 B->xGenericListItem ) )->pvContainer == ( void *
                                  ) ( &( pxReadyTasksLists[ uxPriorityUsedOnEntry
                                  ] ) ) ) ) != ( ( BaseType_t ) 0 ) )
  1359                           
  1360                           	line	1239
  1361  00EB14  00208406           	mov	#_pxReadyTasksLists,w6
  1362  00EB16  002000A7           	mov.w	#0Ah,w7
  1363  00EB18  00780107           	mov.w	w7,w2
  1364  00EB1A  002FFF67           	mov.w	#((0+f20026+4)-0),w7
  1365  00EB1C  00478387           	add.w	sp,w7,w7
  1366  00EB1E  00780217           	mov.w	[w7],w4
  1367  00EB20  00B82202           	mul.uu	w4,w2,w4
  1368  00EB22  00420206           	add.w	w4,w6,w4
  1369  00EB24  0097BB9F           	mov.w	[sp+((0+f20026+0)-0)],w7
  1370  00EB26  00B000A7           	add.w	#10,w7
  1371  00EB28  00780317           	mov.w	[w7],w6
  1372  00EB2A  00E12006           	cp.w	w4, w6
  1373  00EB2C  003A0002           	bra	nz,u331
  1374  00EB2E  0004EB36           	goto	u330
              00000000           
  1375  00EB32                     u331:
  1376  00EB32  0004EB86           	goto	lab760
              00000000           
  1377  00EB36                     u330:
  1378                           ;tasks.c: 1240: {
  1379                           
  1380                           ;tasks.c: 1244: if( uxListRemove( &( pxTCB->xGen
                                 ericListItem ) ) == ( UBaseType_t ) 0 )
  1381                           
  1382                           	line	1244
  1383  00EB36  0097B81F           	mov.w	[sp+((0+f20026+0)-0)],w0
  1384  00EB38  00B00020           	add.w	#2,w0
  1385  00EB3A  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  1386  00EB3E  00E00000           	cp0.w	w0
  1387  00EB40  003A0002           	bra	nz,u341
  1388  00EB42  0004EB4A           	goto	u340
              00000000           
  1389  00EB46                     u341:
  1390  00EB46  0004EB4E           	goto	lab761
              00000000           
  1391  00EB4A                     u340:
  1392                           ;tasks.c: 1245: {
  1393                           
  1394                           ;tasks.c: 1249: ;
  1395                           
  1396                           ;tasks.c: 1250: }
  1397                           
  1398                           	line	1250
  1399  00EB4A  0004EB4E           	goto	lab762
              00000000           
  1400                           	line	1251
  1401  00EB4E                     lab761:
  1402                           ;tasks.c: 1251: else
  1403                           
  1404                           ;tasks.c: 1252: {
  1405                           
  1406                           ;tasks.c: 1253: ;
  1407                           
  1408                           	line	1254
  1409  00EB4E                     lab762:
  1410                           ;tasks.c: 1254: }
  1411                           
  1412                           ;tasks.c: 1255: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  1413                           
  1414                           	line	1255
  1415  00EB4E  00804076           	mov	_uxTopReadyPriority,w6
  1416  00EB50  0097BB9F           	mov.w	[sp+((0+f20026+0)-0)],w7
  1417  00EB52  00B00167           	add.w	#22,w7
  1418  00EB54  00780297           	mov.w	[w7],w5
  1419  00EB56  00E12806           	cp.w	w5, w6
  1420  00EB58  00360002           	bra	leu,u351
  1421  00EB5A  0004EB62           	goto	u350
              00000000           
  1422  00EB5E                     u351:
  1423  00EB5E  0004EB6A           	goto	lab763
              00000000           
  1424  00EB62                     u350:
  1425  00EB62  0097BB9F           	mov.w	[sp+((0+f20026+0)-0)],w7
  1426  00EB64  00B00167           	add.w	#22,w7
  1427  00EB66  00780317           	mov.w	[w7],w6
  1428  00EB68  00884076           	mov	w6,_uxTopReadyPriority
  1429  00EB6A                     lab763:
  1430  00EB6A  0097B91F           	mov.w	[sp+((0+f20026+0)-0)],w2
  1431  00EB6C  00B00022           	add.w	#2,w2
  1432  00EB6E  00208406           	mov	#_pxReadyTasksLists,w6
  1433  00EB70  002000A4           	mov.w	#0Ah,w4
  1434  00EB72  0097BB9F           	mov.w	[sp+((0+f20026+0)-0)],w7
  1435  00EB74  00B00167           	add.w	#22,w7
  1436  00EB76  00780297           	mov.w	[w7],w5
  1437  00EB78  00780005           	mov.w	w5,w0
  1438  00EB7A  00B80004           	mul.uu	w0,w4,w0
  1439  00EB7C  00400006           	add.w	w0,w6,w0
  1440  00EB7E  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  1441                           ;tasks.c: 1256: }
  1442                           
  1443                           	line	1256
  1444  00EB82  0004EB86           	goto	lab764
              00000000           
  1445                           	line	1257
  1446  00EB86                     lab760:
  1447                           ;tasks.c: 1257: else
  1448                           
  1449                           ;tasks.c: 1258: {
  1450                           
  1451                           ;tasks.c: 1259: ;
  1452                           
  1453                           	line	1260
  1454  00EB86                     lab764:
  1455                           ;tasks.c: 1260: }
  1456                           
  1457                           ;tasks.c: 1262: if( xYieldRequired == ( ( BaseTy
                                 pe_t ) 1 ) )
  1458                           
  1459                           	line	1262
  1460  00EB86  0097BB4F           	mov.w	[sp+((0+f20026+6)-0)],w6
  1461  00EB88  00E13061           	cp.w	w6, #1
  1462  00EB8A  003A0002           	bra	nz,u361
  1463  00EB8C  0004EB94           	goto	u360
              00000000           
  1464  00EB90                     u361:
  1465  00EB90  0004EB9C           	goto	lab765
              00000000           
  1466  00EB94                     u360:
  1467                           ;tasks.c: 1263: {
  1468                           
  1469                           ;tasks.c: 1264: vPortYield();
  1470                           
  1471                           	line	1264
  1472  00EB94  0002C410           	call	(_vPortYield)
              00000000           
  1473                           ;tasks.c: 1265: }
  1474                           
  1475                           	line	1265
  1476  00EB98  0004EB9C           	goto	lab766
              00000000           
  1477                           	line	1266
  1478  00EB9C                     lab765:
  1479                           ;tasks.c: 1266: else
  1480                           
  1481                           ;tasks.c: 1267: {
  1482                           
  1483                           ;tasks.c: 1268: ;
  1484                           
  1485                           	line	1269
  1486  00EB9C                     lab766:
  1487                           ;tasks.c: 1269: }
  1488                           
  1489                           ;tasks.c: 1273: ( void ) uxPriorityUsedOnEntry;
  1490                           
  1491                           	line	1274
  1492  00EB9C                     lab749:
  1493                           ;tasks.c: 1274: }
  1494                           
  1495                           ;tasks.c: 1275: }
  1496                           
  1497                           ;tasks.c: 1276: vPortExitCritical();
  1498                           
  1499                           	line	1276
  1500  00EB9C  0002CA22           	call	(_vPortExitCritical)
              00000000           
  1501                           ;tasks.c: 1277: }
  1502                           
  1503                           	line	1277
  1504  00EBA0                     lab746:
  1505                           	global	_vTaskPrioritySet
  1506                           
  1507  00EBA0  00B100EF           	sub.w	#14,sp
  1508  00EBA2  00060000           	return
  1509                           	line	1121
  1510                           
  1511  00EBA4                     f20021:
  1512                           
  1513  00EBA4  00B000EF           	add.w	#14,sp
  1514  00EBA6  0004E9E4           	goto	f20020
              00000000           
  1515  000000                     f20026	equ	-14		;stack offset for auto's
  1516  000000                     f20023	equ	-18		;stack offset for parameters
  1517                           	line	0
  1518                           	global	 __end_of_vTaskPrioritySet
  1519  00EBAA                     __end_of_vTaskPrioritySet:
  1520                           	global	_vTaskSuspend
  1521                           	signat	_vTaskSuspend,4154
  1522                           	line	1285
  1523  00EBAA                     _vTaskSuspend:
  1524  00EBAA  0004EC84           	goto	f20031
              00000000           
  1525  00EBAE                     f20030:
  1526                           
  1527                           ;tasks.c: 1284: void vTaskSuspend( TaskHandle_t 
                                 xTaskToSuspend )
  1528                           
  1529                           ;tasks.c: 1285: {
  1530                           
  1531                           ;tasks.c: 1286: TCB_t *pxTCB;
  1532                           
  1533                           ;tasks.c: 1288: vPortEnterCritical();
  1534                           
  1535                           ;_xTaskToSuspend stored from w0
  1536                           	line	1288
  1537  00EBAE  002FFFC6           	mov.w	#((0+f20036+2)-0),w6
  1538  00EBB0  00478306           	add.w	sp,w6,w6
  1539  00EBB2  00780B00           	mov.w	w0,[w6]
  1540  00EBB4  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  1541                           ;tasks.c: 1289: {
  1542                           
  1543                           ;tasks.c: 1292: pxTCB = ( ( ( xTaskToSuspend ) =
                                 = (0) ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * )
                                  ( xTaskToSuspend ) );
  1544                           
  1545                           	line	1292
  1546  00EBB8  002FFFC6           	mov.w	#((0+f20036+2)-0),w6
  1547  00EBBA  00478306           	add.w	sp,w6,w6
  1548  00EBBC  00E00016           	cp0.w	[w6]
  1549  00EBBE  00320009           	bra	z,u371
  1550  00EBC0  0004EBC4           	goto	u370
              00000000           
  1551  00EBC4                     u370:
  1552  00EBC4  0097B86F           	mov.w	[sp+((0+f20036+2)-0)],w0
  1553  00EBC6  0004EBD6           	goto	u384
              00000000           
  1554  00EBCA                     u383:
  1555  00EBCA  00208006           	mov.w	#_pxCurrentTCB,w6
  1556  00EBCC  00780016           	mov.w	[w6],w0
  1557  00EBCE  0004EBD6           	goto	u384
              00000000           
  1558  00EBD2                     u371:
  1559  00EBD2  0004EBCA           	goto	u383
              00000000           
  1560  00EBD6                     u384:
  1561  00EBD6  002FFFA6           	mov.w	#((0+f20036+0)-0),w6
  1562  00EBD8  00478306           	add.w	sp,w6,w6
  1563  00EBDA  00780B00           	mov.w	w0,[w6]
  1564                           ;tasks.c: 1294: ;
  1565                           
  1566                           ;tasks.c: 1298: if( uxListRemove( &( pxTCB->xGen
                                 ericListItem ) ) == ( UBaseType_t ) 0 )
  1567                           
  1568                           	line	1298
  1569  00EBDC  0097B85F           	mov.w	[sp+((0+f20036+0)-0)],w0
  1570  00EBDE  00B00020           	add.w	#2,w0
  1571  00EBE0  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  1572  00EBE4  00E00000           	cp0.w	w0
  1573  00EBE6  003A0002           	bra	nz,u391
  1574  00EBE8  0004EBF0           	goto	u390
              00000000           
  1575  00EBEC                     u391:
  1576  00EBEC  0004EBF4           	goto	lab768
              00000000           
  1577  00EBF0                     u390:
  1578                           ;tasks.c: 1299: {
  1579                           
  1580                           ;tasks.c: 1300: ;
  1581                           
  1582                           ;tasks.c: 1301: }
  1583                           
  1584                           	line	1301
  1585  00EBF0  0004EBF4           	goto	lab769
              00000000           
  1586                           	line	1302
  1587  00EBF4                     lab768:
  1588                           ;tasks.c: 1302: else
  1589                           
  1590                           ;tasks.c: 1303: {
  1591                           
  1592                           ;tasks.c: 1304: ;
  1593                           
  1594                           	line	1305
  1595  00EBF4                     lab769:
  1596                           ;tasks.c: 1305: }
  1597                           
  1598                           ;tasks.c: 1308: if( ( ( &( pxTCB->xEventListItem
                                  ) )->pvContainer ) != (0) )
  1599                           
  1600                           	line	1308
  1601  00EBF4  0097BB5F           	mov.w	[sp+((0+f20036+0)-0)],w6
  1602  00EBF6  00B00146           	add.w	#20,w6
  1603  00EBF8  00E00016           	cp0.w	[w6]
  1604  00EBFA  00320002           	bra	z,u401
  1605  00EBFC  0004EC04           	goto	u400
              00000000           
  1606  00EC00                     u401:
  1607  00EC00  0004EC10           	goto	lab770
              00000000           
  1608  00EC04                     u400:
  1609                           ;tasks.c: 1309: {
  1610                           
  1611                           ;tasks.c: 1310: ( void ) uxListRemove( &( pxTCB-
                                 >xEventListItem ) );
  1612                           
  1613                           	line	1310
  1614  00EC04  0097B85F           	mov.w	[sp+((0+f20036+0)-0)],w0
  1615  00EC06  00B000C0           	add.w	#12,w0
  1616  00EC08  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  1617                           ;tasks.c: 1311: }
  1618                           
  1619                           	line	1311
  1620  00EC0C  0004EC10           	goto	lab771
              00000000           
  1621                           	line	1312
  1622  00EC10                     lab770:
  1623                           ;tasks.c: 1312: else
  1624                           
  1625                           ;tasks.c: 1313: {
  1626                           
  1627                           ;tasks.c: 1314: ;
  1628                           
  1629                           	line	1315
  1630  00EC10                     lab771:
  1631                           ;tasks.c: 1315: }
  1632                           
  1633                           ;tasks.c: 1317: vListInsertEnd( &xSuspendedTaskL
                                 ist, &( pxTCB->xGenericListItem ) );
  1634                           
  1635                           	global	_xSuspendedTaskList
  1636                           	line	1317
  1637  00EC10  0097B95F           	mov.w	[sp+((0+f20036+0)-0)],w2
  1638  00EC12  00B00022           	add.w	#2,w2
  1639  00EC14  00208366           	mov.w	#_xSuspendedTaskList,w6
  1640  00EC16  00780006           	mov.w	w6,w0
  1641  00EC18  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  1642                           ;tasks.c: 1318: }
  1643                           
  1644                           ;tasks.c: 1319: vPortExitCritical();
  1645                           
  1646                           	line	1319
  1647  00EC1C  0002CA22           	call	(_vPortExitCritical)
              00000000           
  1648                           ;tasks.c: 1321: if( pxTCB == pxCurrentTCB )
  1649                           
  1650                           	line	1321
  1651  00EC20  00208006           	mov.w	#_pxCurrentTCB,w6
  1652  00EC22  00780396           	mov.w	[w6],w7
  1653  00EC24  0097BB5F           	mov.w	[sp+((0+f20036+0)-0)],w6
  1654  00EC26  00E13007           	cp.w	w6, w7
  1655  00EC28  003A0002           	bra	nz,u411
  1656  00EC2A  0004EC32           	goto	u410
              00000000           
  1657  00EC2E                     u411:
  1658  00EC2E  0004EC64           	goto	lab772
              00000000           
  1659  00EC32                     u410:
  1660                           ;tasks.c: 1322: {
  1661                           
  1662                           ;tasks.c: 1323: if( xSchedulerRunning != ( ( Bas
                                 eType_t ) 0 ) )
  1663                           
  1664                           	line	1323
  1665  00EC32  00E20812           	cp0.w	_xSchedulerRunning
  1666  00EC34  00320002           	bra	z,u421
  1667  00EC36  0004EC3E           	goto	u420
              00000000           
  1668  00EC3A                     u421:
  1669  00EC3A  0004EC46           	goto	lab773
              00000000           
  1670  00EC3E                     u420:
  1671                           ;tasks.c: 1324: {
  1672                           
  1673                           ;tasks.c: 1326: ;
  1674                           
  1675                           ;tasks.c: 1327: vPortYield();
  1676                           
  1677                           	line	1327
  1678  00EC3E  0002C410           	call	(_vPortYield)
              00000000           
  1679                           ;tasks.c: 1328: }
  1680                           
  1681                           	line	1328
  1682  00EC42  0004EC60           	goto	lab774
              00000000           
  1683                           	line	1329
  1684  00EC46                     lab773:
  1685                           ;tasks.c: 1329: else
  1686                           
  1687                           ;tasks.c: 1330: {
  1688                           
  1689                           ;tasks.c: 1334: if( ( ( &xSuspendedTaskList )->u
                                 xNumberOfItems ) == uxCurrentNumberOfTasks )
  1690                           
  1691                           	line	1334
  1692  00EC46  00208066           	mov.w	#_uxCurrentNumberOfTasks,w6
  1693  00EC48  00780016           	mov.w	[w6],w0
  1694  00EC4A  00E30836           	cp.w	_xSuspendedTaskList
  1695  00EC4C  003A0002           	bra	nz,u431
  1696  00EC4E  0004EC56           	goto	u430
              00000000           
  1697  00EC52                     u431:
  1698  00EC52  0004EC5C           	goto	lab775
              00000000           
  1699  00EC56                     u430:
  1700                           ;tasks.c: 1335: {
  1701                           
  1702                           ;tasks.c: 1340: pxCurrentTCB = (0);
  1703                           
  1704                           	line	1340
  1705  00EC56  00EF2800           	clr.w	_pxCurrentTCB
  1706                           ;tasks.c: 1341: }
  1707                           
  1708                           	line	1341
  1709  00EC58  0004EC60           	goto	lab776
              00000000           
  1710                           	line	1342
  1711  00EC5C                     lab775:
  1712                           ;tasks.c: 1342: else
  1713                           
  1714                           ;tasks.c: 1343: {
  1715                           
  1716                           ;tasks.c: 1344: vTaskSwitchContext();
  1717                           
  1718                           	global	_vTaskSwitchContext
  1719                           	signat	_vTaskSwitchContext,26
  1720                           	line	1344
  1721  00EC5C  0002F230           	call	(_vTaskSwitchContext)
              00000000           
  1722                           	line	1345
  1723  00EC60                     lab776:
  1724                           	line	1346
  1725  00EC60                     lab774:
  1726                           ;tasks.c: 1345: }
  1727                           
  1728                           ;tasks.c: 1346: }
  1729                           
  1730                           ;tasks.c: 1347: }
  1731                           
  1732                           	line	1347
  1733  00EC60  0004EC80           	goto	lab777
              00000000           
  1734                           	line	1348
  1735  00EC64                     lab772:
  1736                           ;tasks.c: 1348: else
  1737                           
  1738                           ;tasks.c: 1349: {
  1739                           
  1740                           ;tasks.c: 1350: if( xSchedulerRunning != ( ( Bas
                                 eType_t ) 0 ) )
  1741                           
  1742                           	line	1350
  1743  00EC64  00E20812           	cp0.w	_xSchedulerRunning
  1744  00EC66  00320002           	bra	z,u441
  1745  00EC68  0004EC70           	goto	u440
              00000000           
  1746  00EC6C                     u441:
  1747  00EC6C  0004EC80           	goto	lab778
              00000000           
  1748  00EC70                     u440:
  1749                           ;tasks.c: 1351: {
  1750                           
  1751                           ;tasks.c: 1355: vPortEnterCritical();
  1752                           
  1753                           	line	1355
  1754  00EC70  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  1755                           ;tasks.c: 1356: {
  1756                           
  1757                           ;tasks.c: 1357: prvResetNextTaskUnblockTime();
  1758                           
  1759                           	global	_prvResetNextTaskUnblockTime
  1760                           	signat	_prvResetNextTaskUnblockTime,26
  1761                           	line	1357
  1762  00EC74  0002F922           	call	(_prvResetNextTaskUnblockTime)
              00000000           
  1763                           ;tasks.c: 1358: }
  1764                           
  1765                           ;tasks.c: 1359: vPortExitCritical();
  1766                           
  1767                           	line	1359
  1768  00EC78  0002CA22           	call	(_vPortExitCritical)
              00000000           
  1769                           ;tasks.c: 1360: }
  1770                           
  1771                           	line	1360
  1772  00EC7C  0004EC80           	goto	lab779
              00000000           
  1773                           	line	1361
  1774  00EC80                     lab778:
  1775                           ;tasks.c: 1361: else
  1776                           
  1777                           ;tasks.c: 1362: {
  1778                           
  1779                           ;tasks.c: 1363: ;
  1780                           
  1781                           	line	1364
  1782  00EC80                     lab779:
  1783                           	line	1365
  1784  00EC80                     lab777:
  1785                           ;tasks.c: 1364: }
  1786                           
  1787                           ;tasks.c: 1365: }
  1788                           
  1789                           ;tasks.c: 1366: }
  1790                           
  1791                           	line	1366
  1792  00EC80                     lab767:
  1793                           	global	_vTaskSuspend
  1794                           
  1795  00EC80  00B1006F           	sub.w	#6,sp
  1796  00EC82  00060000           	return
  1797                           	line	1285
  1798                           
  1799  00EC84                     f20031:
  1800                           
  1801  00EC84  00B0006F           	add.w	#6,sp
  1802  00EC86  0004EBAE           	goto	f20030
              00000000           
  1803  000000                     f20036	equ	-6		;stack offset for auto's
  1804  000000                     f20033	equ	-10		;stack offset for parameters
  1805                           	line	0
  1806                           	global	 __end_of_vTaskSuspend
  1807  00EC8A                     __end_of_vTaskSuspend:
  1808                           	global	_prvTaskIsTaskSuspended
  1809                           	signat	_prvTaskIsTaskSuspended,4154
  1810                           	line	1374
  1811  00EC8A                     _prvTaskIsTaskSuspended:
  1812  00EC8A  0004ECFE           	goto	f20061
              00000000           
  1813  00EC8E                     f20060:
  1814                           
  1815                           ;tasks.c: 1373: BaseType_t prvTaskIsTaskSuspende
                                 d( const TaskHandle_t xTask )
  1816                           
  1817                           ;tasks.c: 1374: {
  1818                           
  1819                           ;tasks.c: 1375: BaseType_t xReturn = ( ( BaseTyp
                                 e_t ) 0 );
  1820                           
  1821                           	line	1375
  1822  00EC8E  00200007           	mov.w	#0,w7
  1823  00EC90  002FFF86           	mov.w	#((0+f20066+0)-0),w6
  1824  00EC92  00478306           	add.w	sp,w6,w6
  1825  00EC94  00780B07           	mov.w	w7,[w6]
  1826                           ;tasks.c: 1376: const TCB_t * const pxTCB = ( TC
                                 B_t * ) xTask;
  1827                           
  1828                           	line	1376
  1829  00EC96  002FFFA6           	mov.w	#((0+f20066+2)-0),w6
  1830  00EC98  00478306           	add.w	sp,w6,w6
  1831  00EC9A  00780B00           	mov.w	w0,[w6]
  1832                           ;tasks.c: 1382: ;
  1833                           
  1834                           ;tasks.c: 1385: if( ( ( BaseType_t ) ( ( &( pxTC
                                 B->xGenericListItem ) )->pvContainer == ( void *
                                  ) ( &xSuspendedTaskList ) ) ) != ( ( BaseType_t
                                  ) 0 ) )
  1835                           
  1836                           ;_xTask stored from w0
  1837                           	line	1385
  1838  00EC9C  002FFFC6           	mov.w	#((0+f20066+4)-0),w6
  1839  00EC9E  00478306           	add.w	sp,w6,w6
  1840  00ECA0  00780B00           	mov.w	w0,[w6]
  1841  00ECA2  00208366           	mov.w	#_xSuspendedTaskList,w6
  1842  00ECA4  00780306           	mov.w	w6,w6
  1843  00ECA6  0097BBDF           	mov.w	[sp+((0+f20066+2)-0)],w7
  1844  00ECA8  00B000A7           	add.w	#10,w7
  1845  00ECAA  00780297           	mov.w	[w7],w5
  1846  00ECAC  00E12806           	cp.w	w5, w6
  1847  00ECAE  003A0002           	bra	nz,u451
  1848  00ECB0  0004ECB8           	goto	u450
              00000000           
  1849  00ECB4                     u451:
  1850  00ECB4  0004ECF2           	goto	lab781
              00000000           
  1851  00ECB8                     u450:
  1852                           ;tasks.c: 1386: {
  1853                           
  1854                           ;tasks.c: 1388: if( ( ( BaseType_t ) ( ( &( pxTC
                                 B->xEventListItem ) )->pvContainer == ( void * )
                                  ( &xPendingReadyList ) ) ) == ( ( BaseType_t ) 
                                 0 ) )
  1855                           
  1856                           	global	_xPendingReadyList
  1857                           	line	1388
  1858  00ECB8  002082C6           	mov.w	#_xPendingReadyList,w6
  1859  00ECBA  00780306           	mov.w	w6,w6
  1860  00ECBC  0097BBDF           	mov.w	[sp+((0+f20066+2)-0)],w7
  1861  00ECBE  00B00147           	add.w	#20,w7
  1862  00ECC0  00780297           	mov.w	[w7],w5
  1863  00ECC2  00E12806           	cp.w	w5, w6
  1864  00ECC4  00320002           	bra	z,u461
  1865  00ECC6  0004ECCE           	goto	u460
              00000000           
  1866  00ECCA                     u461:
  1867  00ECCA  0004ECEE           	goto	lab782
              00000000           
  1868  00ECCE                     u460:
  1869                           ;tasks.c: 1389: {
  1870                           
  1871                           ;tasks.c: 1392: if( ( ( BaseType_t ) ( ( &( pxTC
                                 B->xEventListItem ) )->pvContainer == ( void * )
                                  ( (0) ) ) ) != ( ( BaseType_t ) 0 ) )
  1872                           
  1873                           	line	1392
  1874  00ECCE  0097BB5F           	mov.w	[sp+((0+f20066+2)-0)],w6
  1875  00ECD0  00B00146           	add.w	#20,w6
  1876  00ECD2  00E00016           	cp0.w	[w6]
  1877  00ECD4  003A0002           	bra	nz,u471
  1878  00ECD6  0004ECDE           	goto	u470
              00000000           
  1879  00ECDA                     u471:
  1880  00ECDA  0004ECEA           	goto	lab783
              00000000           
  1881  00ECDE                     u470:
  1882                           ;tasks.c: 1393: {
  1883                           
  1884                           ;tasks.c: 1394: xReturn = ( ( BaseType_t ) 1 );
  1885                           
  1886                           	line	1394
  1887  00ECDE  00200017           	mov.w	#01h,w7
  1888  00ECE0  002FFF86           	mov.w	#((0+f20066+0)-0),w6
  1889  00ECE2  00478306           	add.w	sp,w6,w6
  1890  00ECE4  00780B07           	mov.w	w7,[w6]
  1891                           ;tasks.c: 1395: }
  1892                           
  1893                           	line	1395
  1894  00ECE6  0004ECEA           	goto	lab784
              00000000           
  1895                           	line	1396
  1896  00ECEA                     lab783:
  1897                           ;tasks.c: 1396: else
  1898                           
  1899                           ;tasks.c: 1397: {
  1900                           
  1901                           ;tasks.c: 1398: ;
  1902                           
  1903                           	line	1399
  1904  00ECEA                     lab784:
  1905                           ;tasks.c: 1399: }
  1906                           
  1907                           ;tasks.c: 1400: }
  1908                           
  1909                           	line	1400
  1910  00ECEA  0004ECEE           	goto	lab785
              00000000           
  1911                           	line	1401
  1912  00ECEE                     lab782:
  1913                           ;tasks.c: 1401: else
  1914                           
  1915                           ;tasks.c: 1402: {
  1916                           
  1917                           ;tasks.c: 1403: ;
  1918                           
  1919                           	line	1404
  1920  00ECEE                     lab785:
  1921                           ;tasks.c: 1404: }
  1922                           
  1923                           ;tasks.c: 1405: }
  1924                           
  1925                           	line	1405
  1926  00ECEE  0004ECF2           	goto	lab786
              00000000           
  1927                           	line	1406
  1928  00ECF2                     lab781:
  1929                           ;tasks.c: 1406: else
  1930                           
  1931                           ;tasks.c: 1407: {
  1932                           
  1933                           ;tasks.c: 1408: ;
  1934                           
  1935                           	line	1409
  1936  00ECF2                     lab786:
  1937                           ;tasks.c: 1409: }
  1938                           
  1939                           ;tasks.c: 1411: return xReturn;
  1940                           
  1941                           	line	1411
  1942  00ECF2  0097B84F           	mov.w	[sp+((0+f20066+0)-0)], w0
  1943  00ECF4  00780000           	mov.w	w0,w0
  1944  00ECF6  0004ECFA           	goto	lab780
              00000000           
  1945                           ;tasks.c: 1412: }
  1946                           
  1947                           	line	1412
  1948  00ECFA                     lab780:
  1949                           	global	_prvTaskIsTaskSuspended
  1950                           
  1951  00ECFA  00B1008F           	sub.w	#8,sp
  1952  00ECFC  00060000           	return
  1953                           	line	1374
  1954                           
  1955  00ECFE                     f20061:
  1956                           
  1957  00ECFE  00B0008F           	add.w	#8,sp
  1958  00ED00  0004EC8E           	goto	f20060
              00000000           
  1959  000000                     f20066	equ	-8		;stack offset for auto's
  1960  000000                     f20063	equ	-12		;stack offset for parameters
  1961                           	line	0
  1962                           	global	 __end_of_prvTaskIsTaskSuspended
  1963  00ED04                     __end_of_prvTaskIsTaskSuspended:
  1964                           	global	_vTaskResume
  1965                           	signat	_vTaskResume,4154
  1966                           	line	1420
  1967  00ED04                     _vTaskResume:
  1968  00ED04  0004EDBE           	goto	f20071
              00000000           
  1969  00ED08                     f20070:
  1970                           
  1971                           ;tasks.c: 1419: void vTaskResume( TaskHandle_t x
                                 TaskToResume )
  1972                           
  1973                           ;tasks.c: 1420: {
  1974                           
  1975                           ;tasks.c: 1421: TCB_t * const pxTCB = ( TCB_t * 
                                 ) xTaskToResume;
  1976                           
  1977                           	line	1421
  1978  00ED08  002FFFA6           	mov.w	#((0+f20076+0)-0),w6
  1979  00ED0A  00478306           	add.w	sp,w6,w6
  1980  00ED0C  00780B00           	mov.w	w0,[w6]
  1981                           ;tasks.c: 1424: ;
  1982                           
  1983                           ;tasks.c: 1428: if( ( pxTCB != (0) ) && ( pxTCB 
                                 != pxCurrentTCB ) )
  1984                           
  1985                           ;_xTaskToResume stored from w0
  1986                           	line	1428
  1987  00ED0E  002FFFC6           	mov.w	#((0+f20076+2)-0),w6
  1988  00ED10  00478306           	add.w	sp,w6,w6
  1989  00ED12  00780B00           	mov.w	w0,[w6]
  1990  00ED14  002FFFA6           	mov.w	#((0+f20076+0)-0),w6
  1991  00ED16  00478306           	add.w	sp,w6,w6
  1992  00ED18  00E00016           	cp0.w	[w6]
  1993  00ED1A  0032000B           	bra	z,u481
  1994  00ED1C  0004ED20           	goto	u480
              00000000           
  1995  00ED20                     u480:
  1996  00ED20  00208006           	mov.w	#_pxCurrentTCB,w6
  1997  00ED22  00780396           	mov.w	[w6],w7
  1998  00ED24  0097BB5F           	mov.w	[sp+((0+f20076+0)-0)],w6
  1999  00ED26  00E13007           	cp.w	w6, w7
  2000  00ED28  00320004           	bra	z,u491
  2001  00ED2A  0004ED2E           	goto	u490
              00000000           
  2002  00ED2E                     u490:
  2003  00ED2E  0004ED3A           	goto	u500
              00000000           
  2004  00ED32                     u481:
  2005  00ED32                     u491:
  2006  00ED32  0004ED36           	goto	u501
              00000000           
  2007  00ED36                     u501:
  2008  00ED36  0004EDBA           	goto	lab788
              00000000           
  2009  00ED3A                     u500:
  2010                           ;tasks.c: 1429: {
  2011                           
  2012                           ;tasks.c: 1430: vPortEnterCritical();
  2013                           
  2014                           	line	1430
  2015  00ED3A  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  2016                           ;tasks.c: 1431: {
  2017                           
  2018                           ;tasks.c: 1432: if( prvTaskIsTaskSuspended( pxTC
                                 B ) == ( ( BaseType_t ) 1 ) )
  2019                           
  2020                           	line	1432
  2021  00ED3E  0097B85F           	mov.w	[sp+((0+f20076+0)-0)],w0
  2022  00ED40  0002EC8A           	call	(_prvTaskIsTaskSuspended)	;0 bytes adjustm
              00000000           ent
  2023  00ED44  00E10061           	cp.w	w0, #1
  2024  00ED46  003A0002           	bra	nz,u511
  2025  00ED48  0004ED50           	goto	u510
              00000000           
  2026  00ED4C                     u511:
  2027  00ED4C  0004EDB2           	goto	lab789
              00000000           
  2028  00ED50                     u510:
  2029                           ;tasks.c: 1433: {
  2030                           
  2031                           ;tasks.c: 1434: ;
  2032                           
  2033                           ;tasks.c: 1438: ( void ) uxListRemove( &( pxTCB-
                                 >xGenericListItem ) );
  2034                           
  2035                           	line	1438
  2036  00ED50  0097B85F           	mov.w	[sp+((0+f20076+0)-0)],w0
  2037  00ED52  00B00020           	add.w	#2,w0
  2038  00ED54  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  2039                           ;tasks.c: 1439: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  2040                           
  2041                           	line	1439
  2042  00ED58  00804076           	mov	_uxTopReadyPriority,w6
  2043  00ED5A  0097BBDF           	mov.w	[sp+((0+f20076+0)-0)],w7
  2044  00ED5C  00B00167           	add.w	#22,w7
  2045  00ED5E  00780297           	mov.w	[w7],w5
  2046  00ED60  00E12806           	cp.w	w5, w6
  2047  00ED62  00360002           	bra	leu,u521
  2048  00ED64  0004ED6C           	goto	u520
              00000000           
  2049  00ED68                     u521:
  2050  00ED68  0004ED74           	goto	lab790
              00000000           
  2051  00ED6C                     u520:
  2052  00ED6C  0097BBDF           	mov.w	[sp+((0+f20076+0)-0)],w7
  2053  00ED6E  00B00167           	add.w	#22,w7
  2054  00ED70  00780317           	mov.w	[w7],w6
  2055  00ED72  00884076           	mov	w6,_uxTopReadyPriority
  2056  00ED74                     lab790:
  2057  00ED74  0097B95F           	mov.w	[sp+((0+f20076+0)-0)],w2
  2058  00ED76  00B00022           	add.w	#2,w2
  2059  00ED78  00208406           	mov	#_pxReadyTasksLists,w6
  2060  00ED7A  002000A4           	mov.w	#0Ah,w4
  2061  00ED7C  0097BBDF           	mov.w	[sp+((0+f20076+0)-0)],w7
  2062  00ED7E  00B00167           	add.w	#22,w7
  2063  00ED80  00780297           	mov.w	[w7],w5
  2064  00ED82  00780005           	mov.w	w5,w0
  2065  00ED84  00B80004           	mul.uu	w0,w4,w0
  2066  00ED86  00400006           	add.w	w0,w6,w0
  2067  00ED88  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  2068                           ;tasks.c: 1442: if( pxTCB->uxPriority >= pxCurre
                                 ntTCB->uxPriority )
  2069                           
  2070                           	line	1442
  2071  00ED8C  00208006           	mov.w	#_pxCurrentTCB,w6
  2072  00ED8E  00780316           	mov.w	[w6],w6
  2073  00ED90  00B00166           	add.w	#22,w6
  2074  00ED92  00780396           	mov.w	[w6],w7
  2075  00ED94  0097BADF           	mov.w	[sp+((0+f20076+0)-0)],w5
  2076  00ED96  00B00165           	add.w	#22,w5
  2077  00ED98  00780315           	mov.w	[w5],w6
  2078  00ED9A  00E13007           	cp.w	w6, w7
  2079  00ED9C  00390002           	bra	ltu,u531
  2080  00ED9E  0004EDA6           	goto	u530
              00000000           
  2081  00EDA2                     u531:
  2082  00EDA2  0004EDAE           	goto	lab791
              00000000           
  2083  00EDA6                     u530:
  2084                           ;tasks.c: 1443: {
  2085                           
  2086                           ;tasks.c: 1447: vPortYield();
  2087                           
  2088                           	line	1447
  2089  00EDA6  0002C410           	call	(_vPortYield)
              00000000           
  2090                           ;tasks.c: 1448: }
  2091                           
  2092                           	line	1448
  2093  00EDAA  0004EDAE           	goto	lab792
              00000000           
  2094                           	line	1449
  2095  00EDAE                     lab791:
  2096                           ;tasks.c: 1449: else
  2097                           
  2098                           ;tasks.c: 1450: {
  2099                           
  2100                           ;tasks.c: 1451: ;
  2101                           
  2102                           	line	1452
  2103  00EDAE                     lab792:
  2104                           ;tasks.c: 1452: }
  2105                           
  2106                           ;tasks.c: 1453: }
  2107                           
  2108                           	line	1453
  2109  00EDAE  0004EDB2           	goto	lab793
              00000000           
  2110                           	line	1454
  2111  00EDB2                     lab789:
  2112                           ;tasks.c: 1454: else
  2113                           
  2114                           ;tasks.c: 1455: {
  2115                           
  2116                           ;tasks.c: 1456: ;
  2117                           
  2118                           	line	1457
  2119  00EDB2                     lab793:
  2120                           ;tasks.c: 1457: }
  2121                           
  2122                           ;tasks.c: 1458: }
  2123                           
  2124                           ;tasks.c: 1459: vPortExitCritical();
  2125                           
  2126                           	line	1459
  2127  00EDB2  0002CA22           	call	(_vPortExitCritical)
              00000000           
  2128                           ;tasks.c: 1460: }
  2129                           
  2130                           	line	1460
  2131  00EDB6  0004EDBA           	goto	lab794
              00000000           
  2132                           	line	1461
  2133  00EDBA                     lab788:
  2134                           ;tasks.c: 1461: else
  2135                           
  2136                           ;tasks.c: 1462: {
  2137                           
  2138                           ;tasks.c: 1463: ;
  2139                           
  2140                           	line	1464
  2141  00EDBA                     lab794:
  2142                           ;tasks.c: 1464: }
  2143                           
  2144                           ;tasks.c: 1465: }
  2145                           
  2146                           	line	1465
  2147  00EDBA                     lab787:
  2148                           	global	_vTaskResume
  2149                           
  2150  00EDBA  00B1006F           	sub.w	#6,sp
  2151  00EDBC  00060000           	return
  2152                           	line	1420
  2153                           
  2154  00EDBE                     f20071:
  2155                           
  2156  00EDBE  00B0006F           	add.w	#6,sp
  2157  00EDC0  0004ED08           	goto	f20070
              00000000           
  2158  000000                     f20076	equ	-6		;stack offset for auto's
  2159  000000                     f20073	equ	-10		;stack offset for parameters
  2160                           	line	0
  2161                           	global	 __end_of_vTaskResume
  2162  00EDC4                     __end_of_vTaskResume:
  2163                           	global	_xTaskResumeFromISR
  2164                           	signat	_xTaskResumeFromISR,4154
  2165                           	line	1474
  2166  00EDC4                     _xTaskResumeFromISR:
  2167  00EDC4  0004EE84           	goto	f20081
              00000000           
  2168  00EDC8                     f20080:
  2169                           
  2170                           ;tasks.c: 1473: BaseType_t xTaskResumeFromISR( T
                                 askHandle_t xTaskToResume )
  2171                           
  2172                           ;tasks.c: 1474: {
  2173                           
  2174                           ;tasks.c: 1475: BaseType_t xYieldRequired = ( ( 
                                 BaseType_t ) 0 );
  2175                           
  2176                           	line	1475
  2177  00EDC8  00200007           	mov.w	#0,w7
  2178  00EDCA  002FFF66           	mov.w	#((0+f20086+0)-0),w6
  2179  00EDCC  00478306           	add.w	sp,w6,w6
  2180  00EDCE  00780B07           	mov.w	w7,[w6]
  2181                           ;tasks.c: 1476: TCB_t * const pxTCB = ( TCB_t * 
                                 ) xTaskToResume;
  2182                           
  2183                           	line	1476
  2184  00EDD0  002FFF86           	mov.w	#((0+f20086+2)-0),w6
  2185  00EDD2  00478306           	add.w	sp,w6,w6
  2186  00EDD4  00780B00           	mov.w	w0,[w6]
  2187                           ;tasks.c: 1477: UBaseType_t uxSavedInterruptStat
                                 us;
  2188                           
  2189                           ;tasks.c: 1479: ;
  2190                           
  2191                           ;tasks.c: 1497: ;
  2192                           
  2193                           ;tasks.c: 1499: uxSavedInterruptStatus = 0;
  2194                           
  2195                           	line	1499
  2196  00EDD6  00200007           	mov.w	#0,w7
  2197  00EDD8  002FFFA6           	mov.w	#((0+f20086+4)-0),w6
  2198  00EDDA  00478306           	add.w	sp,w6,w6
  2199  00EDDC  00780B07           	mov.w	w7,[w6]
  2200                           ;tasks.c: 1500: {
  2201                           
  2202                           ;tasks.c: 1501: if( prvTaskIsTaskSuspended( pxTC
                                 B ) == ( ( BaseType_t ) 1 ) )
  2203                           
  2204                           ;_xTaskToResume stored from w0
  2205                           	line	1501
  2206  00EDDE  002FFFC6           	mov.w	#((0+f20086+6)-0),w6
  2207  00EDE0  00478306           	add.w	sp,w6,w6
  2208  00EDE2  00780B00           	mov.w	w0,[w6]
  2209  00EDE4  0097B84F           	mov.w	[sp+((0+f20086+2)-0)],w0
  2210  00EDE6  0002EC8A           	call	(_prvTaskIsTaskSuspended)	;0 bytes adjustm
              00000000           ent
  2211  00EDEA  00E10061           	cp.w	w0, #1
  2212  00EDEC  003A0002           	bra	nz,u541
  2213  00EDEE  0004EDF6           	goto	u540
              00000000           
  2214  00EDF2                     u541:
  2215  00EDF2  0004EE78           	goto	lab796
              00000000           
  2216  00EDF6                     u540:
  2217                           ;tasks.c: 1502: {
  2218                           
  2219                           ;tasks.c: 1503: ;
  2220                           
  2221                           ;tasks.c: 1506: if( uxSchedulerSuspended == ( UB
                                 aseType_t ) ( ( BaseType_t ) 0 ) )
  2222                           
  2223                           	global	_uxSchedulerSuspended
  2224                           	line	1506
  2225  00EDF6  00E2080A           	cp0.w	_uxSchedulerSuspended
  2226  00EDF8  003A0002           	bra	nz,u551
  2227  00EDFA  0004EE02           	goto	u550
              00000000           
  2228  00EDFE                     u551:
  2229  00EDFE  0004EE68           	goto	lab797
              00000000           
  2230  00EE02                     u550:
  2231                           ;tasks.c: 1507: {
  2232                           
  2233                           ;tasks.c: 1510: if( pxTCB->uxPriority >= pxCurre
                                 ntTCB->uxPriority )
  2234                           
  2235                           	line	1510
  2236  00EE02  00208006           	mov.w	#_pxCurrentTCB,w6
  2237  00EE04  00780316           	mov.w	[w6],w6
  2238  00EE06  00B00166           	add.w	#22,w6
  2239  00EE08  00780396           	mov.w	[w6],w7
  2240  00EE0A  0097BACF           	mov.w	[sp+((0+f20086+2)-0)],w5
  2241  00EE0C  00B00165           	add.w	#22,w5
  2242  00EE0E  00780315           	mov.w	[w5],w6
  2243  00EE10  00E13007           	cp.w	w6, w7
  2244  00EE12  00390002           	bra	ltu,u561
  2245  00EE14  0004EE1C           	goto	u560
              00000000           
  2246  00EE18                     u561:
  2247  00EE18  0004EE28           	goto	lab798
              00000000           
  2248  00EE1C                     u560:
  2249                           ;tasks.c: 1511: {
  2250                           
  2251                           ;tasks.c: 1512: xYieldRequired = ( ( BaseType_t 
                                 ) 1 );
  2252                           
  2253                           	line	1512
  2254  00EE1C  00200017           	mov.w	#01h,w7
  2255  00EE1E  002FFF66           	mov.w	#((0+f20086+0)-0),w6
  2256  00EE20  00478306           	add.w	sp,w6,w6
  2257  00EE22  00780B07           	mov.w	w7,[w6]
  2258                           ;tasks.c: 1513: }
  2259                           
  2260                           	line	1513
  2261  00EE24  0004EE28           	goto	lab799
              00000000           
  2262                           	line	1514
  2263  00EE28                     lab798:
  2264                           ;tasks.c: 1514: else
  2265                           
  2266                           ;tasks.c: 1515: {
  2267                           
  2268                           ;tasks.c: 1516: ;
  2269                           
  2270                           	line	1517
  2271  00EE28                     lab799:
  2272                           ;tasks.c: 1517: }
  2273                           
  2274                           ;tasks.c: 1519: ( void ) uxListRemove( &( pxTCB-
                                 >xGenericListItem ) );
  2275                           
  2276                           	line	1519
  2277  00EE28  0097B84F           	mov.w	[sp+((0+f20086+2)-0)],w0
  2278  00EE2A  00B00020           	add.w	#2,w0
  2279  00EE2C  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  2280                           ;tasks.c: 1520: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  2281                           
  2282                           	line	1520
  2283  00EE30  00804076           	mov	_uxTopReadyPriority,w6
  2284  00EE32  0097BBCF           	mov.w	[sp+((0+f20086+2)-0)],w7
  2285  00EE34  00B00167           	add.w	#22,w7
  2286  00EE36  00780297           	mov.w	[w7],w5
  2287  00EE38  00E12806           	cp.w	w5, w6
  2288  00EE3A  00360002           	bra	leu,u571
  2289  00EE3C  0004EE44           	goto	u570
              00000000           
  2290  00EE40                     u571:
  2291  00EE40  0004EE4C           	goto	lab800
              00000000           
  2292  00EE44                     u570:
  2293  00EE44  0097BBCF           	mov.w	[sp+((0+f20086+2)-0)],w7
  2294  00EE46  00B00167           	add.w	#22,w7
  2295  00EE48  00780317           	mov.w	[w7],w6
  2296  00EE4A  00884076           	mov	w6,_uxTopReadyPriority
  2297  00EE4C                     lab800:
  2298  00EE4C  0097B94F           	mov.w	[sp+((0+f20086+2)-0)],w2
  2299  00EE4E  00B00022           	add.w	#2,w2
  2300  00EE50  00208406           	mov	#_pxReadyTasksLists,w6
  2301  00EE52  002000A4           	mov.w	#0Ah,w4
  2302  00EE54  0097BBCF           	mov.w	[sp+((0+f20086+2)-0)],w7
  2303  00EE56  00B00167           	add.w	#22,w7
  2304  00EE58  00780297           	mov.w	[w7],w5
  2305  00EE5A  00780005           	mov.w	w5,w0
  2306  00EE5C  00B80004           	mul.uu	w0,w4,w0
  2307  00EE5E  00400006           	add.w	w0,w6,w0
  2308  00EE60  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  2309                           ;tasks.c: 1521: }
  2310                           
  2311                           	line	1521
  2312  00EE64  0004EE74           	goto	lab801
              00000000           
  2313                           	line	1522
  2314  00EE68                     lab797:
  2315                           ;tasks.c: 1522: else
  2316                           
  2317                           ;tasks.c: 1523: {
  2318                           
  2319                           ;tasks.c: 1527: vListInsertEnd( &( xPendingReady
                                 List ), &( pxTCB->xEventListItem ) );
  2320                           
  2321                           	line	1527
  2322  00EE68  0097B94F           	mov.w	[sp+((0+f20086+2)-0)],w2
  2323  00EE6A  00B000C2           	add.w	#12,w2
  2324  00EE6C  002082C6           	mov.w	#_xPendingReadyList,w6
  2325  00EE6E  00780006           	mov.w	w6,w0
  2326  00EE70  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  2327                           	line	1528
  2328  00EE74                     lab801:
  2329                           ;tasks.c: 1528: }
  2330                           
  2331                           ;tasks.c: 1529: }
  2332                           
  2333                           	line	1529
  2334  00EE74  0004EE78           	goto	lab802
              00000000           
  2335                           	line	1530
  2336  00EE78                     lab796:
  2337                           ;tasks.c: 1530: else
  2338                           
  2339                           ;tasks.c: 1531: {
  2340                           
  2341                           ;tasks.c: 1532: ;
  2342                           
  2343                           	line	1533
  2344  00EE78                     lab802:
  2345                           ;tasks.c: 1533: }
  2346                           
  2347                           ;tasks.c: 1534: }
  2348                           
  2349                           ;tasks.c: 1535: ( void ) uxSavedInterruptStatus;
  2350                           
  2351                           ;tasks.c: 1537: return xYieldRequired;
  2352                           
  2353                           	line	1537
  2354  00EE78  0097B83F           	mov.w	[sp+((0+f20086+0)-0)], w0
  2355  00EE7A  00780000           	mov.w	w0,w0
  2356  00EE7C  0004EE80           	goto	lab795
              00000000           
  2357                           ;tasks.c: 1538: }
  2358                           
  2359                           	line	1538
  2360  00EE80                     lab795:
  2361                           	global	_xTaskResumeFromISR
  2362                           
  2363  00EE80  00B100AF           	sub.w	#10,sp
  2364  00EE82  00060000           	return
  2365                           	line	1474
  2366                           
  2367  00EE84                     f20081:
  2368                           
  2369  00EE84  00B000AF           	add.w	#10,sp
  2370  00EE86  0004EDC8           	goto	f20080
              00000000           
  2371  000000                     f20086	equ	-10		;stack offset for auto's
  2372  000000                     f20083	equ	-14		;stack offset for parameters
  2373                           	line	0
  2374                           	global	 __end_of_xTaskResumeFromISR
  2375  00EE8A                     __end_of_xTaskResumeFromISR:
  2376                           	global	_vTaskStartScheduler
  2377                           	signat	_vTaskStartScheduler,26
  2378                           	line	1544
  2379  00EE8A                     _vTaskStartScheduler:
  2380  00EE8A  0004EEE8           	goto	f20091
              00000000           
  2381  00EE8E                     f20090:
  2382                           
  2383                           ;tasks.c: 1543: void vTaskStartScheduler( void )
  2384                           
  2385                           ;tasks.c: 1544: {
  2386                           
  2387                           ;tasks.c: 1545: BaseType_t xReturn;
  2388                           
  2389                           ;tasks.c: 1555: {
  2390                           
  2391                           ;tasks.c: 1557: xReturn = xTaskGenericCreate( ( 
                                 prvIdleTask ), ( "IDLE" ), ( ( 105 ) ), ( ( void
                                  * ) (0) ), ( ( ( ( UBaseType_t ) 0U ) | ( ( UBa
                                 seType_t ) 0x00 ) ) ), ( (0) ), ( (0) ), ( (0) )
                                  );
  2392                           
  2393                           	global	_prvIdleTask
  2394                           	signat	_prvIdleTask,4154
  2395                           	line	1557
  2396  00EE8E  00200006           	mov.w	#0,w6
  2397  00EE90  00781F86           	push	w6
  2398  00EE92  00200006           	mov.w	#0,w6
  2399  00EE94  00781F86           	push	w6
  2400  00EE96  00200006           	mov.w	#0,w6
  2401  00EE98  00781F86           	push	w6
  2402  00EE9A  00200006           	mov.w	#0,w6
  2403  00EE9C  00781F86           	push	w6
  2404  00EE9E  00200006           	mov.w	#0,w6
  2405  00EEA0  00200694           	mov.w	#069h,w4
  2406  00EEA2  00281042           	mov.w	#u19,w2
  2407  00EEA4  002F62C7           	mov.w	#_prvIdleTask,w7
  2408  00EEA6  00780007           	mov.w	w7,w0
  2409  00EEA8  0002E670           	call	(_xTaskGenericCreate)	;8 bytes adjustment
              00000000           
  2410  00EEAC  002FFFC6           	mov.w	#((0+f20096+0)-0),w6
  2411  00EEAE  00478306           	add.w	sp,w6,w6
  2412  00EEB0  00780B00           	mov.w	w0,[w6]
  2413                           ;tasks.c: 1558: }
  2414                           
  2415                           ;tasks.c: 1574: if( xReturn == ( ( ( BaseType_t 
                                 ) 1 ) ) )
  2416                           
  2417                           	line	1574
  2418  00EEB2  0097BB6F           	mov.w	[sp+((0+f20096+0)-0)],w6
  2419  00EEB4  00E13061           	cp.w	w6, #1
  2420  00EEB6  003A0002           	bra	nz,u581
  2421  00EEB8  0004EEC0           	goto	u580
              00000000           
  2422  00EEBC                     u581:
  2423  00EEBC  0004EEE4           	goto	lab804
              00000000           
  2424  00EEC0                     u580:
  2425                           ;tasks.c: 1575: {
  2426                           
  2427                           ;tasks.c: 1581: SR |= ( ( uint16_t ) 0x01 << ( u
                                 int16_t ) 5 );asm("NOP");
  2428                           
  2429                           	line	1581
  2430  00EEC0  00200200           	mov.w	#020h,w0
  2431  00EEC2  00B72042           	ior.w	042h	;ior 042h with w0
  2432                           # 1581 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\tasks.c"
  2433  00EEC4  00000000           NOP ;#
  2434                           
  2435                           ;tasks.c: 1591: xSchedulerRunning = ( ( BaseType
                                 _t ) 1 );
  2436                           
  2437                           #
  2438                           	psect	text
  2439                           	line	1591
  2440  00EEC6  00200016           	mov.w	#01h,w6
  2441  00EEC8  00884096           	mov	w6,_xSchedulerRunning
  2442                           ;tasks.c: 1592: xTickCount = ( TickType_t ) 0U;
  2443                           
  2444                           	line	1592
  2445  00EECA  00EF2814           	clr.w	_xTickCount
  2446                           ;tasks.c: 1597: ;
  2447                           
  2448                           ;tasks.c: 1601: if( xPortStartScheduler() != ( (
                                  BaseType_t ) 0 ) )
  2449                           
  2450                           	global	_xPortStartScheduler
  2451                           	signat	_xPortStartScheduler,26
  2452                           	line	1601
  2453  00EECC  0002C97A           	call	(_xPortStartScheduler)
              00000000           
  2454  00EED0  00E00000           	cp0.w	w0
  2455  00EED2  00320002           	bra	z,u591
  2456  00EED4  0004EEDC           	goto	u590
              00000000           
  2457  00EED8                     u591:
  2458  00EED8  0004EEE0           	goto	lab805
              00000000           
  2459  00EEDC                     u590:
  2460                           ;tasks.c: 1602: {
  2461                           
  2462                           ;tasks.c: 1605: }
  2463                           
  2464                           	line	1605
  2465  00EEDC  0004EEE0           	goto	lab806
              00000000           
  2466                           	line	1606
  2467  00EEE0                     lab805:
  2468                           ;tasks.c: 1606: else
  2469                           
  2470                           ;tasks.c: 1607: {
  2471                           
  2472                           	line	1609
  2473  00EEE0                     lab806:
  2474                           ;tasks.c: 1609: }
  2475                           
  2476                           ;tasks.c: 1610: }
  2477                           
  2478                           	line	1610
  2479  00EEE0  0004EEE4           	goto	lab807
              00000000           
  2480                           	line	1611
  2481  00EEE4                     lab804:
  2482                           ;tasks.c: 1611: else
  2483                           
  2484                           ;tasks.c: 1612: {
  2485                           
  2486                           ;tasks.c: 1616: ;
  2487                           
  2488                           	line	1617
  2489  00EEE4                     lab807:
  2490                           ;tasks.c: 1617: }
  2491                           
  2492                           ;tasks.c: 1618: }
  2493                           
  2494                           	line	1618
  2495  00EEE4                     lab803:
  2496                           	global	_vTaskStartScheduler
  2497                           
  2498  00EEE4  00B1004F           	sub.w	#4,sp
  2499  00EEE6  00060000           	return
  2500                           	line	1544
  2501                           
  2502  00EEE8                     f20091:
  2503                           
  2504  00EEE8  00B0004F           	add.w	#4,sp
  2505  00EEEA  0004EE8E           	goto	f20090
              00000000           
  2506  000000                     f20096	equ	-4		;stack offset for auto's
  2507  000000                     f20093	equ	-8		;stack offset for parameters
  2508                           	line	0
  2509                           	global	 __end_of_vTaskStartScheduler
  2510  00EEEE                     __end_of_vTaskStartScheduler:
  2511                           	global	_vTaskEndScheduler
  2512                           	signat	_vTaskEndScheduler,26
  2513                           	line	1622
  2514  00EEEE                     _vTaskEndScheduler:
  2515  00EEEE  0004EF00           	goto	f20121
              00000000           
  2516  00EEF2                     f20120:
  2517                           
  2518                           ;tasks.c: 1621: void vTaskEndScheduler( void )
  2519                           
  2520                           ;tasks.c: 1622: {
  2521                           
  2522                           ;tasks.c: 1626: SR |= ( ( uint16_t ) 0x01 << ( u
                                 int16_t ) 5 );asm("NOP");
  2523                           
  2524                           	line	1626
  2525  00EEF2  00200200           	mov.w	#020h,w0
  2526  00EEF4  00B72042           	ior.w	042h	;ior 042h with w0
  2527                           # 1626 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\tasks.c"
  2528  00EEF6  00000000           NOP ;#
  2529                           
  2530                           ;tasks.c: 1627: xSchedulerRunning = ( ( BaseType
                                 _t ) 0 );
  2531                           
  2532                           #
  2533                           	psect	text
  2534                           	line	1627
  2535  00EEF8  00EF2812           	clr.w	_xSchedulerRunning
  2536                           ;tasks.c: 1628: vPortEndScheduler();
  2537                           
  2538                           	global	_vPortEndScheduler
  2539                           	signat	_vPortEndScheduler,26
  2540                           	line	1628
  2541  00EEFA  0002C9C8           	call	(_vPortEndScheduler)
              00000000           
  2542                           ;tasks.c: 1629: }
  2543                           
  2544                           	line	1629
  2545  00EEFE                     lab808:
  2546                           	global	_vTaskEndScheduler
  2547  00EEFE  00060000           	return
  2548                           	line	1622
  2549                           
  2550  00EF00                     f20121:
  2551  00EF00  0004EEF2           	goto	f20120
              00000000           
  2552  000000                     f20126	equ	0		;stack offset for auto's
  2553  000000                     f20123	equ	-4		;stack offset for parameters
  2554                           	line	0
  2555                           	global	 __end_of_vTaskEndScheduler
  2556  00EF04                     __end_of_vTaskEndScheduler:
  2557                           	line	1633
  2558  00EF04                     _vTaskSuspendAll:
  2559  00EF04  0004EF0C           	goto	f20141
              00000000           
  2560  00EF08                     f20140:
  2561                           
  2562                           ;tasks.c: 1632: void vTaskSuspendAll( void )
  2563                           
  2564                           ;tasks.c: 1633: {
  2565                           
  2566                           ;tasks.c: 1638: ++uxSchedulerSuspended;
  2567                           
  2568                           	line	1638
  2569  00EF08  00EC280A           	inc.w	_uxSchedulerSuspended
  2570                           ;tasks.c: 1639: }
  2571                           
  2572                           	line	1639
  2573  00EF0A                     lab809:
  2574                           	global	_vTaskSuspendAll
  2575  00EF0A  00060000           	return
  2576                           	line	1633
  2577                           
  2578  00EF0C                     f20141:
  2579  00EF0C  0004EF08           	goto	f20140
              00000000           
  2580  000000                     f20146	equ	0		;stack offset for auto's
  2581  000000                     f20143	equ	-4		;stack offset for parameters
  2582                           	line	0
  2583                           	global	 __end_of_vTaskSuspendAll
  2584  00EF10                     __end_of_vTaskSuspendAll:
  2585                           	line	1671
  2586  00EF10                     _xTaskResumeAll:
  2587  00EF10  0004F02C           	goto	f20151
              00000000           
  2588  00EF14                     f20150:
  2589                           
  2590                           ;tasks.c: 1670: BaseType_t xTaskResumeAll( void 
                                 )
  2591                           
  2592                           ;tasks.c: 1671: {
  2593                           
  2594                           ;tasks.c: 1672: TCB_t *pxTCB;
  2595                           
  2596                           ;tasks.c: 1673: BaseType_t xAlreadyYielded = ( (
                                  BaseType_t ) 0 );
  2597                           
  2598                           	line	1673
  2599  00EF14  00200007           	mov.w	#0,w7
  2600  00EF16  002FFFC6           	mov.w	#((0+f20156+2)-0),w6
  2601  00EF18  00478306           	add.w	sp,w6,w6
  2602  00EF1A  00780B07           	mov.w	w7,[w6]
  2603                           ;tasks.c: 1677: ;
  2604                           
  2605                           ;tasks.c: 1684: vPortEnterCritical();
  2606                           
  2607                           	line	1684
  2608  00EF1C  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  2609                           ;tasks.c: 1685: {
  2610                           
  2611                           ;tasks.c: 1686: --uxSchedulerSuspended;
  2612                           
  2613                           	line	1686
  2614  00EF20  00ED280A           	dec.w	_uxSchedulerSuspended
  2615                           ;tasks.c: 1688: if( uxSchedulerSuspended == ( UB
                                 aseType_t ) ( ( BaseType_t ) 0 ) )
  2616                           
  2617                           	line	1688
  2618  00EF22  00E2080A           	cp0.w	_uxSchedulerSuspended
  2619  00EF24  003A0002           	bra	nz,u601
  2620  00EF26  0004EF2E           	goto	u600
              00000000           
  2621  00EF2A                     u601:
  2622  00EF2A  0004F01C           	goto	lab811
              00000000           
  2623  00EF2E                     u600:
  2624                           ;tasks.c: 1689: {
  2625                           
  2626                           ;tasks.c: 1690: if( uxCurrentNumberOfTasks > ( U
                                 BaseType_t ) 0U )
  2627                           
  2628                           	line	1690
  2629  00EF2E  00E20806           	cp0.w	_uxCurrentNumberOfTasks
  2630  00EF30  00320002           	bra	z,u611
  2631  00EF32  0004EF3A           	goto	u610
              00000000           
  2632  00EF36                     u611:
  2633  00EF36  0004F018           	goto	lab812
              00000000           
  2634  00EF3A                     u610:
  2635                           ;tasks.c: 1691: {
  2636                           
  2637                           ;tasks.c: 1694: while( ( ( BaseType_t ) ( ( &xPe
                                 ndingReadyList )->uxNumberOfItems == ( UBaseType
                                 _t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
  2638                           
  2639                           	line	1694
  2640  00EF3A  0004EFB4           	goto	lab813
              00000000           
  2641  00EF3E                     lab814:
  2642                           ;tasks.c: 1695: {
  2643                           
  2644                           ;tasks.c: 1696: pxTCB = ( TCB_t * ) ( (&( ( ( &x
                                 PendingReadyList ) )->xListEnd ))->pxNext->pvOwn
                                 er );
  2645                           
  2646                           	line	1696
  2647  00EF3E  002082C6           	mov.w	#_xPendingReadyList,w6
  2648  00EF40  00780306           	mov.w	w6,w6
  2649  00EF42  00B00066           	add.w	#6,w6
  2650  00EF44  00780396           	mov.w	[w6],w7
  2651  00EF46  00B00067           	add.w	#6,w7
  2652  00EF48  002FFFA6           	mov.w	#((0+f20156+0)-0),w6
  2653  00EF4A  00478306           	add.w	sp,w6,w6
  2654  00EF4C  00780B17           	mov.w	[w7],[w6]
  2655                           ;tasks.c: 1697: ( void ) uxListRemove( &( pxTCB-
                                 >xEventListItem ) );
  2656                           
  2657                           	line	1697
  2658  00EF4E  0097B85F           	mov.w	[sp+((0+f20156+0)-0)],w0
  2659  00EF50  00B000C0           	add.w	#12,w0
  2660  00EF52  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  2661                           ;tasks.c: 1698: ( void ) uxListRemove( &( pxTCB-
                                 >xGenericListItem ) );
  2662                           
  2663                           	line	1698
  2664  00EF56  0097B85F           	mov.w	[sp+((0+f20156+0)-0)],w0
  2665  00EF58  00B00020           	add.w	#2,w0
  2666  00EF5A  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  2667                           ;tasks.c: 1699: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  2668                           
  2669                           	line	1699
  2670  00EF5E  00804076           	mov	_uxTopReadyPriority,w6
  2671  00EF60  0097BBDF           	mov.w	[sp+((0+f20156+0)-0)],w7
  2672  00EF62  00B00167           	add.w	#22,w7
  2673  00EF64  00780297           	mov.w	[w7],w5
  2674  00EF66  00E12806           	cp.w	w5, w6
  2675  00EF68  00360002           	bra	leu,u621
  2676  00EF6A  0004EF72           	goto	u620
              00000000           
  2677  00EF6E                     u621:
  2678  00EF6E  0004EF7A           	goto	lab816
              00000000           
  2679  00EF72                     u620:
  2680  00EF72  0097BBDF           	mov.w	[sp+((0+f20156+0)-0)],w7
  2681  00EF74  00B00167           	add.w	#22,w7
  2682  00EF76  00780317           	mov.w	[w7],w6
  2683  00EF78  00884076           	mov	w6,_uxTopReadyPriority
  2684  00EF7A                     lab816:
  2685  00EF7A  0097B95F           	mov.w	[sp+((0+f20156+0)-0)],w2
  2686  00EF7C  00B00022           	add.w	#2,w2
  2687  00EF7E  00208406           	mov	#_pxReadyTasksLists,w6
  2688  00EF80  002000A4           	mov.w	#0Ah,w4
  2689  00EF82  0097BBDF           	mov.w	[sp+((0+f20156+0)-0)],w7
  2690  00EF84  00B00167           	add.w	#22,w7
  2691  00EF86  00780297           	mov.w	[w7],w5
  2692  00EF88  00780005           	mov.w	w5,w0
  2693  00EF8A  00B80004           	mul.uu	w0,w4,w0
  2694  00EF8C  00400006           	add.w	w0,w6,w0
  2695  00EF8E  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  2696                           ;tasks.c: 1703: if( pxTCB->uxPriority >= pxCurre
                                 ntTCB->uxPriority )
  2697                           
  2698                           	line	1703
  2699  00EF92  00208006           	mov.w	#_pxCurrentTCB,w6
  2700  00EF94  00780316           	mov.w	[w6],w6
  2701  00EF96  00B00166           	add.w	#22,w6
  2702  00EF98  00780396           	mov.w	[w6],w7
  2703  00EF9A  0097BADF           	mov.w	[sp+((0+f20156+0)-0)],w5
  2704  00EF9C  00B00165           	add.w	#22,w5
  2705  00EF9E  00780315           	mov.w	[w5],w6
  2706  00EFA0  00E13007           	cp.w	w6, w7
  2707  00EFA2  00390002           	bra	ltu,u631
  2708  00EFA4  0004EFAC           	goto	u630
              00000000           
  2709  00EFA8                     u631:
  2710  00EFA8  0004EFB4           	goto	lab817
              00000000           
  2711  00EFAC                     u630:
  2712                           ;tasks.c: 1704: {
  2713                           
  2714                           ;tasks.c: 1705: xYieldPending = ( ( BaseType_t )
                                  1 );
  2715                           
  2716                           	global	_xYieldPending
  2717                           	line	1705
  2718  00EFAC  00200016           	mov.w	#01h,w6
  2719  00EFAE  008840B6           	mov	w6,_xYieldPending
  2720                           ;tasks.c: 1706: }
  2721                           
  2722                           	line	1706
  2723  00EFB0  0004EFB4           	goto	lab818
              00000000           
  2724                           	line	1707
  2725  00EFB4                     lab817:
  2726                           ;tasks.c: 1707: else
  2727                           
  2728                           ;tasks.c: 1708: {
  2729                           
  2730                           ;tasks.c: 1709: ;
  2731                           
  2732                           	line	1710
  2733  00EFB4                     lab818:
  2734                           	line	1711
  2735  00EFB4                     lab813:
  2736                           	line	1694
  2737  00EFB4  00E2082C           	cp0.w	_xPendingReadyList
  2738  00EFB6  003A0002           	bra	nz,u641
  2739  00EFB8  0004EFC0           	goto	u640
              00000000           
  2740  00EFBC                     u641:
  2741  00EFBC  0004EF3E           	goto	lab814
              00000000           
  2742  00EFC0                     u640:
  2743  00EFC0                     lab815:
  2744                           ;tasks.c: 1710: }
  2745                           
  2746                           ;tasks.c: 1711: }
  2747                           
  2748                           ;tasks.c: 1717: if( uxPendedTicks > ( UBaseType_
                                 t ) 0U )
  2749                           
  2750                           	global	_uxPendedTicks
  2751                           	line	1717
  2752  00EFC0  00E20808           	cp0.w	_uxPendedTicks
  2753  00EFC2  00320002           	bra	z,u651
  2754  00EFC4  0004EFCC           	goto	u650
              00000000           
  2755  00EFC8                     u651:
  2756  00EFC8  0004EFFA           	goto	lab819
              00000000           
  2757  00EFCC                     u650:
  2758                           ;tasks.c: 1718: {
  2759                           
  2760                           ;tasks.c: 1719: while( uxPendedTicks > ( UBaseTy
                                 pe_t ) 0U )
  2761                           
  2762                           	line	1719
  2763  00EFCC  0004EFEA           	goto	lab820
              00000000           
  2764  00EFD0                     lab821:
  2765                           ;tasks.c: 1720: {
  2766                           
  2767                           ;tasks.c: 1721: if( xTaskIncrementTick() != ( ( 
                                 BaseType_t ) 0 ) )
  2768                           
  2769                           	global	_xTaskIncrementTick
  2770                           	signat	_xTaskIncrementTick,26
  2771                           	line	1721
  2772  00EFD0  0002F090           	call	(_xTaskIncrementTick)
              00000000           
  2773  00EFD4  00E00000           	cp0.w	w0
  2774  00EFD6  00320002           	bra	z,u661
  2775  00EFD8  0004EFE0           	goto	u660
              00000000           
  2776  00EFDC                     u661:
  2777  00EFDC  0004EFE8           	goto	lab823
              00000000           
  2778  00EFE0                     u660:
  2779                           ;tasks.c: 1722: {
  2780                           
  2781                           ;tasks.c: 1723: xYieldPending = ( ( BaseType_t )
                                  1 );
  2782                           
  2783                           	line	1723
  2784  00EFE0  00200016           	mov.w	#01h,w6
  2785  00EFE2  008840B6           	mov	w6,_xYieldPending
  2786                           ;tasks.c: 1724: }
  2787                           
  2788                           	line	1724
  2789  00EFE4  0004EFE8           	goto	lab824
              00000000           
  2790                           	line	1725
  2791  00EFE8                     lab823:
  2792                           ;tasks.c: 1725: else
  2793                           
  2794                           ;tasks.c: 1726: {
  2795                           
  2796                           ;tasks.c: 1727: ;
  2797                           
  2798                           	line	1728
  2799  00EFE8                     lab824:
  2800                           ;tasks.c: 1728: }
  2801                           
  2802                           ;tasks.c: 1729: --uxPendedTicks;
  2803                           
  2804                           	line	1729
  2805  00EFE8  00ED2808           	dec.w	_uxPendedTicks
  2806                           	line	1730
  2807  00EFEA                     lab820:
  2808                           	line	1719
  2809  00EFEA  00E20808           	cp0.w	_uxPendedTicks
  2810  00EFEC  003A0002           	bra	nz,u671
  2811  00EFEE  0004EFF6           	goto	u670
              00000000           
  2812  00EFF2                     u671:
  2813  00EFF2  0004EFD0           	goto	lab821
              00000000           
  2814  00EFF6                     u670:
  2815  00EFF6                     lab822:
  2816                           ;tasks.c: 1730: }
  2817                           
  2818                           ;tasks.c: 1731: }
  2819                           
  2820                           	line	1731
  2821  00EFF6  0004EFFA           	goto	lab825
              00000000           
  2822                           	line	1732
  2823  00EFFA                     lab819:
  2824                           ;tasks.c: 1732: else
  2825                           
  2826                           ;tasks.c: 1733: {
  2827                           
  2828                           ;tasks.c: 1734: ;
  2829                           
  2830                           	line	1735
  2831  00EFFA                     lab825:
  2832                           ;tasks.c: 1735: }
  2833                           
  2834                           ;tasks.c: 1737: if( xYieldPending == ( ( BaseTyp
                                 e_t ) 1 ) )
  2835                           
  2836                           	line	1737
  2837  00EFFA  008040B6           	mov	_xYieldPending,w6
  2838  00EFFC  00E13061           	cp.w	w6, #1
  2839  00EFFE  003A0002           	bra	nz,u681
  2840  00F000  0004F008           	goto	u680
              00000000           
  2841  00F004                     u681:
  2842  00F004  0004F018           	goto	lab826
              00000000           
  2843  00F008                     u680:
  2844                           ;tasks.c: 1738: {
  2845                           
  2846                           ;tasks.c: 1740: {
  2847                           
  2848                           ;tasks.c: 1741: xAlreadyYielded = ( ( BaseType_t
                                  ) 1 );
  2849                           
  2850                           	line	1741
  2851  00F008  00200017           	mov.w	#01h,w7
  2852  00F00A  002FFFC6           	mov.w	#((0+f20156+2)-0),w6
  2853  00F00C  00478306           	add.w	sp,w6,w6
  2854  00F00E  00780B07           	mov.w	w7,[w6]
  2855                           ;tasks.c: 1742: }
  2856                           
  2857                           ;tasks.c: 1744: vPortYield();
  2858                           
  2859                           	line	1744
  2860  00F010  0002C410           	call	(_vPortYield)
              00000000           
  2861                           ;tasks.c: 1745: }
  2862                           
  2863                           	line	1745
  2864  00F014  0004F018           	goto	lab827
              00000000           
  2865                           	line	1746
  2866  00F018                     lab826:
  2867                           ;tasks.c: 1746: else
  2868                           
  2869                           ;tasks.c: 1747: {
  2870                           
  2871                           ;tasks.c: 1748: ;
  2872                           
  2873                           	line	1749
  2874  00F018                     lab827:
  2875                           	line	1750
  2876  00F018                     lab812:
  2877                           ;tasks.c: 1749: }
  2878                           
  2879                           ;tasks.c: 1750: }
  2880                           
  2881                           ;tasks.c: 1751: }
  2882                           
  2883                           	line	1751
  2884  00F018  0004F01C           	goto	lab828
              00000000           
  2885                           	line	1752
  2886  00F01C                     lab811:
  2887                           ;tasks.c: 1752: else
  2888                           
  2889                           ;tasks.c: 1753: {
  2890                           
  2891                           ;tasks.c: 1754: ;
  2892                           
  2893                           	line	1755
  2894  00F01C                     lab828:
  2895                           ;tasks.c: 1755: }
  2896                           
  2897                           ;tasks.c: 1756: }
  2898                           
  2899                           ;tasks.c: 1757: vPortExitCritical();
  2900                           
  2901                           	line	1757
  2902  00F01C  0002CA22           	call	(_vPortExitCritical)
              00000000           
  2903                           ;tasks.c: 1759: return xAlreadyYielded;
  2904                           
  2905                           	line	1759
  2906  00F020  0097B86F           	mov.w	[sp+((0+f20156+2)-0)], w0
  2907  00F022  00780000           	mov.w	w0,w0
  2908  00F024  0004F028           	goto	lab810
              00000000           
  2909                           ;tasks.c: 1760: }
  2910                           
  2911                           	line	1760
  2912  00F028                     lab810:
  2913                           	global	_xTaskResumeAll
  2914                           
  2915  00F028  00B1006F           	sub.w	#6,sp
  2916  00F02A  00060000           	return
  2917                           	line	1671
  2918                           
  2919  00F02C                     f20151:
  2920                           
  2921  00F02C  00B0006F           	add.w	#6,sp
  2922  00F02E  0004EF14           	goto	f20150
              00000000           
  2923  000000                     f20156	equ	-6		;stack offset for auto's
  2924  000000                     f20153	equ	-10		;stack offset for parameters
  2925                           	line	0
  2926                           	global	 __end_of_xTaskResumeAll
  2927  00F032                     __end_of_xTaskResumeAll:
  2928                           	global	_xTaskGetTickCount
  2929                           	signat	_xTaskGetTickCount,26
  2930                           	line	1764
  2931  00F032                     _xTaskGetTickCount:
  2932  00F032  0004F052           	goto	f20171
              00000000           
  2933  00F036                     f20170:
  2934                           
  2935                           ;tasks.c: 1763: TickType_t xTaskGetTickCount( vo
                                 id )
  2936                           
  2937                           ;tasks.c: 1764: {
  2938                           
  2939                           ;tasks.c: 1765: TickType_t xTicks;
  2940                           
  2941                           ;tasks.c: 1768: vPortEnterCritical();
  2942                           
  2943                           	line	1768
  2944  00F036  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  2945                           ;tasks.c: 1769: {
  2946                           
  2947                           ;tasks.c: 1770: xTicks = xTickCount;
  2948                           
  2949                           	line	1770
  2950  00F03A  008040A7           	mov	_xTickCount,w7
  2951  00F03C  002FFFC6           	mov.w	#((0+f20176+0)-0),w6
  2952  00F03E  00478306           	add.w	sp,w6,w6
  2953  00F040  00780B07           	mov.w	w7,[w6]
  2954                           ;tasks.c: 1771: }
  2955                           
  2956                           ;tasks.c: 1772: vPortExitCritical();
  2957                           
  2958                           	line	1772
  2959  00F042  0002CA22           	call	(_vPortExitCritical)
              00000000           
  2960                           ;tasks.c: 1774: return xTicks;
  2961                           
  2962                           	line	1774
  2963  00F046  0097B86F           	mov.w	[sp+((0+f20176+0)-0)], w0
  2964  00F048  00780000           	mov.w	w0,w0
  2965  00F04A  0004F04E           	goto	lab829
              00000000           
  2966                           ;tasks.c: 1775: }
  2967                           
  2968                           	line	1775
  2969  00F04E                     lab829:
  2970                           	global	_xTaskGetTickCount
  2971                           
  2972  00F04E  00B1004F           	sub.w	#4,sp
  2973  00F050  00060000           	return
  2974                           	line	1764
  2975                           
  2976  00F052                     f20171:
  2977                           
  2978  00F052  00B0004F           	add.w	#4,sp
  2979  00F054  0004F036           	goto	f20170
              00000000           
  2980  000000                     f20176	equ	-4		;stack offset for auto's
  2981  000000                     f20173	equ	-8		;stack offset for parameters
  2982                           	line	0
  2983                           	global	 __end_of_xTaskGetTickCount
  2984  00F058                     __end_of_xTaskGetTickCount:
  2985                           	global	_xTaskGetTickCountFromISR
  2986                           	signat	_xTaskGetTickCountFromISR,26
  2987                           	line	1779
  2988  00F058                     _xTaskGetTickCountFromISR:
  2989  00F058  0004F078           	goto	f20181
              00000000           
  2990  00F05C                     f20180:
  2991                           
  2992                           ;tasks.c: 1778: TickType_t xTaskGetTickCountFrom
                                 ISR( void )
  2993                           
  2994                           ;tasks.c: 1779: {
  2995                           
  2996                           ;tasks.c: 1780: TickType_t xReturn;
  2997                           
  2998                           ;tasks.c: 1781: UBaseType_t uxSavedInterruptStat
                                 us;
  2999                           
  3000                           ;tasks.c: 1797: ;
  3001                           
  3002                           ;tasks.c: 1799: uxSavedInterruptStatus = 0;
  3003                           
  3004                           	line	1799
  3005  00F05C  00200007           	mov.w	#0,w7
  3006  00F05E  002FFFC6           	mov.w	#((0+f20186+2)-0),w6
  3007  00F060  00478306           	add.w	sp,w6,w6
  3008  00F062  00780B07           	mov.w	w7,[w6]
  3009                           ;tasks.c: 1800: {
  3010                           
  3011                           ;tasks.c: 1801: xReturn = xTickCount;
  3012                           
  3013                           	line	1801
  3014  00F064  008040A7           	mov	_xTickCount,w7
  3015  00F066  002FFFA6           	mov.w	#((0+f20186+0)-0),w6
  3016  00F068  00478306           	add.w	sp,w6,w6
  3017  00F06A  00780B07           	mov.w	w7,[w6]
  3018                           ;tasks.c: 1802: }
  3019                           
  3020                           ;tasks.c: 1803: ( void ) ( uxSavedInterruptStatu
                                 s );
  3021                           
  3022                           ;tasks.c: 1805: return xReturn;
  3023                           
  3024                           	line	1805
  3025  00F06C  0097B85F           	mov.w	[sp+((0+f20186+0)-0)], w0
  3026  00F06E  00780000           	mov.w	w0,w0
  3027  00F070  0004F074           	goto	lab830
              00000000           
  3028                           ;tasks.c: 1806: }
  3029                           
  3030                           	line	1806
  3031  00F074                     lab830:
  3032                           	global	_xTaskGetTickCountFromISR
  3033                           
  3034  00F074  00B1006F           	sub.w	#6,sp
  3035  00F076  00060000           	return
  3036                           	line	1779
  3037                           
  3038  00F078                     f20181:
  3039                           
  3040  00F078  00B0006F           	add.w	#6,sp
  3041  00F07A  0004F05C           	goto	f20180
              00000000           
  3042  000000                     f20186	equ	-6		;stack offset for auto's
  3043  000000                     f20183	equ	-10		;stack offset for parameters
  3044                           	line	0
  3045                           	global	 __end_of_xTaskGetTickCountFromISR
  3046  00F07E                     __end_of_xTaskGetTickCountFromISR:
  3047                           	global	_uxTaskGetNumberOfTasks
  3048                           	signat	_uxTaskGetNumberOfTasks,26
  3049                           	line	1810
  3050  00F07E                     _uxTaskGetNumberOfTasks:
  3051  00F07E  0004F08C           	goto	f20191
              00000000           
  3052  00F082                     f20190:
  3053                           
  3054                           ;tasks.c: 1809: UBaseType_t uxTaskGetNumberOfTas
                                 ks( void )
  3055                           
  3056                           ;tasks.c: 1810: {
  3057                           
  3058                           ;tasks.c: 1813: return uxCurrentNumberOfTasks;
  3059                           
  3060                           	line	1813
  3061  00F082  00804030           	mov	_uxCurrentNumberOfTasks,w0
  3062  00F084  00780000           	mov.w	w0,w0
  3063  00F086  0004F08A           	goto	lab831
              00000000           
  3064                           ;tasks.c: 1814: }
  3065                           
  3066                           	line	1814
  3067  00F08A                     lab831:
  3068                           	global	_uxTaskGetNumberOfTasks
  3069  00F08A  00060000           	return
  3070                           	line	1810
  3071                           
  3072  00F08C                     f20191:
  3073  00F08C  0004F082           	goto	f20190
              00000000           
  3074  000000                     f20196	equ	0		;stack offset for auto's
  3075  000000                     f20193	equ	-4		;stack offset for parameters
  3076                           	line	0
  3077                           	global	 __end_of_uxTaskGetNumberOfTasks
  3078  00F090                     __end_of_uxTaskGetNumberOfTasks:
  3079                           	line	1939
  3080  00F090                     _xTaskIncrementTick:
  3081  00F090  0004F22A           	goto	f20201
              00000000           
  3082  00F094                     f20200:
  3083                           
  3084                           ;tasks.c: 1938: BaseType_t xTaskIncrementTick( v
                                 oid )
  3085                           
  3086                           ;tasks.c: 1939: {
  3087                           
  3088                           ;tasks.c: 1940: TCB_t * pxTCB;
  3089                           
  3090                           ;tasks.c: 1941: TickType_t xItemValue;
  3091                           
  3092                           ;tasks.c: 1942: BaseType_t xSwitchRequired = ( (
                                  BaseType_t ) 0 );
  3093                           
  3094                           	line	1942
  3095  00F094  00200007           	mov.w	#0,w7
  3096  00F096  002FFF86           	mov.w	#((0+f20206+4)-0),w6
  3097  00F098  00478306           	add.w	sp,w6,w6
  3098  00F09A  00780B07           	mov.w	w7,[w6]
  3099                           ;tasks.c: 1947: ;
  3100                           
  3101                           ;tasks.c: 1948: if( uxSchedulerSuspended == ( UB
                                 aseType_t ) ( ( BaseType_t ) 0 ) )
  3102                           
  3103                           	line	1948
  3104  00F09C  00E2080A           	cp0.w	_uxSchedulerSuspended
  3105  00F09E  003A0002           	bra	nz,u691
  3106  00F0A0  0004F0A8           	goto	u690
              00000000           
  3107  00F0A4                     u691:
  3108  00F0A4  0004F204           	goto	lab833
              00000000           
  3109  00F0A8                     u690:
  3110                           ;tasks.c: 1949: {
  3111                           
  3112                           ;tasks.c: 1952: ++xTickCount;
  3113                           
  3114                           	line	1952
  3115  00F0A8  00EC2814           	inc.w	_xTickCount
  3116                           ;tasks.c: 1954: {
  3117                           
  3118                           ;tasks.c: 1957: const TickType_t xConstTickCount
                                  = xTickCount;
  3119                           
  3120                           	line	1957
  3121  00F0AA  008040A7           	mov	_xTickCount,w7
  3122  00F0AC  002FFFA6           	mov.w	#((0+f20206+6)-0),w6
  3123  00F0AE  00478306           	add.w	sp,w6,w6
  3124  00F0B0  00780B07           	mov.w	w7,[w6]
  3125                           ;tasks.c: 1959: if( xConstTickCount == ( TickTyp
                                 e_t ) 0U )
  3126                           
  3127                           	line	1959
  3128  00F0B2  002FFFA6           	mov.w	#((0+f20206+6)-0),w6
  3129  00F0B4  00478306           	add.w	sp,w6,w6
  3130  00F0B6  00E00016           	cp0.w	[w6]
  3131  00F0B8  003A0002           	bra	nz,u701
  3132  00F0BA  0004F0C2           	goto	u700
              00000000           
  3133  00F0BE                     u701:
  3134  00F0BE  0004F0E0           	goto	lab834
              00000000           
  3135  00F0C2                     u700:
  3136                           ;tasks.c: 1960: {
  3137                           
  3138                           ;tasks.c: 1961: { List_t *pxTemp; ; pxTemp = pxD
                                 elayedTaskList; pxDelayedTaskList = pxOverflowDe
                                 layedTaskList; pxOverflowDelayedTaskList = pxTem
                                 p; xNumOfOverflows++; prvResetNextTaskUnblockTim
                                 e(); };
  3139                           
  3140                           	global	_pxDelayedTaskList
  3141                           	line	1961
  3142  00F0C2  00804017           	mov	_pxDelayedTaskList,w7
  3143  00F0C4  002FFFC6           	mov.w	#((0+f20206+8)-0),w6
  3144  00F0C6  00478306           	add.w	sp,w6,w6
  3145  00F0C8  00780B07           	mov.w	w7,[w6]
  3146                           	global	_pxOverflowDelayedTaskList
  3147  00F0CA  00804026           	mov	_pxOverflowDelayedTaskList,w6
  3148  00F0CC  00884016           	mov	w6,_pxDelayedTaskList
  3149  00F0CE  002FFFC6           	mov.w	#((0+f20206+8)-0),w6
  3150  00F0D0  00478306           	add.w	sp,w6,w6
  3151  00F0D2  00780316           	mov.w	[w6],w6
  3152  00F0D4  00884026           	mov	w6,_pxOverflowDelayedTaskList
  3153                           	global	_xNumOfOverflows
  3154  00F0D6  00EC2810           	inc.w	_xNumOfOverflows
  3155  00F0D8  0002F922           	call	(_prvResetNextTaskUnblockTime)
              00000000           
  3156                           ;tasks.c: 1962: }
  3157                           
  3158                           	line	1962
  3159  00F0DC  0004F0E0           	goto	lab835
              00000000           
  3160                           	line	1963
  3161  00F0E0                     lab834:
  3162                           ;tasks.c: 1963: else
  3163                           
  3164                           ;tasks.c: 1964: {
  3165                           
  3166                           ;tasks.c: 1965: ;
  3167                           
  3168                           	line	1966
  3169  00F0E0                     lab835:
  3170                           ;tasks.c: 1966: }
  3171                           
  3172                           ;tasks.c: 1972: if( xConstTickCount >= xNextTask
                                 UnblockTime )
  3173                           
  3174                           	line	1972
  3175  00F0E0  00806567           	mov	_xNextTaskUnblockTime,w7
  3176  00F0E2  002FFFA6           	mov.w	#((0+f20206+6)-0),w6
  3177  00F0E4  00478306           	add.w	sp,w6,w6
  3178  00F0E6  00780316           	mov.w	[w6],w6
  3179  00F0E8  00E13007           	cp.w	w6, w7
  3180  00F0EA  00390002           	bra	ltu,u711
  3181  00F0EC  0004F0F4           	goto	u710
              00000000           
  3182  00F0F0                     u711:
  3183  00F0F0  0004F1D2           	goto	lab836
              00000000           
  3184  00F0F4                     u710:
  3185                           ;tasks.c: 1973: {
  3186                           
  3187                           ;tasks.c: 1974: for( ;; )
  3188                           
  3189                           	line	1975
  3190  00F0F4                     lab837:
  3191                           ;tasks.c: 1975: {
  3192                           
  3193                           ;tasks.c: 1976: if( ( ( BaseType_t ) ( ( pxDelay
                                 edTaskList )->uxNumberOfItems == ( UBaseType_t )
                                  0 ) ) != ( ( BaseType_t ) 0 ) )
  3194                           
  3195                           	line	1976
  3196  00F0F4  00804016           	mov	_pxDelayedTaskList,w6
  3197  00F0F6  00E00016           	cp0.w	[w6]
  3198  00F0F8  003A0002           	bra	nz,u721
  3199  00F0FA  0004F102           	goto	u720
              00000000           
  3200  00F0FE                     u721:
  3201  00F0FE  0004F10E           	goto	lab840
              00000000           
  3202  00F102                     u720:
  3203                           ;tasks.c: 1977: {
  3204                           
  3205                           ;tasks.c: 1983: xNextTaskUnblockTime = ( TickTyp
                                 e_t ) 0xffff;
  3206                           
  3207                           	line	1983
  3208  00F102  002FFFF6           	mov.w	#-1,w6
  3209  00F104  00886566           	mov	w6,_xNextTaskUnblockTime
  3210                           ;tasks.c: 1984: break;
  3211                           
  3212                           	line	1984
  3213  00F106  0004F1D2           	goto	lab838
              00000000           
  3214                           ;tasks.c: 1985: }
  3215                           
  3216                           	line	1985
  3217  00F10A  0004F1CE           	goto	lab841
              00000000           
  3218                           	line	1986
  3219  00F10E                     lab840:
  3220                           ;tasks.c: 1986: else
  3221                           
  3222                           ;tasks.c: 1987: {
  3223                           
  3224                           ;tasks.c: 1992: pxTCB = ( TCB_t * ) ( (&( ( pxDe
                                 layedTaskList )->xListEnd ))->pxNext->pvOwner );
  3225                           
  3226                           	line	1992
  3227  00F10E  00208026           	mov.w	#_pxDelayedTaskList,w6
  3228  00F110  00780316           	mov.w	[w6],w6
  3229  00F112  00B00066           	add.w	#6,w6
  3230  00F114  00780396           	mov.w	[w6],w7
  3231  00F116  00B00067           	add.w	#6,w7
  3232  00F118  002FFF46           	mov.w	#((0+f20206+0)-0),w6
  3233  00F11A  00478306           	add.w	sp,w6,w6
  3234  00F11C  00780B17           	mov.w	[w7],[w6]
  3235                           ;tasks.c: 1993: xItemValue = ( ( &( pxTCB->xGene
                                 ricListItem ) )->xItemValue );
  3236                           
  3237                           	line	1993
  3238  00F11E  0097BBAF           	mov.w	[sp+((0+f20206+0)-0)],w7
  3239  00F120  00B00027           	add.w	#2,w7
  3240  00F122  002FFF66           	mov.w	#((0+f20206+2)-0),w6
  3241  00F124  00478306           	add.w	sp,w6,w6
  3242  00F126  00780B17           	mov.w	[w7],[w6]
  3243                           ;tasks.c: 1995: if( xConstTickCount < xItemValue
                                  )
  3244                           
  3245                           	line	1995
  3246  00F128  002FFF66           	mov.w	#((0+f20206+2)-0),w6
  3247  00F12A  00478306           	add.w	sp,w6,w6
  3248  00F12C  00780396           	mov.w	[w6],w7
  3249  00F12E  002FFFA6           	mov.w	#((0+f20206+6)-0),w6
  3250  00F130  00478306           	add.w	sp,w6,w6
  3251  00F132  00780316           	mov.w	[w6],w6
  3252  00F134  00E13007           	cp.w	w6, w7
  3253  00F136  00310002           	bra	geu,u731
  3254  00F138  0004F140           	goto	u730
              00000000           
  3255  00F13C                     u731:
  3256  00F13C  0004F150           	goto	lab842
              00000000           
  3257  00F140                     u730:
  3258                           ;tasks.c: 1996: {
  3259                           
  3260                           ;tasks.c: 2002: xNextTaskUnblockTime = xItemValu
                                 e;
  3261                           
  3262                           	line	2002
  3263  00F140  002FFF66           	mov.w	#((0+f20206+2)-0),w6
  3264  00F142  00478306           	add.w	sp,w6,w6
  3265  00F144  00780316           	mov.w	[w6],w6
  3266  00F146  00886566           	mov	w6,_xNextTaskUnblockTime
  3267                           ;tasks.c: 2003: break;
  3268                           
  3269                           	line	2003
  3270  00F148  0004F1D2           	goto	lab838
              00000000           
  3271                           ;tasks.c: 2004: }
  3272                           
  3273                           	line	2004
  3274  00F14C  0004F150           	goto	lab843
              00000000           
  3275                           	line	2005
  3276  00F150                     lab842:
  3277                           ;tasks.c: 2005: else
  3278                           
  3279                           ;tasks.c: 2006: {
  3280                           
  3281                           ;tasks.c: 2007: ;
  3282                           
  3283                           	line	2008
  3284  00F150                     lab843:
  3285                           ;tasks.c: 2008: }
  3286                           
  3287                           ;tasks.c: 2011: ( void ) uxListRemove( &( pxTCB-
                                 >xGenericListItem ) );
  3288                           
  3289                           	line	2011
  3290  00F150  0097B82F           	mov.w	[sp+((0+f20206+0)-0)],w0
  3291  00F152  00B00020           	add.w	#2,w0
  3292  00F154  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  3293                           ;tasks.c: 2015: if( ( ( &( pxTCB->xEventListItem
                                  ) )->pvContainer ) != (0) )
  3294                           
  3295                           	line	2015
  3296  00F158  0097BB2F           	mov.w	[sp+((0+f20206+0)-0)],w6
  3297  00F15A  00B00146           	add.w	#20,w6
  3298  00F15C  00E00016           	cp0.w	[w6]
  3299  00F15E  00320002           	bra	z,u741
  3300  00F160  0004F168           	goto	u740
              00000000           
  3301  00F164                     u741:
  3302  00F164  0004F174           	goto	lab844
              00000000           
  3303  00F168                     u740:
  3304                           ;tasks.c: 2016: {
  3305                           
  3306                           ;tasks.c: 2017: ( void ) uxListRemove( &( pxTCB-
                                 >xEventListItem ) );
  3307                           
  3308                           	line	2017
  3309  00F168  0097B82F           	mov.w	[sp+((0+f20206+0)-0)],w0
  3310  00F16A  00B000C0           	add.w	#12,w0
  3311  00F16C  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  3312                           ;tasks.c: 2018: }
  3313                           
  3314                           	line	2018
  3315  00F170  0004F174           	goto	lab845
              00000000           
  3316                           	line	2019
  3317  00F174                     lab844:
  3318                           ;tasks.c: 2019: else
  3319                           
  3320                           ;tasks.c: 2020: {
  3321                           
  3322                           ;tasks.c: 2021: ;
  3323                           
  3324                           	line	2022
  3325  00F174                     lab845:
  3326                           ;tasks.c: 2022: }
  3327                           
  3328                           ;tasks.c: 2026: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  3329                           
  3330                           	line	2026
  3331  00F174  00804076           	mov	_uxTopReadyPriority,w6
  3332  00F176  0097BBAF           	mov.w	[sp+((0+f20206+0)-0)],w7
  3333  00F178  00B00167           	add.w	#22,w7
  3334  00F17A  00780297           	mov.w	[w7],w5
  3335  00F17C  00E12806           	cp.w	w5, w6
  3336  00F17E  00360002           	bra	leu,u751
  3337  00F180  0004F188           	goto	u750
              00000000           
  3338  00F184                     u751:
  3339  00F184  0004F190           	goto	lab846
              00000000           
  3340  00F188                     u750:
  3341  00F188  0097BBAF           	mov.w	[sp+((0+f20206+0)-0)],w7
  3342  00F18A  00B00167           	add.w	#22,w7
  3343  00F18C  00780317           	mov.w	[w7],w6
  3344  00F18E  00884076           	mov	w6,_uxTopReadyPriority
  3345  00F190                     lab846:
  3346  00F190  0097B92F           	mov.w	[sp+((0+f20206+0)-0)],w2
  3347  00F192  00B00022           	add.w	#2,w2
  3348  00F194  00208406           	mov	#_pxReadyTasksLists,w6
  3349  00F196  002000A4           	mov.w	#0Ah,w4
  3350  00F198  0097BBAF           	mov.w	[sp+((0+f20206+0)-0)],w7
  3351  00F19A  00B00167           	add.w	#22,w7
  3352  00F19C  00780297           	mov.w	[w7],w5
  3353  00F19E  00780005           	mov.w	w5,w0
  3354  00F1A0  00B80004           	mul.uu	w0,w4,w0
  3355  00F1A2  00400006           	add.w	w0,w6,w0
  3356  00F1A4  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  3357                           ;tasks.c: 2031: {
  3358                           
  3359                           ;tasks.c: 2036: if( pxTCB->uxPriority >= pxCurre
                                 ntTCB->uxPriority )
  3360                           
  3361                           	line	2036
  3362  00F1A8  00208006           	mov.w	#_pxCurrentTCB,w6
  3363  00F1AA  00780316           	mov.w	[w6],w6
  3364  00F1AC  00B00166           	add.w	#22,w6
  3365  00F1AE  00780396           	mov.w	[w6],w7
  3366  00F1B0  0097BAAF           	mov.w	[sp+((0+f20206+0)-0)],w5
  3367  00F1B2  00B00165           	add.w	#22,w5
  3368  00F1B4  00780315           	mov.w	[w5],w6
  3369  00F1B6  00E13007           	cp.w	w6, w7
  3370  00F1B8  00390002           	bra	ltu,u761
  3371  00F1BA  0004F1C2           	goto	u760
              00000000           
  3372  00F1BE                     u761:
  3373  00F1BE  0004F1CE           	goto	lab847
              00000000           
  3374  00F1C2                     u760:
  3375                           ;tasks.c: 2037: {
  3376                           
  3377                           ;tasks.c: 2038: xSwitchRequired = ( ( BaseType_t
                                  ) 1 );
  3378                           
  3379                           	line	2038
  3380  00F1C2  00200017           	mov.w	#01h,w7
  3381  00F1C4  002FFF86           	mov.w	#((0+f20206+4)-0),w6
  3382  00F1C6  00478306           	add.w	sp,w6,w6
  3383  00F1C8  00780B07           	mov.w	w7,[w6]
  3384                           ;tasks.c: 2039: }
  3385                           
  3386                           	line	2039
  3387  00F1CA  0004F1CE           	goto	lab848
              00000000           
  3388                           	line	2040
  3389  00F1CE                     lab847:
  3390                           ;tasks.c: 2040: else
  3391                           
  3392                           ;tasks.c: 2041: {
  3393                           
  3394                           ;tasks.c: 2042: ;
  3395                           
  3396                           	line	2043
  3397  00F1CE                     lab848:
  3398                           	line	2046
  3399  00F1CE                     lab841:
  3400                           ;tasks.c: 2043: }
  3401                           
  3402                           ;tasks.c: 2044: }
  3403                           
  3404                           ;tasks.c: 2046: }
  3405                           
  3406                           ;tasks.c: 2047: }
  3407                           
  3408                           	line	2047
  3409  00F1CE  0004F0F4           	goto	lab837
              00000000           
  3410  00F1D2                     lab838:
  3411                           	line	2048
  3412  00F1D2                     lab836:
  3413                           ;tasks.c: 2048: }
  3414                           
  3415                           ;tasks.c: 2049: }
  3416                           
  3417                           ;tasks.c: 2055: {
  3418                           
  3419                           ;tasks.c: 2056: if( ( ( &( pxReadyTasksLists[ px
                                 CurrentTCB->uxPriority ] ) )->uxNumberOfItems ) 
                                 > ( UBaseType_t ) 1 )
  3420                           
  3421                           	line	2056
  3422  00F1D2  00200016           	mov.w	#01h,w6
  3423  00F1D4  00208407           	mov	#_pxReadyTasksLists,w7
  3424  00F1D6  002000A4           	mov.w	#0Ah,w4
  3425  00F1D8  00208005           	mov.w	#_pxCurrentTCB,w5
  3426  00F1DA  00780295           	mov.w	[w5],w5
  3427  00F1DC  00B00165           	add.w	#22,w5
  3428  00F1DE  00780195           	mov.w	[w5],w3
  3429  00F1E0  00780103           	mov.w	w3,w2
  3430  00F1E2  00B81104           	mul.uu	w2,w4,w2
  3431  00F1E4  00410107           	add.w	w2,w7,w2
  3432  00F1E6  00780392           	mov.w	[w2],w7
  3433  00F1E8  00E13806           	cp.w	w7, w6
  3434  00F1EA  00360002           	bra	leu,u771
  3435  00F1EC  0004F1F4           	goto	u770
              00000000           
  3436  00F1F0                     u771:
  3437  00F1F0  0004F200           	goto	lab849
              00000000           
  3438  00F1F4                     u770:
  3439                           ;tasks.c: 2057: {
  3440                           
  3441                           ;tasks.c: 2058: xSwitchRequired = ( ( BaseType_t
                                  ) 1 );
  3442                           
  3443                           	line	2058
  3444  00F1F4  00200017           	mov.w	#01h,w7
  3445  00F1F6  002FFF86           	mov.w	#((0+f20206+4)-0),w6
  3446  00F1F8  00478306           	add.w	sp,w6,w6
  3447  00F1FA  00780B07           	mov.w	w7,[w6]
  3448                           ;tasks.c: 2059: }
  3449                           
  3450                           	line	2059
  3451  00F1FC  0004F200           	goto	lab850
              00000000           
  3452                           	line	2060
  3453  00F200                     lab849:
  3454                           ;tasks.c: 2060: else
  3455                           
  3456                           ;tasks.c: 2061: {
  3457                           
  3458                           ;tasks.c: 2062: ;
  3459                           
  3460                           	line	2063
  3461  00F200                     lab850:
  3462                           ;tasks.c: 2063: }
  3463                           
  3464                           ;tasks.c: 2064: }
  3465                           
  3466                           ;tasks.c: 2081: }
  3467                           
  3468                           	line	2081
  3469  00F200  0004F206           	goto	lab851
              00000000           
  3470                           	line	2082
  3471  00F204                     lab833:
  3472                           ;tasks.c: 2082: else
  3473                           
  3474                           ;tasks.c: 2083: {
  3475                           
  3476                           ;tasks.c: 2084: ++uxPendedTicks;
  3477                           
  3478                           	line	2084
  3479  00F204  00EC2808           	inc.w	_uxPendedTicks
  3480                           	line	2093
  3481  00F206                     lab851:
  3482                           ;tasks.c: 2093: }
  3483                           
  3484                           ;tasks.c: 2096: {
  3485                           
  3486                           ;tasks.c: 2097: if( xYieldPending != ( ( BaseTyp
                                 e_t ) 0 ) )
  3487                           
  3488                           	line	2097
  3489  00F206  00E20816           	cp0.w	_xYieldPending
  3490  00F208  00320002           	bra	z,u781
  3491  00F20A  0004F212           	goto	u780
              00000000           
  3492  00F20E                     u781:
  3493  00F20E  0004F21E           	goto	lab852
              00000000           
  3494  00F212                     u780:
  3495                           ;tasks.c: 2098: {
  3496                           
  3497                           ;tasks.c: 2099: xSwitchRequired = ( ( BaseType_t
                                  ) 1 );
  3498                           
  3499                           	line	2099
  3500  00F212  00200017           	mov.w	#01h,w7
  3501  00F214  002FFF86           	mov.w	#((0+f20206+4)-0),w6
  3502  00F216  00478306           	add.w	sp,w6,w6
  3503  00F218  00780B07           	mov.w	w7,[w6]
  3504                           ;tasks.c: 2100: }
  3505                           
  3506                           	line	2100
  3507  00F21A  0004F21E           	goto	lab853
              00000000           
  3508                           	line	2101
  3509  00F21E                     lab852:
  3510                           ;tasks.c: 2101: else
  3511                           
  3512                           ;tasks.c: 2102: {
  3513                           
  3514                           ;tasks.c: 2103: ;
  3515                           
  3516                           	line	2104
  3517  00F21E                     lab853:
  3518                           ;tasks.c: 2104: }
  3519                           
  3520                           ;tasks.c: 2105: }
  3521                           
  3522                           ;tasks.c: 2108: return xSwitchRequired;
  3523                           
  3524                           	line	2108
  3525  00F21E  0097B84F           	mov.w	[sp+((0+f20206+4)-0)], w0
  3526  00F220  00780000           	mov.w	w0,w0
  3527  00F222  0004F226           	goto	lab832
              00000000           
  3528                           ;tasks.c: 2109: }
  3529                           
  3530                           	line	2109
  3531  00F226                     lab832:
  3532                           	global	_xTaskIncrementTick
  3533                           
  3534  00F226  00B100CF           	sub.w	#12,sp
  3535  00F228  00060000           	return
  3536                           	line	1939
  3537                           
  3538  00F22A                     f20201:
  3539                           
  3540  00F22A  00B000CF           	add.w	#12,sp
  3541  00F22C  0004F094           	goto	f20200
              00000000           
  3542  000000                     f20206	equ	-12		;stack offset for auto's
  3543  000000                     f20203	equ	-16		;stack offset for parameters
  3544                           	line	0
  3545                           	global	 __end_of_xTaskIncrementTick
  3546  00F230                     __end_of_xTaskIncrementTick:
  3547                           	line	2203
  3548  00F230                     _vTaskSwitchContext:
  3549  00F230  0004F2C4           	goto	f20211
              00000000           
  3550  00F234                     f20210:
  3551                           
  3552                           ;tasks.c: 2202: void vTaskSwitchContext( void )
  3553                           
  3554                           ;tasks.c: 2203: {
  3555                           
  3556                           ;tasks.c: 2204: if( uxSchedulerSuspended != ( UB
                                 aseType_t ) ( ( BaseType_t ) 0 ) )
  3557                           
  3558                           	line	2204
  3559  00F234  00E2080A           	cp0.w	_uxSchedulerSuspended
  3560  00F236  00320002           	bra	z,u791
  3561  00F238  0004F240           	goto	u790
              00000000           
  3562  00F23C                     u791:
  3563  00F23C  0004F248           	goto	lab855
              00000000           
  3564  00F240                     u790:
  3565                           ;tasks.c: 2205: {
  3566                           
  3567                           ;tasks.c: 2208: xYieldPending = ( ( BaseType_t )
                                  1 );
  3568                           
  3569                           	line	2208
  3570  00F240  00200016           	mov.w	#01h,w6
  3571  00F242  008840B6           	mov	w6,_xYieldPending
  3572                           ;tasks.c: 2209: }
  3573                           
  3574                           	line	2209
  3575  00F244  0004F2C0           	goto	lab856
              00000000           
  3576                           	line	2210
  3577  00F248                     lab855:
  3578                           ;tasks.c: 2210: else
  3579                           
  3580                           ;tasks.c: 2211: {
  3581                           
  3582                           ;tasks.c: 2212: xYieldPending = ( ( BaseType_t )
                                  0 );
  3583                           
  3584                           	line	2212
  3585  00F248  00EF2816           	clr.w	_xYieldPending
  3586                           ;tasks.c: 2213: ;
  3587                           
  3588                           ;tasks.c: 2243: ;
  3589                           
  3590                           ;tasks.c: 2244: ;
  3591                           
  3592                           ;tasks.c: 2248: { while( ( ( BaseType_t ) ( ( &(
                                  pxReadyTasksLists[ uxTopReadyPriority ] ) )->ux
                                 NumberOfItems == ( UBaseType_t ) 0 ) ) ) { ; --u
                                 xTopReadyPriority; } { List_t * const pxConstLis
                                 t = ( &( pxReadyTasksLists[ uxTopReadyPriority ]
                                  ) ); ( pxC...
  3593                           
  3594                           	line	2248
  3595  00F24A  0004F250           	goto	lab857
              00000000           
  3596  00F24E                     lab858:
  3597  00F24E  00ED280E           	dec.w	_uxTopReadyPriority
  3598  00F250                     lab857:
  3599  00F250  00208406           	mov	#_pxReadyTasksLists,w6
  3600  00F252  002000A7           	mov.w	#0Ah,w7
  3601  00F254  00780107           	mov.w	w7,w2
  3602  00F256  00804074           	mov	_uxTopReadyPriority,w4
  3603  00F258  00B82202           	mul.uu	w4,w2,w4
  3604  00F25A  00420206           	add.w	w4,w6,w4
  3605  00F25C  00E00014           	cp0.w	[w4]
  3606  00F25E  00320002           	bra	z,u801
  3607  00F260  0004F268           	goto	u800
              00000000           
  3608  00F264                     u801:
  3609  00F264  0004F24E           	goto	lab858
              00000000           
  3610  00F268                     u800:
  3611  00F268                     lab859:
  3612  00F268  00208406           	mov	#_pxReadyTasksLists,w6
  3613  00F26A  002000A7           	mov.w	#0Ah,w7
  3614  00F26C  00780107           	mov.w	w7,w2
  3615  00F26E  00804074           	mov	_uxTopReadyPriority,w4
  3616  00F270  00B82202           	mul.uu	w4,w2,w4
  3617  00F272  00420206           	add.w	w4,w6,w4
  3618  00F274  002FFFC6           	mov.w	#((0+f20216+0)-0),w6
  3619  00F276  00478306           	add.w	sp,w6,w6
  3620  00F278  00780B04           	mov.w	w4,[w6]
  3621  00F27A  0097BB6F           	mov.w	[sp+((0+f20216+0)-0)],w6
  3622  00F27C  00B00026           	add.w	#2,w6
  3623  00F27E  00780396           	mov.w	[w6],w7
  3624  00F280  00B00027           	add.w	#2,w7
  3625  00F282  00780317           	mov.w	[w7],w6
  3626  00F284  002FFFC7           	mov.w	#((0+f20216+0)-0),w7
  3627  00F286  00478387           	add.w	sp,w7,w7
  3628  00F288  00780297           	mov	[w7],w5
  3629  00F28A  00980296           	mov.w	w6,[w5+2]
  3630  00F28C  0097BB6F           	mov.w	[sp+((0+f20216+0)-0)],w6
  3631  00F28E  00B00026           	add.w	#2,w6
  3632  00F290  00780396           	mov.w	[w6],w7
  3633  00F292  0097BB6F           	mov.w	[sp+((0+f20216+0)-0)],w6
  3634  00F294  00B00046           	add.w	#4,w6
  3635  00F296  00E13007           	cp.w	w6, w7
  3636  00F298  003A0002           	bra	nz,u811
  3637  00F29A  0004F2A2           	goto	u810
              00000000           
  3638  00F29E                     u811:
  3639  00F29E  0004F2B4           	goto	lab860
              00000000           
  3640  00F2A2                     u810:
  3641  00F2A2  0097BB6F           	mov.w	[sp+((0+f20216+0)-0)],w6
  3642  00F2A4  00B00026           	add.w	#2,w6
  3643  00F2A6  00780396           	mov.w	[w6],w7
  3644  00F2A8  00B00027           	add.w	#2,w7
  3645  00F2AA  00780317           	mov.w	[w7],w6
  3646  00F2AC  002FFFC7           	mov.w	#((0+f20216+0)-0),w7
  3647  00F2AE  00478387           	add.w	sp,w7,w7
  3648  00F2B0  00780297           	mov	[w7],w5
  3649  00F2B2  00980296           	mov.w	w6,[w5+2]
  3650  00F2B4                     lab860:
  3651  00F2B4  0097BB6F           	mov.w	[sp+((0+f20216+0)-0)],w6
  3652  00F2B6  00B00026           	add.w	#2,w6
  3653  00F2B8  00780396           	mov.w	[w6],w7
  3654  00F2BA  00B00067           	add.w	#6,w7
  3655  00F2BC  00780317           	mov.w	[w7],w6
  3656  00F2BE  00884006           	mov	w6,_pxCurrentTCB
  3657                           ;tasks.c: 2249: ;
  3658                           
  3659                           	line	2258
  3660  00F2C0                     lab856:
  3661                           ;tasks.c: 2258: }
  3662                           
  3663                           ;tasks.c: 2259: }
  3664                           
  3665                           	line	2259
  3666  00F2C0                     lab854:
  3667                           	global	_vTaskSwitchContext
  3668                           
  3669  00F2C0  00B1004F           	sub.w	#4,sp
  3670  00F2C2  00060000           	return
  3671                           	line	2203
  3672                           
  3673  00F2C4                     f20211:
  3674                           
  3675  00F2C4  00B0004F           	add.w	#4,sp
  3676  00F2C6  0004F234           	goto	f20210
              00000000           
  3677  000000                     f20216	equ	-4		;stack offset for auto's
  3678  000000                     f20213	equ	-8		;stack offset for parameters
  3679                           	line	0
  3680                           	global	 __end_of_vTaskSwitchContext
  3681  00F2CA                     __end_of_vTaskSwitchContext:
  3682                           	global	_vTaskPlaceOnEventList
  3683                           	signat	_vTaskPlaceOnEventList,8250
  3684                           	line	2263
  3685  00F2CA                     _vTaskPlaceOnEventList:
  3686  00F2CA  0004F33E           	goto	f20221
              00000000           
  3687  00F2CE                     f20220:
  3688                           
  3689                           ;tasks.c: 2262: void vTaskPlaceOnEventList( List
                                 _t * const pxEventList, const TickType_t xTicksT
                                 oWait )
  3690                           
  3691                           ;tasks.c: 2263: {
  3692                           
  3693                           ;tasks.c: 2264: TickType_t xTimeToWake;
  3694                           
  3695                           ;tasks.c: 2266: ;
  3696                           
  3697                           ;tasks.c: 2275: vListInsert( pxEventList, &( pxC
                                 urrentTCB->xEventListItem ) );
  3698                           
  3699                           	global	_vListInsert
  3700                           	signat	_vListInsert,8250
  3701                           ;_xTicksToWait stored from w2
  3702                           	line	2275
  3703  00F2CE  002FFFA6           	mov.w	#((0+f20226+2)-0),w6
  3704  00F2D0  00478306           	add.w	sp,w6,w6
  3705  00F2D2  00780B02           	mov.w	w2,[w6]
  3706                           ;_pxEventList stored from w0
  3707  00F2D4  002FFFC6           	mov.w	#((0+f20226+4)-0),w6
  3708  00F2D6  00478306           	add.w	sp,w6,w6
  3709  00F2D8  00780B00           	mov.w	w0,[w6]
  3710  00F2DA  00208006           	mov.w	#_pxCurrentTCB,w6
  3711  00F2DC  00780116           	mov.w	[w6],w2
  3712  00F2DE  00B000C2           	add.w	#12,w2
  3713  00F2E0  0097B86F           	mov.w	[sp+((0+f20226+4)-0)],w0
  3714  00F2E2  0002C75A           	call	(_vListInsert)	;0 bytes adjustment
              00000000           
  3715                           ;tasks.c: 2280: if( uxListRemove( &( pxCurrentTC
                                 B->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  3716                           
  3717                           	line	2280
  3718  00F2E6  00208006           	mov.w	#_pxCurrentTCB,w6
  3719  00F2E8  00780016           	mov.w	[w6],w0
  3720  00F2EA  00B00020           	add.w	#2,w0
  3721  00F2EC  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  3722  00F2F0  00E00000           	cp0.w	w0
  3723  00F2F2  003A0002           	bra	nz,u821
  3724  00F2F4  0004F2FC           	goto	u820
              00000000           
  3725  00F2F8                     u821:
  3726  00F2F8  0004F300           	goto	lab862
              00000000           
  3727  00F2FC                     u820:
  3728                           ;tasks.c: 2281: {
  3729                           
  3730                           ;tasks.c: 2284: ;
  3731                           
  3732                           ;tasks.c: 2285: }
  3733                           
  3734                           	line	2285
  3735  00F2FC  0004F300           	goto	lab863
              00000000           
  3736                           	line	2286
  3737  00F300                     lab862:
  3738                           ;tasks.c: 2286: else
  3739                           
  3740                           ;tasks.c: 2287: {
  3741                           
  3742                           ;tasks.c: 2288: ;
  3743                           
  3744                           	line	2289
  3745  00F300                     lab863:
  3746                           ;tasks.c: 2289: }
  3747                           
  3748                           ;tasks.c: 2292: {
  3749                           
  3750                           ;tasks.c: 2293: if( xTicksToWait == ( TickType_t
                                  ) 0xffff )
  3751                           
  3752                           	line	2293
  3753  00F300  002FFFF7           	mov.w	#-1,w7
  3754  00F302  0097BB5F           	mov.w	[sp+((0+f20226+2)-0)],w6
  3755  00F304  00E13007           	cp.w	w6, w7
  3756  00F306  003A0002           	bra	nz,u831
  3757  00F308  0004F310           	goto	u830
              00000000           
  3758  00F30C                     u831:
  3759  00F30C  0004F322           	goto	lab864
              00000000           
  3760  00F310                     u830:
  3761                           ;tasks.c: 2294: {
  3762                           
  3763                           ;tasks.c: 2298: vListInsertEnd( &xSuspendedTaskL
                                 ist, &( pxCurrentTCB->xGenericListItem ) );
  3764                           
  3765                           	line	2298
  3766  00F310  00208006           	mov.w	#_pxCurrentTCB,w6
  3767  00F312  00780116           	mov.w	[w6],w2
  3768  00F314  00B00022           	add.w	#2,w2
  3769  00F316  00208366           	mov.w	#_xSuspendedTaskList,w6
  3770  00F318  00780006           	mov.w	w6,w0
  3771  00F31A  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  3772                           ;tasks.c: 2299: }
  3773                           
  3774                           	line	2299
  3775  00F31E  0004F33A           	goto	lab865
              00000000           
  3776                           	line	2300
  3777  00F322                     lab864:
  3778                           ;tasks.c: 2300: else
  3779                           
  3780                           ;tasks.c: 2301: {
  3781                           
  3782                           ;tasks.c: 2305: xTimeToWake = xTickCount + xTick
                                 sToWait;
  3783                           
  3784                           	line	2305
  3785  00F322  00208146           	mov.w	#_xTickCount,w6
  3786  00F324  00780396           	mov.w	[w6],w7
  3787  00F326  002FFFA6           	mov.w	#((0+f20226+2)-0),w6
  3788  00F328  00478306           	add.w	sp,w6,w6
  3789  00F32A  00780316           	mov.w	[w6],w6
  3790  00F32C  00438386           	add.w	w7,w6,w7
  3791  00F32E  002FFF86           	mov.w	#((0+f20226+0)-0),w6
  3792  00F330  00478306           	add.w	sp,w6,w6
  3793  00F332  00780B07           	mov.w	w7,[w6]
  3794                           ;tasks.c: 2306: prvAddCurrentTaskToDelayedList( 
                                 xTimeToWake );
  3795                           
  3796                           	line	2306
  3797  00F334  0097B84F           	mov.w	[sp+((0+f20226+0)-0)],w0
  3798  00F336  0002F81E           	call	(_prvAddCurrentTaskToDelayedList)	;0 bytes
              00000000            adjustment
  3799                           	line	2307
  3800  00F33A                     lab865:
  3801                           ;tasks.c: 2307: }
  3802                           
  3803                           ;tasks.c: 2308: }
  3804                           
  3805                           ;tasks.c: 2318: }
  3806                           
  3807                           	line	2318
  3808  00F33A                     lab861:
  3809                           	global	_vTaskPlaceOnEventList
  3810                           
  3811  00F33A  00B1008F           	sub.w	#8,sp
  3812  00F33C  00060000           	return
  3813                           	line	2263
  3814                           
  3815  00F33E                     f20221:
  3816                           
  3817  00F33E  00B0008F           	add.w	#8,sp
  3818  00F340  0004F2CE           	goto	f20220
              00000000           
  3819  000000                     f20226	equ	-8		;stack offset for auto's
  3820  000000                     f20223	equ	-12		;stack offset for parameters
  3821                           	line	0
  3822                           	global	 __end_of_vTaskPlaceOnEventList
  3823  00F344                     __end_of_vTaskPlaceOnEventList:
  3824                           	global	_vTaskPlaceOnUnorderedEventList
  3825                           	signat	_vTaskPlaceOnUnorderedEventList,12346
  3826                           	line	2322
  3827  00F344                     _vTaskPlaceOnUnorderedEventList:
  3828  00F344  0004F3CA           	goto	f20241
              00000000           
  3829  00F348                     f20240:
  3830                           
  3831                           ;tasks.c: 2321: void vTaskPlaceOnUnorderedEventL
                                 ist( List_t * pxEventList, const TickType_t xIte
                                 mValue, const TickType_t xTicksToWait )
  3832                           
  3833                           ;tasks.c: 2322: {
  3834                           
  3835                           ;tasks.c: 2323: TickType_t xTimeToWake;
  3836                           
  3837                           ;tasks.c: 2325: ;
  3838                           
  3839                           ;tasks.c: 2329: ;
  3840                           
  3841                           ;tasks.c: 2334: ( ( &( pxCurrentTCB->xEventListI
                                 tem ) )->xItemValue = ( xItemValue | 0x8000U ) )
                                 ;
  3842                           
  3843                           	line	2334
  3844  00F348  00280007           	mov.w	#-32768,w7
  3845  00F34A  00780302           	mov.w	w2,w6
  3846  00F34C  00730307           	ior.w	w6,w7,w6
  3847  00F34E  00208007           	mov.w	#_pxCurrentTCB,w7
  3848  00F350  00780297           	mov	[w7],w5
  3849  00F352  009802E6           	mov.w	w6,[w5+12]
  3850                           ;tasks.c: 2341: vListInsertEnd( pxEventList, &( 
                                 pxCurrentTCB->xEventListItem ) );
  3851                           
  3852                           ;_xTicksToWait stored from w4
  3853                           	line	2341
  3854  00F354  002FFF86           	mov.w	#((0+f20246+2)-0),w6
  3855  00F356  00478306           	add.w	sp,w6,w6
  3856  00F358  00780B04           	mov.w	w4,[w6]
  3857                           ;_xItemValue stored from w2
  3858  00F35A  002FFFA6           	mov.w	#((0+f20246+4)-0),w6
  3859  00F35C  00478306           	add.w	sp,w6,w6
  3860  00F35E  00780B02           	mov.w	w2,[w6]
  3861                           ;_pxEventList stored from w0
  3862  00F360  002FFFC6           	mov.w	#((0+f20246+6)-0),w6
  3863  00F362  00478306           	add.w	sp,w6,w6
  3864  00F364  00780B00           	mov.w	w0,[w6]
  3865  00F366  00208006           	mov.w	#_pxCurrentTCB,w6
  3866  00F368  00780116           	mov.w	[w6],w2
  3867  00F36A  00B000C2           	add.w	#12,w2
  3868  00F36C  0097B86F           	mov.w	[sp+((0+f20246+6)-0)],w0
  3869  00F36E  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  3870                           ;tasks.c: 2346: if( uxListRemove( &( pxCurrentTC
                                 B->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  3871                           
  3872                           	line	2346
  3873  00F372  00208006           	mov.w	#_pxCurrentTCB,w6
  3874  00F374  00780016           	mov.w	[w6],w0
  3875  00F376  00B00020           	add.w	#2,w0
  3876  00F378  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  3877  00F37C  00E00000           	cp0.w	w0
  3878  00F37E  003A0002           	bra	nz,u841
  3879  00F380  0004F388           	goto	u840
              00000000           
  3880  00F384                     u841:
  3881  00F384  0004F38C           	goto	lab867
              00000000           
  3882  00F388                     u840:
  3883                           ;tasks.c: 2347: {
  3884                           
  3885                           ;tasks.c: 2350: ;
  3886                           
  3887                           ;tasks.c: 2351: }
  3888                           
  3889                           	line	2351
  3890  00F388  0004F38C           	goto	lab868
              00000000           
  3891                           	line	2352
  3892  00F38C                     lab867:
  3893                           ;tasks.c: 2352: else
  3894                           
  3895                           ;tasks.c: 2353: {
  3896                           
  3897                           ;tasks.c: 2354: ;
  3898                           
  3899                           	line	2355
  3900  00F38C                     lab868:
  3901                           ;tasks.c: 2355: }
  3902                           
  3903                           ;tasks.c: 2358: {
  3904                           
  3905                           ;tasks.c: 2359: if( xTicksToWait == ( TickType_t
                                  ) 0xffff )
  3906                           
  3907                           	line	2359
  3908  00F38C  002FFFF7           	mov.w	#-1,w7
  3909  00F38E  0097BB4F           	mov.w	[sp+((0+f20246+2)-0)],w6
  3910  00F390  00E13007           	cp.w	w6, w7
  3911  00F392  003A0002           	bra	nz,u851
  3912  00F394  0004F39C           	goto	u850
              00000000           
  3913  00F398                     u851:
  3914  00F398  0004F3AE           	goto	lab869
              00000000           
  3915  00F39C                     u850:
  3916                           ;tasks.c: 2360: {
  3917                           
  3918                           ;tasks.c: 2364: vListInsertEnd( &xSuspendedTaskL
                                 ist, &( pxCurrentTCB->xGenericListItem ) );
  3919                           
  3920                           	line	2364
  3921  00F39C  00208006           	mov.w	#_pxCurrentTCB,w6
  3922  00F39E  00780116           	mov.w	[w6],w2
  3923  00F3A0  00B00022           	add.w	#2,w2
  3924  00F3A2  00208366           	mov.w	#_xSuspendedTaskList,w6
  3925  00F3A4  00780006           	mov.w	w6,w0
  3926  00F3A6  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  3927                           ;tasks.c: 2365: }
  3928                           
  3929                           	line	2365
  3930  00F3AA  0004F3C6           	goto	lab870
              00000000           
  3931                           	line	2366
  3932  00F3AE                     lab869:
  3933                           ;tasks.c: 2366: else
  3934                           
  3935                           ;tasks.c: 2367: {
  3936                           
  3937                           ;tasks.c: 2371: xTimeToWake = xTickCount + xTick
                                 sToWait;
  3938                           
  3939                           	line	2371
  3940  00F3AE  00208146           	mov.w	#_xTickCount,w6
  3941  00F3B0  00780396           	mov.w	[w6],w7
  3942  00F3B2  002FFF86           	mov.w	#((0+f20246+2)-0),w6
  3943  00F3B4  00478306           	add.w	sp,w6,w6
  3944  00F3B6  00780316           	mov.w	[w6],w6
  3945  00F3B8  00438386           	add.w	w7,w6,w7
  3946  00F3BA  002FFF66           	mov.w	#((0+f20246+0)-0),w6
  3947  00F3BC  00478306           	add.w	sp,w6,w6
  3948  00F3BE  00780B07           	mov.w	w7,[w6]
  3949                           ;tasks.c: 2372: prvAddCurrentTaskToDelayedList( 
                                 xTimeToWake );
  3950                           
  3951                           	line	2372
  3952  00F3C0  0097B83F           	mov.w	[sp+((0+f20246+0)-0)],w0
  3953  00F3C2  0002F81E           	call	(_prvAddCurrentTaskToDelayedList)	;0 bytes
              00000000            adjustment
  3954                           	line	2373
  3955  00F3C6                     lab870:
  3956                           ;tasks.c: 2373: }
  3957                           
  3958                           ;tasks.c: 2374: }
  3959                           
  3960                           ;tasks.c: 2384: }
  3961                           
  3962                           	line	2384
  3963  00F3C6                     lab866:
  3964                           	global	_vTaskPlaceOnUnorderedEventList
  3965                           
  3966  00F3C6  00B100AF           	sub.w	#10,sp
  3967  00F3C8  00060000           	return
  3968                           	line	2322
  3969                           
  3970  00F3CA                     f20241:
  3971                           
  3972  00F3CA  00B000AF           	add.w	#10,sp
  3973  00F3CC  0004F348           	goto	f20240
              00000000           
  3974  000000                     f20246	equ	-10		;stack offset for auto's
  3975  000000                     f20243	equ	-14		;stack offset for parameters
  3976                           	line	0
  3977                           	global	 __end_of_vTaskPlaceOnUnorderedEventList
  3978  00F3D0                     __end_of_vTaskPlaceOnUnorderedEventList:
  3979                           	global	_xTaskRemoveFromEventList
  3980                           	signat	_xTaskRemoveFromEventList,4154
  3981                           	line	2434
  3982  00F3D0                     _xTaskRemoveFromEventList:
  3983  00F3D0  0004F486           	goto	f20251
              00000000           
  3984  00F3D4                     f20250:
  3985                           
  3986                           ;tasks.c: 2433: BaseType_t xTaskRemoveFromEventL
                                 ist( const List_t * const pxEventList )
  3987                           
  3988                           ;tasks.c: 2434: {
  3989                           
  3990                           ;tasks.c: 2435: TCB_t *pxUnblockedTCB;
  3991                           
  3992                           ;tasks.c: 2436: BaseType_t xReturn;
  3993                           
  3994                           ;tasks.c: 2451: pxUnblockedTCB = ( TCB_t * ) ( (
                                 &( ( pxEventList )->xListEnd ))->pxNext->pvOwner
                                  );
  3995                           
  3996                           	line	2451
  3997  00F3D4  00780300           	mov.w	w0,w6
  3998  00F3D6  00B00066           	add.w	#6,w6
  3999  00F3D8  00780396           	mov.w	[w6],w7
  4000  00F3DA  00B00067           	add.w	#6,w7
  4001  00F3DC  002FFF86           	mov.w	#((0+f20256+0)-0),w6
  4002  00F3DE  00478306           	add.w	sp,w6,w6
  4003  00F3E0  00780B17           	mov.w	[w7],[w6]
  4004                           ;tasks.c: 2452: ;
  4005                           
  4006                           ;tasks.c: 2453: ( void ) uxListRemove( &( pxUnbl
                                 ockedTCB->xEventListItem ) );
  4007                           
  4008                           ;_pxEventList stored from w0
  4009                           	line	2453
  4010  00F3E2  002FFFC6           	mov.w	#((0+f20256+4)-0),w6
  4011  00F3E4  00478306           	add.w	sp,w6,w6
  4012  00F3E6  00780B00           	mov.w	w0,[w6]
  4013  00F3E8  0097B84F           	mov.w	[sp+((0+f20256+0)-0)],w0
  4014  00F3EA  00B000C0           	add.w	#12,w0
  4015  00F3EC  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  4016                           ;tasks.c: 2455: if( uxSchedulerSuspended == ( UB
                                 aseType_t ) ( ( BaseType_t ) 0 ) )
  4017                           
  4018                           	line	2455
  4019  00F3F0  00E2080A           	cp0.w	_uxSchedulerSuspended
  4020  00F3F2  003A0002           	bra	nz,u861
  4021  00F3F4  0004F3FC           	goto	u860
              00000000           
  4022  00F3F8                     u861:
  4023  00F3F8  0004F43C           	goto	lab872
              00000000           
  4024  00F3FC                     u860:
  4025                           ;tasks.c: 2456: {
  4026                           
  4027                           ;tasks.c: 2457: ( void ) uxListRemove( &( pxUnbl
                                 ockedTCB->xGenericListItem ) );
  4028                           
  4029                           	line	2457
  4030  00F3FC  0097B84F           	mov.w	[sp+((0+f20256+0)-0)],w0
  4031  00F3FE  00B00020           	add.w	#2,w0
  4032  00F400  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  4033                           ;tasks.c: 2458: ; { if( ( ( pxUnblockedTCB )->ux
                                 Priority ) > uxTopReadyPriority ) { uxTopReadyPr
                                 iority = ( ( pxUnblockedTCB )->uxPriority ); } }
                                 ; vListInsertEnd( &( pxReadyTasksLists[ ( pxUnbl
                                 ockedTCB )->uxPriority ] ), &( ( pxUnblockedTCB 
                                 )->xGeneric...
  4034                           
  4035                           	line	2458
  4036  00F404  00804076           	mov	_uxTopReadyPriority,w6
  4037  00F406  0097BBCF           	mov.w	[sp+((0+f20256+0)-0)],w7
  4038  00F408  00B00167           	add.w	#22,w7
  4039  00F40A  00780297           	mov.w	[w7],w5
  4040  00F40C  00E12806           	cp.w	w5, w6
  4041  00F40E  00360002           	bra	leu,u871
  4042  00F410  0004F418           	goto	u870
              00000000           
  4043  00F414                     u871:
  4044  00F414  0004F420           	goto	lab873
              00000000           
  4045  00F418                     u870:
  4046  00F418  0097BBCF           	mov.w	[sp+((0+f20256+0)-0)],w7
  4047  00F41A  00B00167           	add.w	#22,w7
  4048  00F41C  00780317           	mov.w	[w7],w6
  4049  00F41E  00884076           	mov	w6,_uxTopReadyPriority
  4050  00F420                     lab873:
  4051  00F420  0097B94F           	mov.w	[sp+((0+f20256+0)-0)],w2
  4052  00F422  00B00022           	add.w	#2,w2
  4053  00F424  00208406           	mov	#_pxReadyTasksLists,w6
  4054  00F426  002000A4           	mov.w	#0Ah,w4
  4055  00F428  0097BBCF           	mov.w	[sp+((0+f20256+0)-0)],w7
  4056  00F42A  00B00167           	add.w	#22,w7
  4057  00F42C  00780297           	mov.w	[w7],w5
  4058  00F42E  00780005           	mov.w	w5,w0
  4059  00F430  00B80004           	mul.uu	w0,w4,w0
  4060  00F432  00400006           	add.w	w0,w6,w0
  4061  00F434  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  4062                           ;tasks.c: 2459: }
  4063                           
  4064                           	line	2459
  4065  00F438  0004F448           	goto	lab874
              00000000           
  4066                           	line	2460
  4067  00F43C                     lab872:
  4068                           ;tasks.c: 2460: else
  4069                           
  4070                           ;tasks.c: 2461: {
  4071                           
  4072                           ;tasks.c: 2464: vListInsertEnd( &( xPendingReady
                                 List ), &( pxUnblockedTCB->xEventListItem ) );
  4073                           
  4074                           	line	2464
  4075  00F43C  0097B94F           	mov.w	[sp+((0+f20256+0)-0)],w2
  4076  00F43E  00B000C2           	add.w	#12,w2
  4077  00F440  002082C6           	mov.w	#_xPendingReadyList,w6
  4078  00F442  00780006           	mov.w	w6,w0
  4079  00F444  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  4080                           	line	2465
  4081  00F448                     lab874:
  4082                           ;tasks.c: 2465: }
  4083                           
  4084                           ;tasks.c: 2467: if( pxUnblockedTCB->uxPriority >
                                  pxCurrentTCB->uxPriority )
  4085                           
  4086                           	line	2467
  4087  00F448  00208006           	mov.w	#_pxCurrentTCB,w6
  4088  00F44A  00780316           	mov.w	[w6],w6
  4089  00F44C  00B00166           	add.w	#22,w6
  4090  00F44E  00780396           	mov.w	[w6],w7
  4091  00F450  0097BACF           	mov.w	[sp+((0+f20256+0)-0)],w5
  4092  00F452  00B00165           	add.w	#22,w5
  4093  00F454  00780315           	mov.w	[w5],w6
  4094  00F456  00E13007           	cp.w	w6, w7
  4095  00F458  00360002           	bra	leu,u881
  4096  00F45A  0004F462           	goto	u880
              00000000           
  4097  00F45E                     u881:
  4098  00F45E  0004F472           	goto	lab875
              00000000           
  4099  00F462                     u880:
  4100                           ;tasks.c: 2468: {
  4101                           
  4102                           ;tasks.c: 2472: xReturn = ( ( BaseType_t ) 1 );
  4103                           
  4104                           	line	2472
  4105  00F462  00200017           	mov.w	#01h,w7
  4106  00F464  002FFFA6           	mov.w	#((0+f20256+2)-0),w6
  4107  00F466  00478306           	add.w	sp,w6,w6
  4108  00F468  00780B07           	mov.w	w7,[w6]
  4109                           ;tasks.c: 2476: xYieldPending = ( ( BaseType_t )
                                  1 );
  4110                           
  4111                           	line	2476
  4112  00F46A  00200016           	mov.w	#01h,w6
  4113  00F46C  008840B6           	mov	w6,_xYieldPending
  4114                           ;tasks.c: 2477: }
  4115                           
  4116                           	line	2477
  4117  00F46E  0004F47A           	goto	lab876
              00000000           
  4118                           	line	2478
  4119  00F472                     lab875:
  4120                           ;tasks.c: 2478: else
  4121                           
  4122                           ;tasks.c: 2479: {
  4123                           
  4124                           ;tasks.c: 2480: xReturn = ( ( BaseType_t ) 0 );
  4125                           
  4126                           	line	2480
  4127  00F472  00200007           	mov.w	#0,w7
  4128  00F474  002FFFA6           	mov.w	#((0+f20256+2)-0),w6
  4129  00F476  00478306           	add.w	sp,w6,w6
  4130  00F478  00780B07           	mov.w	w7,[w6]
  4131                           	line	2481
  4132  00F47A                     lab876:
  4133                           ;tasks.c: 2481: }
  4134                           
  4135                           ;tasks.c: 2497: return xReturn;
  4136                           
  4137                           	line	2497
  4138  00F47A  0097B85F           	mov.w	[sp+((0+f20256+2)-0)], w0
  4139  00F47C  00780000           	mov.w	w0,w0
  4140  00F47E  0004F482           	goto	lab871
              00000000           
  4141                           ;tasks.c: 2498: }
  4142                           
  4143                           	line	2498
  4144  00F482                     lab871:
  4145                           	global	_xTaskRemoveFromEventList
  4146                           
  4147  00F482  00B1008F           	sub.w	#8,sp
  4148  00F484  00060000           	return
  4149                           	line	2434
  4150                           
  4151  00F486                     f20251:
  4152                           
  4153  00F486  00B0008F           	add.w	#8,sp
  4154  00F488  0004F3D4           	goto	f20250
              00000000           
  4155  000000                     f20256	equ	-8		;stack offset for auto's
  4156  000000                     f20253	equ	-12		;stack offset for parameters
  4157                           	line	0
  4158                           	global	 __end_of_xTaskRemoveFromEventList
  4159  00F48C                     __end_of_xTaskRemoveFromEventList:
  4160                           	global	_xTaskRemoveFromUnorderedEventList
  4161                           	signat	_xTaskRemoveFromUnorderedEventList,8250
  4162                           	line	2502
  4163  00F48C                     _xTaskRemoveFromUnorderedEventList:
  4164  00F48C  0004F52E           	goto	f20261
              00000000           
  4165  00F490                     f20260:
  4166                           
  4167                           ;tasks.c: 2501: BaseType_t xTaskRemoveFromUnorde
                                 redEventList( ListItem_t * pxEventListItem, cons
                                 t TickType_t xItemValue )
  4168                           
  4169                           ;tasks.c: 2502: {
  4170                           
  4171                           ;tasks.c: 2503: TCB_t *pxUnblockedTCB;
  4172                           
  4173                           ;tasks.c: 2504: BaseType_t xReturn;
  4174                           
  4175                           ;tasks.c: 2508: ;
  4176                           
  4177                           ;tasks.c: 2511: ( ( pxEventListItem )->xItemValu
                                 e = ( xItemValue | 0x8000U ) );
  4178                           
  4179                           	line	2511
  4180  00F490  00280007           	mov.w	#-32768,w7
  4181  00F492  00780302           	mov.w	w2,w6
  4182  00F494  00730307           	ior.w	w6,w7,w6
  4183  00F496  00780806           	mov.w	w6,[w0]
  4184                           ;tasks.c: 2515: pxUnblockedTCB = ( TCB_t * ) ( (
                                  pxEventListItem )->pvOwner );
  4185                           
  4186                           	line	2515
  4187  00F498  00780380           	mov.w	w0,w7
  4188  00F49A  00B00067           	add.w	#6,w7
  4189  00F49C  002FFF66           	mov.w	#((0+f20266+0)-0),w6
  4190  00F49E  00478306           	add.w	sp,w6,w6
  4191  00F4A0  00780B17           	mov.w	[w7],[w6]
  4192                           ;tasks.c: 2516: ;
  4193                           
  4194                           ;tasks.c: 2517: ( void ) uxListRemove( pxEventLi
                                 stItem );
  4195                           
  4196                           ;_xItemValue stored from w2
  4197                           	line	2517
  4198  00F4A2  002FFFA6           	mov.w	#((0+f20266+4)-0),w6
  4199  00F4A4  00478306           	add.w	sp,w6,w6
  4200  00F4A6  00780B02           	mov.w	w2,[w6]
  4201                           ;_pxEventListItem stored from w0
  4202  00F4A8  002FFFC6           	mov.w	#((0+f20266+6)-0),w6
  4203  00F4AA  00478306           	add.w	sp,w6,w6
  4204  00F4AC  00780B00           	mov.w	w0,[w6]
  4205  00F4AE  0097B86F           	mov.w	[sp+((0+f20266+6)-0)],w0
  4206  00F4B0  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  4207                           ;tasks.c: 2522: ( void ) uxListRemove( &( pxUnbl
                                 ockedTCB->xGenericListItem ) );
  4208                           
  4209                           	line	2522
  4210  00F4B4  0097B83F           	mov.w	[sp+((0+f20266+0)-0)],w0
  4211  00F4B6  00B00020           	add.w	#2,w0
  4212  00F4B8  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  4213                           ;tasks.c: 2523: ; { if( ( ( pxUnblockedTCB )->ux
                                 Priority ) > uxTopReadyPriority ) { uxTopReadyPr
                                 iority = ( ( pxUnblockedTCB )->uxPriority ); } }
                                 ; vListInsertEnd( &( pxReadyTasksLists[ ( pxUnbl
                                 ockedTCB )->uxPriority ] ), &( ( pxUnblockedTCB 
                                 )->xGeneric...
  4214                           
  4215                           	line	2523
  4216  00F4BC  00804076           	mov	_uxTopReadyPriority,w6
  4217  00F4BE  0097BBBF           	mov.w	[sp+((0+f20266+0)-0)],w7
  4218  00F4C0  00B00167           	add.w	#22,w7
  4219  00F4C2  00780297           	mov.w	[w7],w5
  4220  00F4C4  00E12806           	cp.w	w5, w6
  4221  00F4C6  00360002           	bra	leu,u891
  4222  00F4C8  0004F4D0           	goto	u890
              00000000           
  4223  00F4CC                     u891:
  4224  00F4CC  0004F4D8           	goto	lab878
              00000000           
  4225  00F4D0                     u890:
  4226  00F4D0  0097BBBF           	mov.w	[sp+((0+f20266+0)-0)],w7
  4227  00F4D2  00B00167           	add.w	#22,w7
  4228  00F4D4  00780317           	mov.w	[w7],w6
  4229  00F4D6  00884076           	mov	w6,_uxTopReadyPriority
  4230  00F4D8                     lab878:
  4231  00F4D8  0097B93F           	mov.w	[sp+((0+f20266+0)-0)],w2
  4232  00F4DA  00B00022           	add.w	#2,w2
  4233  00F4DC  00208406           	mov	#_pxReadyTasksLists,w6
  4234  00F4DE  002000A4           	mov.w	#0Ah,w4
  4235  00F4E0  0097BBBF           	mov.w	[sp+((0+f20266+0)-0)],w7
  4236  00F4E2  00B00167           	add.w	#22,w7
  4237  00F4E4  00780297           	mov.w	[w7],w5
  4238  00F4E6  00780005           	mov.w	w5,w0
  4239  00F4E8  00B80004           	mul.uu	w0,w4,w0
  4240  00F4EA  00400006           	add.w	w0,w6,w0
  4241  00F4EC  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  4242                           ;tasks.c: 2525: if( pxUnblockedTCB->uxPriority >
                                  pxCurrentTCB->uxPriority )
  4243                           
  4244                           	line	2525
  4245  00F4F0  00208006           	mov.w	#_pxCurrentTCB,w6
  4246  00F4F2  00780316           	mov.w	[w6],w6
  4247  00F4F4  00B00166           	add.w	#22,w6
  4248  00F4F6  00780396           	mov.w	[w6],w7
  4249  00F4F8  0097BABF           	mov.w	[sp+((0+f20266+0)-0)],w5
  4250  00F4FA  00B00165           	add.w	#22,w5
  4251  00F4FC  00780315           	mov.w	[w5],w6
  4252  00F4FE  00E13007           	cp.w	w6, w7
  4253  00F500  00360002           	bra	leu,u901
  4254  00F502  0004F50A           	goto	u900
              00000000           
  4255  00F506                     u901:
  4256  00F506  0004F51A           	goto	lab879
              00000000           
  4257  00F50A                     u900:
  4258                           ;tasks.c: 2526: {
  4259                           
  4260                           ;tasks.c: 2531: xReturn = ( ( BaseType_t ) 1 );
  4261                           
  4262                           	line	2531
  4263  00F50A  00200017           	mov.w	#01h,w7
  4264  00F50C  002FFF86           	mov.w	#((0+f20266+2)-0),w6
  4265  00F50E  00478306           	add.w	sp,w6,w6
  4266  00F510  00780B07           	mov.w	w7,[w6]
  4267                           ;tasks.c: 2535: xYieldPending = ( ( BaseType_t )
                                  1 );
  4268                           
  4269                           	line	2535
  4270  00F512  00200016           	mov.w	#01h,w6
  4271  00F514  008840B6           	mov	w6,_xYieldPending
  4272                           ;tasks.c: 2536: }
  4273                           
  4274                           	line	2536
  4275  00F516  0004F522           	goto	lab880
              00000000           
  4276                           	line	2537
  4277  00F51A                     lab879:
  4278                           ;tasks.c: 2537: else
  4279                           
  4280                           ;tasks.c: 2538: {
  4281                           
  4282                           ;tasks.c: 2539: xReturn = ( ( BaseType_t ) 0 );
  4283                           
  4284                           	line	2539
  4285  00F51A  00200007           	mov.w	#0,w7
  4286  00F51C  002FFF86           	mov.w	#((0+f20266+2)-0),w6
  4287  00F51E  00478306           	add.w	sp,w6,w6
  4288  00F520  00780B07           	mov.w	w7,[w6]
  4289                           	line	2540
  4290  00F522                     lab880:
  4291                           ;tasks.c: 2540: }
  4292                           
  4293                           ;tasks.c: 2542: return xReturn;
  4294                           
  4295                           	line	2542
  4296  00F522  0097B84F           	mov.w	[sp+((0+f20266+2)-0)], w0
  4297  00F524  00780000           	mov.w	w0,w0
  4298  00F526  0004F52A           	goto	lab877
              00000000           
  4299                           ;tasks.c: 2543: }
  4300                           
  4301                           	line	2543
  4302  00F52A                     lab877:
  4303                           	global	_xTaskRemoveFromUnorderedEventList
  4304                           
  4305  00F52A  00B100AF           	sub.w	#10,sp
  4306+ 00F52C  00060000           	return
  4307+                          	line	2502
  4308+                          
  4309+ 00F52E                     f20261:
  4310+                          
  4311+ 00F52E  00B000AF           	add.w	#10,sp
  4312+ 00F530  0004F490           	goto	f20260
      +       00000000           
  4313+ 000000                     f20266	equ	-10		;stack offset for auto's
  4314+ 000000                     f20263	equ	-14		;stack offset for parameters
  4315+                          	line	0
  4316+                          	global	 __end_of_xTaskRemoveFromUnorderedEventL
      +                          ist
  4317+ 00F534                     __end_of_xTaskRemoveFromUnorderedEventList:
  4318+                          	global	_vTaskSetTimeOutState
  4319+                          	signat	_vTaskSetTimeOutState,4154
  4320+                          	line	2547
  4321+ 00F534                     _vTaskSetTimeOutState:
  4322+ 00F534  0004F546           	goto	f20271
      +       00000000           
  4323+ 00F538                     f20270:
  4324+                          
  4325+                          ;tasks.c: 2546: void vTaskSetTimeOutState( TimeO
      +                          ut_t * const pxTimeOut )
  4326+                          
  4327+                          ;tasks.c: 2547: {
  4328+                          
  4329+                          ;tasks.c: 2548: ;
  4330+                          
  4331+                          ;tasks.c: 2549: pxTimeOut->xOverflowCount = xNum
      +                          OfOverflows;
  4332+                          
  4333+                          	line	2549
  4334+ 00F538  00804086           	mov	_xNumOfOverflows,w6
  4335+ 00F53A  00780806           	mov.w	w6,[w0]
  4336+                          ;tasks.c: 2550: pxTimeOut->xTimeOnEntering = xTi
      +                          ckCount;
  4337+                          
  4338+                          	line	2550
  4339+ 00F53C  008040A6           	mov	_xTickCount,w6
  4340+ 00F53E  00200027           	mov	#2, w7
  4341+ 00F540  00400387           	add	w0, w7, w7
  4342+ 00F542  00780B86           	mov.w	w6,[w7]
  4343+                          ;tasks.c: 2551: }
  4344+                          
  4345+                          	line	2551
  4346+ 00F544                     lab881:
  4347+                          	global	_vTaskSetTimeOutState
  4348+ 00F544  00060000           	return
  4349+                          	line	2547
  4350+                          
  4351+ 00F546                     f20271:
  4352+ 00F546  0004F538           	goto	f20270
      +       00000000           
  4353+ 000000                     f20276	equ	0		;stack offset for auto's
  4354+ 000000                     f20273	equ	-4		;stack offset for parameters
  4355+                          	line	0
  4356+                          	global	 __end_of_vTaskSetTimeOutState
  4357+ 00F54A                     __end_of_vTaskSetTimeOutState:
  4358+                          	global	_xTaskCheckForTimeOut
  4359+                          	signat	_xTaskCheckForTimeOut,8250
  4360+                          	line	2555
  4361+ 00F54A                     _xTaskCheckForTimeOut:
  4362+ 00F54A  0004F618           	goto	f20281
      +       00000000           
  4363+ 00F54E                     f20280:
  4364+                          
  4365+                          ;tasks.c: 2554: BaseType_t xTaskCheckForTimeOut(
      +                           TimeOut_t * const pxTimeOut, TickType_t * const
      +                           pxTicksToWait )
  4366+                          
  4367+                          ;tasks.c: 2555: {
  4368+                          
  4369+                          ;tasks.c: 2556: BaseType_t xReturn;
  4370+                          
  4371+                          ;tasks.c: 2558: ;
  4372+                          
  4373+                          ;tasks.c: 2559: ;
  4374+                          
  4375+                          ;tasks.c: 2561: vPortEnterCritical();
  4376+                          
  4377+                          ;_pxTicksToWait stored from w2
  4378+                          	line	2561
  4379+ 00F54E  002FFF86           	mov.w	#((0+f20286+2)-0),w6
  4380+ 00F550  00478306           	add.w	sp,w6,w6
  4381+ 00F552  00780B02           	mov.w	w2,[w6]
  4382+                          ;_pxTimeOut stored from w0
  4383+ 00F554  002FFFA6           	mov.w	#((0+f20286+4)-0),w6
  4384+ 00F556  00478306           	add.w	sp,w6,w6
  4385+ 00F558  00780B00           	mov.w	w0,[w6]
  4386+ 00F55A  0002CA10           	call	(_vPortEnterCritical)
      +       00000000           
  4387+                          ;tasks.c: 2562: {
  4388+                          
  4389+                          ;tasks.c: 2564: const TickType_t xConstTickCount
      +                           = xTickCount;
  4390+                          
  4391+                          	line	2564
  4392+ 00F55E  008040A7           	mov	_xTickCount,w7
  4393+ 00F560  002FFFC6           	mov.w	#((0+f20286+6)-0),w6
  4394+ 00F562  00478306           	add.w	sp,w6,w6
  4395+ 00F564  00780B07           	mov.w	w7,[w6]
  4396+                          ;tasks.c: 2570: if( *pxTicksToWait == ( TickType
      +                          _t ) 0xffff )
  4397+                          
  4398+                          	line	2570
  4399+ 00F566  002FFFF6           	mov.w	#-1,w6
  4400+ 00F568  0097BBCF           	mov.w	[sp+((0+f20286+2)-0)],w7
  4401+ 00F56A  00780297           	mov.w	[w7],w5
  4402+ 00F56C  00E12806           	cp.w	w5, w6
  4403+ 00F56E  003A0002           	bra	nz,u911
  4404+ 00F570  0004F578           	goto	u910
      +       00000000           
  4405+ 00F574                     u911:
  4406+ 00F574  0004F584           	goto	lab883
      +       00000000           
  4407+ 00F578                     u910:
  4408+                          ;tasks.c: 2571: {
  4409+                          
  4410+                          ;tasks.c: 2572: xReturn = ( ( BaseType_t ) 0 );
  4411+                          
  4412+                          	line	2572
  4413+ 00F578  00200007           	mov.w	#0,w7
  4414+ 00F57A  002FFF66           	mov.w	#((0+f20286+0)-0),w6
  4415+ 00F57C  00478306           	add.w	sp,w6,w6
  4416+ 00F57E  00780B07           	mov.w	w7,[w6]
  4417+                          ;tasks.c: 2573: }
  4418+                          
  4419+                          	line	2573
  4420+ 00F580  0004F608           	goto	lab884
      +       00000000           
  4421+                          	line	2574
  4422+ 00F584                     lab883:
  4423+                          ;tasks.c: 2574: else
  4424+                          
  4425+                          ;tasks.c: 2577: if( ( xNumOfOverflows != pxTimeO
      +                          ut->xOverflowCount ) && ( xConstTickCount >= pxT
      +                          imeOut->xTimeOnEntering ) )
  4426+                          
  4427+                          	line	2577
  4428+ 00F584  00208106           	mov.w	#_xNumOfOverflows,w6
  4429+ 00F586  00780316           	mov.w	[w6],w6
  4430+ 00F588  0097BBDF           	mov.w	[sp+((0+f20286+4)-0)],w7
  4431+ 00F58A  00780297           	mov.w	[w7],w5
  4432+ 00F58C  00E12806           	cp.w	w5, w6
  4433+ 00F58E  0032000E           	bra	z,u921
  4434+ 00F590  0004F594           	goto	u920
      +       00000000           
  4435+ 00F594                     u920:
  4436+ 00F594  0097BB5F           	mov.w	[sp+((0+f20286+4)-0)],w6
  4437+ 00F596  00B00026           	add.w	#2,w6
  4438+ 00F598  00780396           	mov.w	[w6],w7
  4439+ 00F59A  002FFFC6           	mov.w	#((0+f20286+6)-0),w6
  4440+ 00F59C  00478306           	add.w	sp,w6,w6
  4441+ 00F59E  00780316           	mov.w	[w6],w6
  4442+ 00F5A0  00E13007           	cp.w	w6, w7
  4443+ 00F5A2  00390004           	bra	ltu,u931
  4444+ 00F5A4  0004F5A8           	goto	u930
      +       00000000           
  4445+ 00F5A8                     u930:
  4446+ 00F5A8  0004F5B4           	goto	u940
      +       00000000           
  4447+ 00F5AC                     u921:
  4448+ 00F5AC                     u931:
  4449+ 00F5AC  0004F5B0           	goto	u941
      +       00000000           
  4450+ 00F5B0                     u941:
  4451+ 00F5B0  0004F5C0           	goto	lab885
      +       00000000           
  4452+ 00F5B4                     u940:
  4453+                          ;tasks.c: 2578: {
  4454+                          
  4455+                          ;tasks.c: 2583: xReturn = ( ( BaseType_t ) 1 );
  4456+                          
  4457+                          	line	2583
  4458+ 00F5B4  00200017           	mov.w	#01h,w7
  4459+ 00F5B6  002FFF66           	mov.w	#((0+f20286+0)-0),w6
  4460+ 00F5B8  00478306           	add.w	sp,w6,w6
  4461+ 00F5BA  00780B07           	mov.w	w7,[w6]
  4462+                          ;tasks.c: 2584: }
  4463+                          
  4464+                          	line	2584
  4465+ 00F5BC  0004F608           	goto	lab886
      +       00000000           
  4466+                          	line	2585
  4467+ 00F5C0                     lab885:
  4468+                          ;tasks.c: 2585: else if( ( xConstTickCount - pxT
      +                          imeOut->xTimeOnEntering ) < *pxTicksToWait )
  4469+                          
  4470+ 00F5C0  0097BBCF           	mov.w	[sp+((0+f20286+2)-0)],w7
  4471+ 00F5C2  00780317           	mov.w	[w7],w6
  4472+ 00F5C4  0097BBDF           	mov.w	[sp+((0+f20286+4)-0)],w7
  4473+ 00F5C6  00B00027           	add.w	#2,w7
  4474+ 00F5C8  00780297           	mov.w	[w7],w5
  4475+ 00F5CA  0097BBEF           	mov.w	[sp+((0+f20286+6)-0)],w7
  4476+ 00F5CC  00538385           	sub.w	w7,w5,w7
  4477+ 00F5CE  00E13806           	cp.w	w7, w6
  4478+ 00F5D0  00310002           	bra	geu,u951
  4479+ 00F5D2  0004F5DA           	goto	u950
      +       00000000           
  4480+ 00F5D6                     u951:
  4481+ 00F5D6  0004F600           	goto	lab887
      +       00000000           
  4482+ 00F5DA                     u950:
  4483+                          ;tasks.c: 2586: {
  4484+                          
  4485+                          ;tasks.c: 2588: *pxTicksToWait -= ( xConstTickCo
      +                          unt - pxTimeOut->xTimeOnEntering );
  4486+                          
  4487+                          	line	2588
  4488+ 00F5DA  0097BBDF           	mov.w	[sp+((0+f20286+4)-0)],w7
  4489+ 00F5DC  00B00027           	add.w	#2,w7
  4490+ 00F5DE  00780317           	mov.w	[w7],w6
  4491+ 00F5E0  0097BBEF           	mov.w	[sp+((0+f20286+6)-0)],w7
  4492+ 00F5E2  00538386           	sub.w	w7,w6,w7
  4493+ 00F5E4  002FFF86           	mov.w	#((0+f20286+2)-0),w6
  4494+ 00F5E6  00478306           	add.w	sp,w6,w6
  4495+ 00F5E8  00780316           	mov.w	[w6],w6
  4496+ 00F5EA  00780296           	mov.w	[w6],w5
  4497+ 00F5EC  00528B07           	sub.w	w5,w7,[w6]
  4498+                          ;tasks.c: 2589: vTaskSetTimeOutState( pxTimeOut 
      +                          );
  4499+                          
  4500+                          	line	2589
  4501+ 00F5EE  0097B85F           	mov.w	[sp+((0+f20286+4)-0)],w0
  4502+ 00F5F0  0002F534           	call	(_vTaskSetTimeOutState)	;0 bytes adjustmen
      +       00000000           t
  4503+                          ;tasks.c: 2590: xReturn = ( ( BaseType_t ) 0 );
  4504+                          
  4505+                          	line	2590
  4506+ 00F5F4  00200007           	mov.w	#0,w7
  4507+ 00F5F6  002FFF66           	mov.w	#((0+f20286+0)-0),w6
  4508+ 00F5F8  00478306           	add.w	sp,w6,w6
  4509+ 00F5FA  00780B07           	mov.w	w7,[w6]
  4510+                          ;tasks.c: 2591: }
  4511+                          
  4512+                          	line	2591
  4513+ 00F5FC  0004F608           	goto	lab888
      +       00000000           
  4514+                          	line	2592
  4515+ 00F600                     lab887:
  4516+                          ;tasks.c: 2592: else
  4517+                          
  4518+                          ;tasks.c: 2593: {
  4519+                          
  4520+                          ;tasks.c: 2594: xReturn = ( ( BaseType_t ) 1 );
  4521+                          
  4522+                          	line	2594
  4523+ 00F600  00200017           	mov.w	#01h,w7
  4524+ 00F602  002FFF66           	mov.w	#((0+f20286+0)-0),w6
  4525+ 00F604  00478306           	add.w	sp,w6,w6
  4526+ 00F606  00780B07           	mov.w	w7,[w6]
  4527+                          	line	2595
  4528+ 00F608                     lab888:
  4529+ 00F608                     lab886:
  4530+ 00F608                     lab884:
  4531+                          ;tasks.c: 2595: }
  4532+                          
  4533+                          ;tasks.c: 2596: }
  4534+                          
  4535+                          ;tasks.c: 2597: vPortExitCritical();
  4536+                          
  4537+                          	line	2597
  4538+ 00F608  0002CA22           	call	(_vPortExitCritical)
      +       00000000           
  4539+                          ;tasks.c: 2599: return xReturn;
  4540+                          
  4541+                          	line	2599
  4542+ 00F60C  0097B83F           	mov.w	[sp+((0+f20286+0)-0)], w0
  4543+ 00F60E  00780000           	mov.w	w0,w0
  4544+ 00F610  0004F614           	goto	lab882
      +       00000000           
  4545+                          ;tasks.c: 2600: }
  4546+                          
  4547+                          	line	2600
  4548+ 00F614                     lab882:
  4549+                          	global	_xTaskCheckForTimeOut
  4550+                          
  4551+ 00F614  00B100AF           	sub.w	#10,sp
  4552+ 00F616  00060000           	return
  4553+                          	line	2555
  4554+                          
  4555+ 00F618                     f20281:
  4556+                          
  4557+ 00F618  00B000AF           	add.w	#10,sp
  4558+ 00F61A  0004F54E           	goto	f20280
      +       00000000           
  4559+ 000000                     f20286	equ	-10		;stack offset for auto's
  4560+ 000000                     f20283	equ	-14		;stack offset for parameters
  4561+                          	line	0
  4562+                          	global	 __end_of_xTaskCheckForTimeOut
  4563+ 00F61E                     __end_of_xTaskCheckForTimeOut:
  4564+                          	global	_vTaskMissedYield
  4565+                          	signat	_vTaskMissedYield,26
  4566+                          	line	2604
  4567+ 00F61E                     _vTaskMissedYield:
  4568+ 00F61E  0004F628           	goto	f20291
      +       00000000           
  4569+ 00F622                     f20290:
  4570+                          
  4571+                          ;tasks.c: 2603: void vTaskMissedYield( void )
  4572+                          
  4573+                          ;tasks.c: 2604: {
  4574+                          
  4575+                          ;tasks.c: 2605: xYieldPending = ( ( BaseType_t )
      +                           1 );
  4576+                          
  4577+                          	line	2605
  4578+ 00F622  00200016           	mov.w	#01h,w6
  4579+ 00F624  008840B6           	mov	w6,_xYieldPending
  4580+                          ;tasks.c: 2606: }
  4581+                          
  4582+                          	line	2606
  4583+ 00F626                     lab889:
  4584+                          	global	_vTaskMissedYield
  4585+ 00F626  00060000           	return
  4586+                          	line	2604
  4587+                          
  4588+ 00F628                     f20291:
  4589+ 00F628  0004F622           	goto	f20290
      +       00000000           
  4590+ 000000                     f20296	equ	0		;stack offset for auto's
  4591+ 000000                     f20293	equ	-4		;stack offset for parameters
  4592+                          	line	0
  4593+                          	global	 __end_of_vTaskMissedYield
  4594+ 00F62C                     __end_of_vTaskMissedYield:
  4595+                          	line	2659
  4596+ 00F62C                     _prvIdleTask:
  4597+ 00F62C  0004F65E           	goto	f20301
      +       00000000           
  4598+ 00F630                     f20300:
  4599+                          
  4600+                          ;tasks.c: 2658: void prvIdleTask( void *pvParame
      +                          ters )
  4601+                          
  4602+                          ;tasks.c: 2659: {
  4603+                          
  4604+                          ;tasks.c: 2661: ( void ) pvParameters;
  4605+                          
  4606+                          ;tasks.c: 2663: for( ;; )
  4607+                          
  4608+                          ;_pvParameters stored from w0
  4609+                          	line	2664
  4610+ 00F630  002FFFC6           	mov.w	#((0+f20306+0)-0),w6
  4611+ 00F632  00478306           	add.w	sp,w6,w6
  4612+ 00F634  00780B00           	mov.w	w0,[w6]
  4613+ 00F636                     lab891:
  4614+                          ;tasks.c: 2664: {
  4615+                          
  4616+                          ;tasks.c: 2666: prvCheckTasksWaitingTermination(
      +                          );
  4617+                          
  4618+                          	global	_prvCheckTasksWaitingTermination
  4619+                          	signat	_prvCheckTasksWaitingTermination,26
  4620+                          	line	2666
  4621+ 00F636  0002F814           	call	(_prvCheckTasksWaitingTermination)
      +       00000000           
  4622+                          ;tasks.c: 2679: {
  4623+                          
  4624+                          ;tasks.c: 2689: if( ( ( &( pxReadyTasksLists[ ( 
      +                          ( UBaseType_t ) 0U ) ] ) )->uxNumberOfItems ) > 
      +                          ( UBaseType_t ) 1 )
  4625+                          
  4626+                          	line	2689
  4627+ 00F63A  00200017           	mov.w	#01h,w7
  4628+ 00F63C  00804206           	mov	_pxReadyTasksLists,w6
  4629+ 00F63E  00E13007           	cp.w	w6, w7
  4630+ 00F640  00360002           	bra	leu,u961
  4631+ 00F642  0004F64A           	goto	u960
      +       00000000           
  4632+ 00F646                     u961:
  4633+ 00F646  0004F652           	goto	lab894
      +       00000000           
  4634+ 00F64A                     u960:
  4635+                          ;tasks.c: 2690: {
  4636+                          
  4637+                          ;tasks.c: 2691: vPortYield();
  4638+                          
  4639+                          	line	2691
  4640+ 00F64A  0002C410           	call	(_vPortYield)
      +       00000000           
  4641+                          ;tasks.c: 2692: }
  4642+                          
  4643+                          	line	2692
  4644+ 00F64E  0004F652           	goto	lab895
      +       00000000           
  4645+                          	line	2693
  4646+ 00F652                     lab894:
  4647+                          ;tasks.c: 2693: else
  4648+                          
  4649+                          ;tasks.c: 2694: {
  4650+                          
  4651+                          ;tasks.c: 2695: ;
  4652+                          
  4653+                          	line	2696
  4654+ 00F652                     lab895:
  4655+                          ;tasks.c: 2696: }
  4656+                          
  4657+                          ;tasks.c: 2697: }
  4658+                          
  4659+                          ;tasks.c: 2701: {
  4660+                          
  4661+                          ;tasks.c: 2702: extern void vApplicationIdleHook
      +                          ( void );
  4662+                          
  4663+                          ;tasks.c: 2709: vApplicationIdleHook();
  4664+                          
  4665+                          	global	_vApplicationIdleHook
  4666+                          	signat	_vApplicationIdleHook,26
  4667+                          	line	2709
  4668+ 00F652  0002C5E0           	call	(_vApplicationIdleHook)
      +       00000000           
  4669+                          ;tasks.c: 2710: }
  4670+                          
  4671+                          ;tasks.c: 2757: }
  4672+                          
  4673+                          	line	2757
  4674+ 00F656  0004F636           	goto	lab891
      +       00000000           
  4675+ 00F65A                     lab892:
  4676+                          ;tasks.c: 2758: }
  4677+                          
  4678+                          	line	2758
  4679+ 00F65A                     lab890:
  4680+                          	global	_prvIdleTask
  4681+                          
  4682+ 00F65A  00B1004F           	sub.w	#4,sp
  4683+ 00F65C  00060000           	return
  4684+                          	line	2659
  4685+                          
  4686+ 00F65E                     f20301:
  4687+                          
  4688+ 00F65E  00B0004F           	add.w	#4,sp
  4689+ 00F660  0004F630           	goto	f20300
      +       00000000           
  4690+ 000000                     f20306	equ	-4		;stack offset for auto's
  4691+ 000000                     f20303	equ	-8		;stack offset for parameters
  4692+                          	line	0
  4693+                          	global	 __end_of_prvIdleTask
  4694+ 00F664                     __end_of_prvIdleTask:
  4695+                          	line	2806
  4696+ 00F664                     _prvInitialiseTCBVariables:
  4697+ 00F664  0004F78A           	goto	f20331
      +       00000000           
  4698+ 00F668                     f20330:
  4699+                          
  4700+                          ;tasks.c: 2805: void prvInitialiseTCBVariables( 
      +                          TCB_t * const pxTCB, const char * const pcName, 
      +                          UBaseType_t uxPriority, const MemoryRegion_t * c
      +                          onst xRegions, const uint16_t usStackDepth )
  4701+                          
  4702+                          ;tasks.c: 2806: {
  4703+                          
  4704+                          ;tasks.c: 2807: UBaseType_t x;
  4705+                          
  4706+                          ;tasks.c: 2810: for( x = ( UBaseType_t ) 0; x < 
      +                          ( UBaseType_t ) ( 4 ); x++ )
  4707+                          
  4708+                          	line	2810
  4709+ 00F668  00200005           	mov.w	#0,w5
  4710+ 00F66A  002FFF47           	mov.w	#((0+f20336+0)-0),w7
  4711+ 00F66C  00478387           	add.w	sp,w7,w7
  4712+ 00F66E  00780B85           	mov.w	w5,[w7]
  4713+                          ;_xRegions stored from w6
  4714+ 00F670  002FFF67           	mov.w	#((0+f20336+2)-0),w7
  4715+ 00F672  00478387           	add.w	sp,w7,w7
  4716+ 00F674  00780B86           	mov.w	w6,[w7]
  4717+                          ;_uxPriority stored from w4
  4718+ 00F676  002FFF86           	mov.w	#((0+f20336+4)-0),w6
  4719+ 00F678  00478306           	add.w	sp,w6,w6
  4720+ 00F67A  00780B04           	mov.w	w4,[w6]
  4721+                          ;_pcName stored from w2
  4722+ 00F67C  002FFFA6           	mov.w	#((0+f20336+6)-0),w6
  4723+ 00F67E  00478306           	add.w	sp,w6,w6
  4724+ 00F680  00780B02           	mov.w	w2,[w6]
  4725+                          ;_pxTCB stored from w0
  4726+ 00F682  002FFFC6           	mov.w	#((0+f20336+8)-0),w6
  4727+ 00F684  00478306           	add.w	sp,w6,w6
  4728+ 00F686  00780B00           	mov.w	w0,[w6]
  4729+ 00F688  00200047           	mov.w	#04h,w7
  4730+ 00F68A  002FFF46           	mov.w	#((0+f20336+0)-0),w6
  4731+ 00F68C  00478306           	add.w	sp,w6,w6
  4732  00F68E  00780316           	mov.w	[w6],w6
  4733  00F690  00E13007           	cp.w	w6, w7
  4734  00F692  00390002           	bra	ltu,u971
  4735  00F694  0004F69C           	goto	u970
              00000000           
  4736  00F698                     u971:
  4737  00F698  0004F6A0           	goto	lab897
              00000000           
  4738  00F69C                     u970:
  4739  00F69C  0004F6F4           	goto	lab898
              00000000           
  4740                           	line	2811
  4741  00F6A0                     lab897:
  4742                           ;tasks.c: 2811: {
  4743                           
  4744                           ;tasks.c: 2812: pxTCB->pcTaskName[ x ] = pcName[
                                  x ];
  4745                           
  4746                           	line	2812
  4747  00F6A0  002FFF46           	mov.w	#((0+f20336+0)-0),w6
  4748  00F6A2  00478306           	add.w	sp,w6,w6
  4749  00F6A4  00780316           	mov.w	[w6],w6
  4750  00F6A6  0097BBDF           	mov.w	[sp+((0+f20336+6)-0)],w7
  4751  00F6A8  00438386           	add.w	w7,w6,w7
  4752  00F6AA  00784317           	mov.b	[w7],w6
  4753  00F6AC  002FFF47           	mov.w	#((0+f20336+0)-0),w7
  4754  00F6AE  00478387           	add.w	sp,w7,w7
  4755  00F6B0  00780297           	mov.w	[w7],w5
  4756  00F6B2  0097BBEF           	mov.w	[sp+((0+f20336+8)-0)],w7
  4757  00F6B4  00438385           	add.w	w7,w5,w7
  4758  00F6B6  002001A5           	mov	#26, w5
  4759  00F6B8  00438285           	add	w7, w5, w5
  4760  00F6BA  00784A86           	mov.b	w6,[w5]
  4761                           ;tasks.c: 2817: if( pcName[ x ] == 0x00 )
  4762                           
  4763                           	line	2817
  4764  00F6BC  002FFF46           	mov.w	#((0+f20336+0)-0),w6
  4765  00F6BE  00478306           	add.w	sp,w6,w6
  4766  00F6C0  00780396           	mov.w	[w6],w7
  4767  00F6C2  0097BB5F           	mov.w	[sp+((0+f20336+6)-0)],w6
  4768  00F6C4  00430307           	add.w	w6,w7,w6
  4769  00F6C6  00E00416           	cp0.b	[w6]
  4770  00F6C8  003A0002           	bra	nz,u981
  4771  00F6CA  0004F6D2           	goto	u980
              00000000           
  4772  00F6CE                     u981:
  4773  00F6CE  0004F6DA           	goto	lab900
              00000000           
  4774  00F6D2                     u980:
  4775                           ;tasks.c: 2818: {
  4776                           
  4777                           ;tasks.c: 2819: break;
  4778                           
  4779                           	line	2819
  4780  00F6D2  0004F6F4           	goto	lab898
              00000000           
  4781                           ;tasks.c: 2820: }
  4782                           
  4783                           	line	2820
  4784  00F6D6  0004F6DA           	goto	lab901
              00000000           
  4785                           	line	2821
  4786  00F6DA                     lab900:
  4787                           ;tasks.c: 2821: else
  4788                           
  4789                           ;tasks.c: 2822: {
  4790                           
  4791                           ;tasks.c: 2823: ;
  4792                           
  4793                           	line	2824
  4794  00F6DA                     lab901:
  4795                           	line	2810
  4796  00F6DA  0097BB2F           	mov.w	[sp+((0+f20336+0)-0)],w6
  4797  00F6DC  00B00016           	add.w	#1,w6
  4798  00F6DE  009FBFA6           	mov.w	w6,[sp+((0+f20336+0)-0)]
  4799  00F6E0  00200047           	mov.w	#04h,w7
  4800  00F6E2  002FFF46           	mov.w	#((0+f20336+0)-0),w6
  4801  00F6E4  00478306           	add.w	sp,w6,w6
  4802  00F6E6  00780316           	mov.w	[w6],w6
  4803  00F6E8  00E13007           	cp.w	w6, w7
  4804  00F6EA  00390002           	bra	ltu,u991
  4805  00F6EC  0004F6F4           	goto	u990
              00000000           
  4806  00F6F0                     u991:
  4807  00F6F0  0004F6A0           	goto	lab897
              00000000           
  4808  00F6F4                     u990:
  4809  00F6F4                     lab898:
  4810                           ;tasks.c: 2824: }
  4811                           
  4812                           ;tasks.c: 2825: }
  4813                           
  4814                           ;tasks.c: 2829: pxTCB->pcTaskName[ ( 4 ) - 1 ] =
                                  '\0';
  4815                           
  4816                           	line	2829
  4817  00F6F4  00200006           	mov.w	#0,w6
  4818  00F6F6  002FFFC7           	mov.w	#((0+f20336+8)-0),w7
  4819  00F6F8  00478387           	add.w	sp,w7,w7
  4820  00F6FA  00780297           	mov	[w7],w5
  4821  00F6FC  00985AD6           	mov.b	w6,[w5+29]
  4822                           ;tasks.c: 2833: if( uxPriority >= ( UBaseType_t 
                                 ) ( 4 ) )
  4823                           
  4824                           	line	2833
  4825  00F6FE  00200047           	mov.w	#04h,w7
  4826  00F700  002FFF86           	mov.w	#((0+f20336+4)-0),w6
  4827  00F702  00478306           	add.w	sp,w6,w6
  4828  00F704  00780316           	mov.w	[w6],w6
  4829  00F706  00E13007           	cp.w	w6, w7
  4830  00F708  00390002           	bra	ltu,u1001
  4831  00F70A  0004F712           	goto	u1000
              00000000           
  4832  00F70E                     u1001:
  4833  00F70E  0004F71E           	goto	lab902
              00000000           
  4834  00F712                     u1000:
  4835                           ;tasks.c: 2834: {
  4836                           
  4837                           ;tasks.c: 2835: uxPriority = ( UBaseType_t ) ( 4
                                  ) - ( UBaseType_t ) 1U;
  4838                           
  4839                           	line	2835
  4840  00F712  00200037           	mov.w	#03h,w7
  4841  00F714  002FFF86           	mov.w	#((0+f20336+4)-0),w6
  4842  00F716  00478306           	add.w	sp,w6,w6
  4843  00F718  00780B07           	mov.w	w7,[w6]
  4844                           ;tasks.c: 2836: }
  4845                           
  4846                           	line	2836
  4847  00F71A  0004F71E           	goto	lab903
              00000000           
  4848                           	line	2837
  4849  00F71E                     lab902:
  4850                           ;tasks.c: 2837: else
  4851                           
  4852                           ;tasks.c: 2838: {
  4853                           
  4854                           ;tasks.c: 2839: ;
  4855                           
  4856                           	line	2840
  4857  00F71E                     lab903:
  4858                           ;tasks.c: 2840: }
  4859                           
  4860                           ;tasks.c: 2842: pxTCB->uxPriority = uxPriority;
  4861                           
  4862                           	line	2842
  4863  00F71E  002FFF86           	mov.w	#((0+f20336+4)-0),w6
  4864  00F720  00478306           	add.w	sp,w6,w6
  4865  00F722  00780316           	mov.w	[w6],w6
  4866  00F724  002FFFC7           	mov.w	#((0+f20336+8)-0),w7
  4867  00F726  00478387           	add.w	sp,w7,w7
  4868  00F728  00780297           	mov	[w7],w5
  4869  00F72A  00980AB6           	mov.w	w6,[w5+22]
  4870                           ;tasks.c: 2850: vListInitialiseItem( &( pxTCB->x
                                 GenericListItem ) );
  4871                           
  4872                           	global	_vListInitialiseItem
  4873                           	signat	_vListInitialiseItem,4154
  4874                           	line	2850
  4875  00F72C  0097B86F           	mov.w	[sp+((0+f20336+8)-0)],w0
  4876  00F72E  00B00020           	add.w	#2,w0
  4877  00F730  0002C6FC           	call	(_vListInitialiseItem)	;0 bytes adjustment
              00000000           
  4878                           ;tasks.c: 2851: vListInitialiseItem( &( pxTCB->x
                                 EventListItem ) );
  4879                           
  4880                           	line	2851
  4881  00F734  0097B86F           	mov.w	[sp+((0+f20336+8)-0)],w0
  4882  00F736  00B000C0           	add.w	#12,w0
  4883  00F738  0002C6FC           	call	(_vListInitialiseItem)	;0 bytes adjustment
              00000000           
  4884                           ;tasks.c: 2855: ( ( &( pxTCB->xGenericListItem )
                                  )->pvOwner = ( void * ) ( pxTCB ) );
  4885                           
  4886                           	line	2855
  4887  00F73C  002FFFC6           	mov.w	#((0+f20336+8)-0),w6
  4888  00F73E  00478306           	add.w	sp,w6,w6
  4889  00F740  00780316           	mov.w	[w6],w6
  4890  00F742  002FFFC7           	mov.w	#((0+f20336+8)-0),w7
  4891  00F744  00478387           	add.w	sp,w7,w7
  4892  00F746  00780297           	mov	[w7],w5
  4893  00F748  009802C6           	mov.w	w6,[w5+8]
  4894                           ;tasks.c: 2858: ( ( &( pxTCB->xEventListItem ) )
                                 ->xItemValue = ( ( TickType_t ) ( 4 ) - ( TickTy
                                 pe_t ) uxPriority ) );
  4895                           
  4896                           	line	2858
  4897  00F74A  002FFF86           	mov.w	#((0+f20336+4)-0),w6
  4898  00F74C  00478306           	add.w	sp,w6,w6
  4899  00F74E  00780396           	mov.w	[w6],w7
  4900  00F750  00200046           	mov.w	#04h,w6
  4901  00F752  00530307           	sub.w	w6,w7,w6
  4902  00F754  002FFFC7           	mov.w	#((0+f20336+8)-0),w7
  4903  00F756  00478387           	add.w	sp,w7,w7
  4904  00F758  00780297           	mov	[w7],w5
  4905  00F75A  009802E6           	mov.w	w6,[w5+12]
  4906                           ;tasks.c: 2859: ( ( &( pxTCB->xEventListItem ) )
                                 ->pvOwner = ( void * ) ( pxTCB ) );
  4907                           
  4908                           	line	2859
  4909  00F75C  002FFFC6           	mov.w	#((0+f20336+8)-0),w6
  4910  00F75E  00478306           	add.w	sp,w6,w6
  4911  00F760  00780316           	mov.w	[w6],w6
  4912  00F762  002FFFC7           	mov.w	#((0+f20336+8)-0),w7
  4913  00F764  00478387           	add.w	sp,w7,w7
  4914  00F766  00780297           	mov	[w7],w5
  4915  00F768  00980A96           	mov.w	w6,[w5+18]
  4916                           ;tasks.c: 2884: {
  4917                           
  4918                           ;tasks.c: 2885: ( void ) xRegions;
  4919                           
  4920                           ;tasks.c: 2886: ( void ) usStackDepth;
  4921                           
  4922                           ;tasks.c: 2887: }
  4923                           
  4924                           ;tasks.c: 2900: {
  4925                           
  4926                           ;tasks.c: 2901: pxTCB->ulNotifiedValue = 0;
  4927                           
  4928                           	line	2901
  4929  00F76A  0097BB6F           	mov.w	[sp+((0+f20336+8)-0)],w6
  4930  00F76C  00B00206           	add.w	#32,w6
  4931  00F76E  00200007           	mov.w	#(0 & 0ffffh), w7
  4932  00F770  00781B07           	mov.w	w7,[w6++]
  4933  00F772  00200007           	mov.w	#highword(0), w7
  4934  00F774  00781307           	mov.w	w7,[w6--]
  4935                           ;tasks.c: 2902: pxTCB->eNotifyState = eNotWaitin
                                 gNotification;
  4936                           
  4937                           	line	2902
  4938  00F776  00200006           	mov.w	#0,w6
  4939  00F778  002FFFC7           	mov.w	#((0+f20336+8)-0),w7
  4940  00F77A  00478387           	add.w	sp,w7,w7
  4941  00F77C  00780297           	mov	[w7],w5
  4942  00F77E  009862C6           	mov.b	w6,[w5+36]
  4943                           ;tasks.c: 2903: }
  4944                           
  4945                           ;tasks.c: 2912: }
  4946                           
  4947                           	line	2912
  4948  00F780                     lab896:
  4949                           	global	_prvInitialiseTCBVariables
  4950                           
  4951  00F780  00B100CF           	sub.w	#12,sp
  4952  00F782  00578764           	sub	sp,#4,w14
  4953  00F784  0078271E           	mov.w	[w14],[--w14]
  4954  00F786  00782F4F           	mov.w	[--sp],[++w14]
  4955  00F788  00060000           	return
  4956                           	line	2806
  4957                           
  4958  00F78A                     f20331:
  4959                           
  4960  00F78A  00B000CF           	add.w	#12,sp
  4961  00F78C  0004F668           	goto	f20330
              00000000           
  4962  000000                     f20336	equ	-12		;stack offset for auto's
  4963  000000                     f20333	equ	-16		;stack offset for parameters
  4964                           	line	0
  4965                           	global	 __end_of_prvInitialiseTCBVariables
  4966  00F790                     __end_of_prvInitialiseTCBVariables:
  4967                           	line	2970
  4968  00F790                     _prvInitialiseTaskLists:
  4969  00F790  0004F80E           	goto	f20351
              00000000           
  4970  00F794                     f20350:
  4971                           
  4972                           ;tasks.c: 2969: void prvInitialiseTaskLists( voi
                                 d )
  4973                           
  4974                           ;tasks.c: 2970: {
  4975                           
  4976                           ;tasks.c: 2971: UBaseType_t uxPriority;
  4977                           
  4978                           ;tasks.c: 2973: for( uxPriority = ( UBaseType_t 
                                 ) 0U; uxPriority < ( UBaseType_t ) ( 4 ); uxPrio
                                 rity++ )
  4979                           
  4980                           	line	2973
  4981  00F794  00200007           	mov.w	#0,w7
  4982  00F796  002FFFC6           	mov.w	#((0+f20356+0)-0),w6
  4983  00F798  00478306           	add.w	sp,w6,w6
  4984  00F79A  00780B07           	mov.w	w7,[w6]
  4985  00F79C  00200047           	mov.w	#04h,w7
  4986  00F79E  002FFFC6           	mov.w	#((0+f20356+0)-0),w6
  4987  00F7A0  00478306           	add.w	sp,w6,w6
  4988  00F7A2  00780316           	mov.w	[w6],w6
  4989  00F7A4  00E13007           	cp.w	w6, w7
  4990  00F7A6  00390002           	bra	ltu,u1011
  4991  00F7A8  0004F7B0           	goto	u1010
              00000000           
  4992  00F7AC                     u1011:
  4993  00F7AC  0004F7B4           	goto	lab905
              00000000           
  4994  00F7B0                     u1010:
  4995  00F7B0  0004F7E2           	goto	lab906
              00000000           
  4996                           	line	2974
  4997  00F7B4                     lab905:
  4998                           ;tasks.c: 2974: {
  4999                           
  5000                           ;tasks.c: 2975: vListInitialise( &( pxReadyTasks
                                 Lists[ uxPriority ] ) );
  5001                           
  5002                           	global	_vListInitialise
  5003                           	signat	_vListInitialise,4154
  5004                           	line	2975
  5005  00F7B4  00208406           	mov	#_pxReadyTasksLists,w6
  5006  00F7B6  002000A4           	mov.w	#0Ah,w4
  5007  00F7B8  002FFFC7           	mov.w	#((0+f20356+0)-0),w7
  5008  00F7BA  00478387           	add.w	sp,w7,w7
  5009  00F7BC  00780397           	mov.w	[w7],w7
  5010  00F7BE  00780007           	mov.w	w7,w0
  5011  00F7C0  00B80004           	mul.uu	w0,w4,w0
  5012  00F7C2  00400006           	add.w	w0,w6,w0
  5013  00F7C4  0002C6C8           	call	(_vListInitialise)	;0 bytes adjustment
              00000000           
  5014                           	line	2973
  5015  00F7C8  0097BB6F           	mov.w	[sp+((0+f20356+0)-0)],w6
  5016  00F7CA  00B00016           	add.w	#1,w6
  5017  00F7CC  009FBFE6           	mov.w	w6,[sp+((0+f20356+0)-0)]
  5018  00F7CE  00200047           	mov.w	#04h,w7
  5019  00F7D0  002FFFC6           	mov.w	#((0+f20356+0)-0),w6
  5020  00F7D2  00478306           	add.w	sp,w6,w6
  5021  00F7D4  00780316           	mov.w	[w6],w6
  5022  00F7D6  00E13007           	cp.w	w6, w7
  5023  00F7D8  00390002           	bra	ltu,u1021
  5024  00F7DA  0004F7E2           	goto	u1020
              00000000           
  5025  00F7DE                     u1021:
  5026  00F7DE  0004F7B4           	goto	lab905
              00000000           
  5027  00F7E2                     u1020:
  5028  00F7E2                     lab906:
  5029                           ;tasks.c: 2976: }
  5030                           
  5031                           ;tasks.c: 2978: vListInitialise( &xDelayedTaskLi
                                 st1 );
  5032                           
  5033                           	global	_xDelayedTaskList1
  5034                           	line	2978
  5035  00F7E2  00208186           	mov.w	#_xDelayedTaskList1,w6
  5036  00F7E4  00780006           	mov.w	w6,w0
  5037  00F7E6  0002C6C8           	call	(_vListInitialise)	;0 bytes adjustment
              00000000           
  5038                           ;tasks.c: 2979: vListInitialise( &xDelayedTaskLi
                                 st2 );
  5039                           
  5040                           	global	_xDelayedTaskList2
  5041                           	line	2979
  5042  00F7EA  00208226           	mov.w	#_xDelayedTaskList2,w6
  5043  00F7EC  00780006           	mov.w	w6,w0
  5044  00F7EE  0002C6C8           	call	(_vListInitialise)	;0 bytes adjustment
              00000000           
  5045                           ;tasks.c: 2980: vListInitialise( &xPendingReadyL
                                 ist );
  5046                           
  5047                           	line	2980
  5048  00F7F2  002082C6           	mov.w	#_xPendingReadyList,w6
  5049  00F7F4  00780006           	mov.w	w6,w0
  5050  00F7F6  0002C6C8           	call	(_vListInitialise)	;0 bytes adjustment
              00000000           
  5051                           ;tasks.c: 2989: {
  5052                           
  5053                           ;tasks.c: 2990: vListInitialise( &xSuspendedTask
                                 List );
  5054                           
  5055                           	line	2990
  5056  00F7FA  00208366           	mov.w	#_xSuspendedTaskList,w6
  5057  00F7FC  00780006           	mov.w	w6,w0
  5058  00F7FE  0002C6C8           	call	(_vListInitialise)	;0 bytes adjustment
              00000000           
  5059                           ;tasks.c: 2991: }
  5060                           
  5061                           ;tasks.c: 2996: pxDelayedTaskList = &xDelayedTas
                                 kList1;
  5062                           
  5063                           	line	2996
  5064  00F802  00208186           	mov	#_xDelayedTaskList1,w6
  5065  00F804  00884016           	mov	w6,_pxDelayedTaskList
  5066                           ;tasks.c: 2997: pxOverflowDelayedTaskList = &xDe
                                 layedTaskList2;
  5067                           
  5068                           	line	2997
  5069  00F806  00208226           	mov	#_xDelayedTaskList2,w6
  5070  00F808  00884026           	mov	w6,_pxOverflowDelayedTaskList
  5071                           ;tasks.c: 2998: }
  5072                           
  5073                           	line	2998
  5074  00F80A                     lab904:
  5075                           	global	_prvInitialiseTaskLists
  5076                           
  5077  00F80A  00B1004F           	sub.w	#4,sp
  5078  00F80C  00060000           	return
  5079                           	line	2970
  5080                           
  5081  00F80E                     f20351:
  5082                           
  5083  00F80E  00B0004F           	add.w	#4,sp
  5084  00F810  0004F794           	goto	f20350
              00000000           
  5085  000000                     f20356	equ	-4		;stack offset for auto's
  5086  000000                     f20353	equ	-8		;stack offset for parameters
  5087                           	line	0
  5088                           	global	 __end_of_prvInitialiseTaskLists
  5089  00F814                     __end_of_prvInitialiseTaskLists:
  5090                           	line	3002
  5091  00F814                     _prvCheckTasksWaitingTermination:
  5092  00F814  0004F81A           	goto	f20371
              00000000           
  5093  00F818                     f20370:
  5094                           
  5095                           ;tasks.c: 3001: void prvCheckTasksWaitingTermina
                                 tion( void )
  5096                           
  5097                           ;tasks.c: 3002: {
  5098                           
  5099                           ;tasks.c: 3039: }
  5100                           
  5101                           	line	3039
  5102  00F818                     lab908:
  5103                           	global	_prvCheckTasksWaitingTermination
  5104  00F818  00060000           	return
  5105                           	line	3002
  5106                           
  5107  00F81A                     f20371:
  5108  00F81A  0004F818           	goto	f20370
              00000000           
  5109  000000                     f20376	equ	0		;stack offset for auto's
  5110  000000                     f20373	equ	-4		;stack offset for parameters
  5111                           	line	0
  5112                           	global	 __end_of_prvCheckTasksWaitingTerminatio
                                 n
  5113  00F81E                     __end_of_prvCheckTasksWaitingTermination:
  5114                           	line	3043
  5115  00F81E                     _prvAddCurrentTaskToDelayedList:
  5116  00F81E  0004F886           	goto	f20381
              00000000           
  5117  00F822                     f20380:
  5118                           
  5119                           ;tasks.c: 3042: void prvAddCurrentTaskToDelayedL
                                 ist( const TickType_t xTimeToWake )
  5120                           
  5121                           ;tasks.c: 3043: {
  5122                           
  5123                           ;tasks.c: 3045: ( ( &( pxCurrentTCB->xGenericLis
                                 tItem ) )->xItemValue = ( xTimeToWake ) );
  5124                           
  5125                           	line	3045
  5126  00F822  00208006           	mov.w	#_pxCurrentTCB,w6
  5127  00F824  00780396           	mov	[w6],w7
  5128  00F826  00980390           	mov.w	w0,[w7+2]
  5129                           ;tasks.c: 3047: if( xTimeToWake < xTickCount )
  5130                           
  5131                           ;_xTimeToWake stored from w0
  5132                           	line	3047
  5133  00F828  002FFFC6           	mov.w	#((0+f20386+0)-0),w6
  5134  00F82A  00478306           	add.w	sp,w6,w6
  5135  00F82C  00780B00           	mov.w	w0,[w6]
  5136  00F82E  008040A7           	mov	_xTickCount,w7
  5137  00F830  002FFFC6           	mov.w	#((0+f20386+0)-0),w6
  5138  00F832  00478306           	add.w	sp,w6,w6
  5139  00F834  00780316           	mov.w	[w6],w6
  5140  00F836  00E13007           	cp.w	w6, w7
  5141  00F838  00310002           	bra	geu,u1031
  5142  00F83A  0004F842           	goto	u1030
              00000000           
  5143  00F83E                     u1031:
  5144  00F83E  0004F854           	goto	lab910
              00000000           
  5145  00F842                     u1030:
  5146                           ;tasks.c: 3048: {
  5147                           
  5148                           ;tasks.c: 3050: vListInsert( pxOverflowDelayedTa
                                 skList, &( pxCurrentTCB->xGenericListItem ) );
  5149                           
  5150                           	line	3050
  5151  00F842  00208006           	mov.w	#_pxCurrentTCB,w6
  5152  00F844  00780116           	mov.w	[w6],w2
  5153  00F846  00B00022           	add.w	#2,w2
  5154  00F848  00208046           	mov.w	#_pxOverflowDelayedTaskList,w6
  5155  00F84A  00780016           	mov.w	[w6],w0
  5156  00F84C  0002C75A           	call	(_vListInsert)	;0 bytes adjustment
              00000000           
  5157                           ;tasks.c: 3051: }
  5158                           
  5159                           	line	3051
  5160  00F850  0004F882           	goto	lab911
              00000000           
  5161                           	line	3052
  5162  00F854                     lab910:
  5163                           ;tasks.c: 3052: else
  5164                           
  5165                           ;tasks.c: 3053: {
  5166                           
  5167                           ;tasks.c: 3055: vListInsert( pxDelayedTaskList, 
                                 &( pxCurrentTCB->xGenericListItem ) );
  5168                           
  5169                           	line	3055
  5170  00F854  00208006           	mov.w	#_pxCurrentTCB,w6
  5171  00F856  00780116           	mov.w	[w6],w2
  5172  00F858  00B00022           	add.w	#2,w2
  5173  00F85A  00208026           	mov.w	#_pxDelayedTaskList,w6
  5174  00F85C  00780016           	mov.w	[w6],w0
  5175  00F85E  0002C75A           	call	(_vListInsert)	;0 bytes adjustment
              00000000           
  5176                           ;tasks.c: 3060: if( xTimeToWake < xNextTaskUnblo
                                 ckTime )
  5177                           
  5178                           	line	3060
  5179  00F862  00806567           	mov	_xNextTaskUnblockTime,w7
  5180  00F864  002FFFC6           	mov.w	#((0+f20386+0)-0),w6
  5181  00F866  00478306           	add.w	sp,w6,w6
  5182  00F868  00780316           	mov.w	[w6],w6
  5183  00F86A  00E13007           	cp.w	w6, w7
  5184  00F86C  00310002           	bra	geu,u1041
  5185  00F86E  0004F876           	goto	u1040
              00000000           
  5186  00F872                     u1041:
  5187  00F872  0004F882           	goto	lab912
              00000000           
  5188  00F876                     u1040:
  5189                           ;tasks.c: 3061: {
  5190                           
  5191                           ;tasks.c: 3062: xNextTaskUnblockTime = xTimeToWa
                                 ke;
  5192                           
  5193                           	line	3062
  5194  00F876  002FFFC6           	mov.w	#((0+f20386+0)-0),w6
  5195  00F878  00478306           	add.w	sp,w6,w6
  5196  00F87A  00780316           	mov.w	[w6],w6
  5197  00F87C  00886566           	mov	w6,_xNextTaskUnblockTime
  5198                           ;tasks.c: 3063: }
  5199                           
  5200                           	line	3063
  5201  00F87E  0004F882           	goto	lab913
              00000000           
  5202                           	line	3064
  5203  00F882                     lab912:
  5204                           ;tasks.c: 3064: else
  5205                           
  5206                           ;tasks.c: 3065: {
  5207                           
  5208                           ;tasks.c: 3066: ;
  5209                           
  5210                           	line	3067
  5211  00F882                     lab913:
  5212                           	line	3068
  5213  00F882                     lab911:
  5214                           ;tasks.c: 3067: }
  5215                           
  5216                           ;tasks.c: 3068: }
  5217                           
  5218                           ;tasks.c: 3069: }
  5219                           
  5220                           	line	3069
  5221  00F882                     lab909:
  5222                           	global	_prvAddCurrentTaskToDelayedList
  5223                           
  5224  00F882  00B1004F           	sub.w	#4,sp
  5225  00F884  00060000           	return
  5226                           	line	3043
  5227                           
  5228  00F886                     f20381:
  5229                           
  5230  00F886  00B0004F           	add.w	#4,sp
  5231  00F888  0004F822           	goto	f20380
              00000000           
  5232  000000                     f20386	equ	-4		;stack offset for auto's
  5233  000000                     f20383	equ	-8		;stack offset for parameters
  5234                           	line	0
  5235                           	global	 __end_of_prvAddCurrentTaskToDelayedList
  5236  00F88C                     __end_of_prvAddCurrentTaskToDelayedList:
  5237                           	line	3073
  5238  00F88C                     _prvAllocateTCBAndStack:
  5239  00F88C  0004F91C           	goto	f20391
              00000000           
  5240  00F890                     f20390:
  5241                           
  5242                           ;tasks.c: 3072: TCB_t *prvAllocateTCBAndStack( c
                                 onst uint16_t usStackDepth, StackType_t * const 
                                 puxStackBuffer )
  5243                           
  5244                           ;tasks.c: 3073: {
  5245                           
  5246                           ;tasks.c: 3074: TCB_t *pxNewTCB;
  5247                           
  5248                           ;tasks.c: 3080: {
  5249                           
  5250                           ;tasks.c: 3083: pxNewTCB = ( TCB_t * ) pvPortMal
                                 loc( sizeof( TCB_t ) );
  5251                           
  5252                           	global	_pvPortMalloc
  5253                           	signat	_pvPortMalloc,4154
  5254                           ;_puxStackBuffer stored from w2
  5255                           	line	3083
  5256  00F890  002FFFA6           	mov.w	#((0+f20396+2)-0),w6
  5257  00F892  00478306           	add.w	sp,w6,w6
  5258  00F894  00780B02           	mov.w	w2,[w6]
  5259                           ;_usStackDepth stored from w0
  5260  00F896  002FFFC6           	mov.w	#((0+f20396+4)-0),w6
  5261  00F898  00478306           	add.w	sp,w6,w6
  5262  00F89A  00780B00           	mov.w	w0,[w6]
  5263  00F89C  00200260           	mov.w	#026h,w0
  5264  00F89E  0002C5F0           	call	(_pvPortMalloc)	;0 bytes adjustment
              00000000           
  5265  00F8A2  002FFF86           	mov.w	#((0+f20396+0)-0),w6
  5266  00F8A4  00478306           	add.w	sp,w6,w6
  5267  00F8A6  00780B00           	mov.w	w0,[w6]
  5268                           ;tasks.c: 3085: if( pxNewTCB != (0) )
  5269                           
  5270                           	line	3085
  5271  00F8A8  002FFF86           	mov.w	#((0+f20396+0)-0),w6
  5272  00F8AA  00478306           	add.w	sp,w6,w6
  5273  00F8AC  00E00016           	cp0.w	[w6]
  5274  00F8AE  00320002           	bra	z,u1051
  5275  00F8B0  0004F8B8           	goto	u1050
              00000000           
  5276  00F8B4                     u1051:
  5277  00F8B4  0004F900           	goto	lab915
              00000000           
  5278  00F8B8                     u1050:
  5279                           ;tasks.c: 3086: {
  5280                           
  5281                           ;tasks.c: 3090: pxNewTCB->pxStack = ( StackType_
                                 t * ) ( ( ( puxStackBuffer ) == (0) ) ? ( pvPort
                                 Malloc( ( ( ( ( size_t ) usStackDepth ) * sizeof
                                 ( StackType_t ) ) ) ) ) : ( puxStackBuffer ) );
  5282                           
  5283                           	line	3090
  5284  00F8B8  002FFFA6           	mov.w	#((0+f20396+2)-0),w6
  5285  00F8BA  00478306           	add.w	sp,w6,w6
  5286  00F8BC  00E00016           	cp0.w	[w6]
  5287  00F8BE  0032000B           	bra	z,u1061
  5288  00F8C0  0004F8C4           	goto	u1060
              00000000           
  5289  00F8C4                     u1060:
  5290  00F8C4  0097B85F           	mov.w	[sp+((0+f20396+2)-0)],w0
  5291  00F8C6  0004F8DA           	goto	u1074
              00000000           
  5292  00F8CA                     u1073:
  5293  00F8CA  0097B86F           	mov.w	[sp+((0+f20396+4)-0)],w0
  5294  00F8CC  00DD0041           	sl	w0,#1,w0
  5295  00F8CE  0002C5F0           	call	(_pvPortMalloc)	;0 bytes adjustment
              00000000           
  5296  00F8D2  0004F8DA           	goto	u1074
              00000000           
  5297  00F8D6                     u1061:
  5298  00F8D6  0004F8CA           	goto	u1073
              00000000           
  5299  00F8DA                     u1074:
  5300  00F8DA  002FFF86           	mov.w	#((0+f20396+0)-0),w6
  5301  00F8DC  00478306           	add.w	sp,w6,w6
  5302  00F8DE  00780396           	mov	[w6],w7
  5303  00F8E0  00980BC0           	mov.w	w0,[w7+24]
  5304                           ;tasks.c: 3092: if( pxNewTCB->pxStack == (0) )
  5305                           
  5306                           	line	3092
  5307  00F8E2  0097BB4F           	mov.w	[sp+((0+f20396+0)-0)],w6
  5308  00F8E4  00B00186           	add.w	#24,w6
  5309  00F8E6  00E00016           	cp0.w	[w6]
  5310  00F8E8  003A0002           	bra	nz,u1081
  5311  00F8EA  0004F8F2           	goto	u1080
              00000000           
  5312  00F8EE                     u1081:
  5313  00F8EE  0004F900           	goto	lab916
              00000000           
  5314  00F8F2                     u1080:
  5315                           ;tasks.c: 3093: {
  5316                           
  5317                           ;tasks.c: 3095: vPortFree( pxNewTCB );
  5318                           
  5319                           	global	_vPortFree
  5320                           	signat	_vPortFree,4154
  5321                           	line	3095
  5322  00F8F2  0097B84F           	mov.w	[sp+((0+f20396+0)-0)],w0
  5323  00F8F4  0002C69C           	call	(_vPortFree)	;0 bytes adjustment
              00000000           
  5324                           ;tasks.c: 3096: pxNewTCB = (0);
  5325                           
  5326                           	line	3096
  5327  00F8F8  00200007           	mov.w	#0,w7
  5328  00F8FA  002FFF86           	mov.w	#((0+f20396+0)-0),w6
  5329  00F8FC  00478306           	add.w	sp,w6,w6
  5330  00F8FE  00780B07           	mov.w	w7,[w6]
  5331                           	line	3097
  5332  00F900                     lab916:
  5333                           	line	3098
  5334  00F900                     lab915:
  5335                           ;tasks.c: 3097: }
  5336                           
  5337                           ;tasks.c: 3098: }
  5338                           
  5339                           ;tasks.c: 3099: }
  5340                           
  5341                           ;tasks.c: 3132: if( pxNewTCB != (0) )
  5342                           
  5343                           	line	3132
  5344  00F900  002FFF86           	mov.w	#((0+f20396+0)-0),w6
  5345  00F902  00478306           	add.w	sp,w6,w6
  5346  00F904  00E00016           	cp0.w	[w6]
  5347  00F906  00320002           	bra	z,u1091
  5348  00F908  0004F910           	goto	u1090
              00000000           
  5349  00F90C                     u1091:
  5350  00F90C  0004F910           	goto	lab917
              00000000           
  5351  00F910                     u1090:
  5352                           ;tasks.c: 3133: {
  5353                           
  5354                           	line	3141
  5355  00F910                     lab917:
  5356                           ;tasks.c: 3141: }
  5357                           
  5358                           ;tasks.c: 3143: return pxNewTCB;
  5359                           
  5360                           	line	3143
  5361  00F910  0097B84F           	mov.w	[sp+((0+f20396+0)-0)], w0
  5362  00F912  00780000           	mov.w	w0,w0
  5363  00F914  0004F918           	goto	lab914
              00000000           
  5364                           ;tasks.c: 3144: }
  5365                           
  5366                           	line	3144
  5367  00F918                     lab914:
  5368                           	global	_prvAllocateTCBAndStack
  5369                           
  5370  00F918  00B1008F           	sub.w	#8,sp
  5371  00F91A  00060000           	return
  5372                           	line	3073
  5373                           
  5374  00F91C                     f20391:
  5375                           
  5376  00F91C  00B0008F           	add.w	#8,sp
  5377  00F91E  0004F890           	goto	f20390
              00000000           
  5378  000000                     f20396	equ	-8		;stack offset for auto's
  5379  000000                     f20393	equ	-12		;stack offset for parameters
  5380                           	line	0
  5381                           	global	 __end_of_prvAllocateTCBAndStack
  5382  00F922                     __end_of_prvAllocateTCBAndStack:
  5383                           	line	3319
  5384  00F922                     _prvResetNextTaskUnblockTime:
  5385  00F922  0004F958           	goto	f20421
              00000000           
  5386  00F926                     f20420:
  5387                           
  5388                           ;tasks.c: 3318: void prvResetNextTaskUnblockTime
                                 ( void )
  5389                           
  5390                           ;tasks.c: 3319: {
  5391                           
  5392                           ;tasks.c: 3320: TCB_t *pxTCB;
  5393                           
  5394                           ;tasks.c: 3322: if( ( ( BaseType_t ) ( ( pxDelay
                                 edTaskList )->uxNumberOfItems == ( UBaseType_t )
                                  0 ) ) != ( ( BaseType_t ) 0 ) )
  5395                           
  5396                           	line	3322
  5397  00F926  00804016           	mov	_pxDelayedTaskList,w6
  5398  00F928  00E00016           	cp0.w	[w6]
  5399  00F92A  003A0002           	bra	nz,u1101
  5400  00F92C  0004F934           	goto	u1100
              00000000           
  5401  00F930                     u1101:
  5402  00F930  0004F93C           	goto	lab919
              00000000           
  5403  00F934                     u1100:
  5404                           ;tasks.c: 3323: {
  5405                           
  5406                           ;tasks.c: 3328: xNextTaskUnblockTime = ( TickTyp
                                 e_t ) 0xffff;
  5407                           
  5408                           	line	3328
  5409  00F934  002FFFF6           	mov.w	#-1,w6
  5410  00F936  00886566           	mov	w6,_xNextTaskUnblockTime
  5411                           ;tasks.c: 3329: }
  5412                           
  5413                           	line	3329
  5414  00F938  0004F954           	goto	lab920
              00000000           
  5415                           	line	3330
  5416  00F93C                     lab919:
  5417                           ;tasks.c: 3330: else
  5418                           
  5419                           ;tasks.c: 3331: {
  5420                           
  5421                           ;tasks.c: 3336: ( pxTCB ) = ( TCB_t * ) ( (&( ( 
                                 pxDelayedTaskList )->xListEnd ))->pxNext->pvOwne
                                 r );
  5422                           
  5423                           	line	3336
  5424  00F93C  00208026           	mov.w	#_pxDelayedTaskList,w6
  5425  00F93E  00780316           	mov.w	[w6],w6
  5426  00F940  00B00066           	add.w	#6,w6
  5427  00F942  00780396           	mov.w	[w6],w7
  5428  00F944  00B00067           	add.w	#6,w7
  5429  00F946  002FFFC6           	mov.w	#((0+f20426+0)-0),w6
  5430  00F948  00478306           	add.w	sp,w6,w6
  5431  00F94A  00780B17           	mov.w	[w7],[w6]
  5432                           ;tasks.c: 3337: xNextTaskUnblockTime = ( ( &( ( 
                                 pxTCB )->xGenericListItem ) )->xItemValue );
  5433                           
  5434                           	line	3337
  5435  00F94C  0097BBEF           	mov.w	[sp+((0+f20426+0)-0)],w7
  5436  00F94E  00B00027           	add.w	#2,w7
  5437  00F950  00780317           	mov.w	[w7],w6
  5438  00F952  00886566           	mov	w6,_xNextTaskUnblockTime
  5439                           	line	3338
  5440  00F954                     lab920:
  5441                           ;tasks.c: 3338: }
  5442                           
  5443                           ;tasks.c: 3339: }
  5444                           
  5445                           	line	3339
  5446  00F954                     lab918:
  5447                           	global	_prvResetNextTaskUnblockTime
  5448                           
  5449  00F954  00B1004F           	sub.w	#4,sp
  5450  00F956  00060000           	return
  5451                           	line	3319
  5452                           
  5453  00F958                     f20421:
  5454                           
  5455  00F958  00B0004F           	add.w	#4,sp
  5456  00F95A  0004F926           	goto	f20420
              00000000           
  5457  000000                     f20426	equ	-4		;stack offset for auto's
  5458  000000                     f20423	equ	-8		;stack offset for parameters
  5459                           	line	0
  5460                           	global	 __end_of_prvResetNextTaskUnblockTime
  5461  00F95E                     __end_of_prvResetNextTaskUnblockTime:
  5462                           	global	_uxTaskResetEventItemValue
  5463                           	signat	_uxTaskResetEventItemValue,26
  5464                           	line	3841
  5465  00F95E                     _uxTaskResetEventItemValue:
  5466  00F95E  0004F98A           	goto	f20431
              00000000           
  5467  00F962                     f20430:
  5468                           
  5469                           ;tasks.c: 3840: TickType_t uxTaskResetEventItemV
                                 alue( void )
  5470                           
  5471                           ;tasks.c: 3841: {
  5472                           
  5473                           ;tasks.c: 3842: TickType_t uxReturn;
  5474                           
  5475                           ;tasks.c: 3844: uxReturn = ( ( &( pxCurrentTCB->
                                 xEventListItem ) )->xItemValue );
  5476                           
  5477                           	line	3844
  5478  00F962  00804007           	mov.w	_pxCurrentTCB,w7
  5479  00F964  004383EC           	add.w	w7,#12,w7
  5480  00F966  002FFFC6           	mov.w	#((0+f20436+0)-0),w6
  5481  00F968  00478306           	add.w	sp,w6,w6
  5482  00F96A  00780B17           	mov.w	[w7],[w6]
  5483                           ;tasks.c: 3848: ( ( &( pxCurrentTCB->xEventListI
                                 tem ) )->xItemValue = ( ( ( TickType_t ) ( 4 ) -
                                  ( TickType_t ) pxCurrentTCB->uxPriority ) ) );
  5484                           
  5485                           	line	3848
  5486  00F96C  00208006           	mov.w	#_pxCurrentTCB,w6
  5487  00F96E  00780316           	mov.w	[w6],w6
  5488  00F970  00B00166           	add.w	#22,w6
  5489  00F972  00780396           	mov.w	[w6],w7
  5490  00F974  00200046           	mov.w	#04h,w6
  5491  00F976  00530307           	sub.w	w6,w7,w6
  5492  00F978  00208007           	mov.w	#_pxCurrentTCB,w7
  5493  00F97A  00780297           	mov	[w7],w5
  5494  00F97C  009802E6           	mov.w	w6,[w5+12]
  5495                           ;tasks.c: 3850: return uxReturn;
  5496                           
  5497                           	line	3850
  5498  00F97E  0097B86F           	mov.w	[sp+((0+f20436+0)-0)], w0
  5499  00F980  00780000           	mov.w	w0,w0
  5500  00F982  0004F986           	goto	lab921
              00000000           
  5501                           ;tasks.c: 3851: }
  5502                           
  5503                           	line	3851
  5504  00F986                     lab921:
  5505                           	global	_uxTaskResetEventItemValue
  5506                           
  5507  00F986  00B1004F           	sub.w	#4,sp
  5508  00F988  00060000           	return
  5509                           	line	3841
  5510                           
  5511  00F98A                     f20431:
  5512                           
  5513  00F98A  00B0004F           	add.w	#4,sp
  5514  00F98C  0004F962           	goto	f20430
              00000000           
  5515  000000                     f20436	equ	-4		;stack offset for auto's
  5516  000000                     f20433	equ	-8		;stack offset for parameters
  5517                           	line	0
  5518                           	global	 __end_of_uxTaskResetEventItemValue
  5519  00F990                     __end_of_uxTaskResetEventItemValue:
  5520                           	global	_ulTaskNotifyTake
  5521                           	signat	_ulTaskNotifyTake,8252
  5522                           	line	3874
  5523  00F990                     _ulTaskNotifyTake:
  5524  00F990  0004FAB4           	goto	f20441
              00000000           
  5525  00F994                     f20440:
  5526                           
  5527                           ;tasks.c: 3873: uint32_t ulTaskNotifyTake( BaseT
                                 ype_t xClearCountOnExit, TickType_t xTicksToWait
                                  )
  5528                           
  5529                           ;tasks.c: 3874: {
  5530                           
  5531                           ;tasks.c: 3875: TickType_t xTimeToWake;
  5532                           
  5533                           ;tasks.c: 3876: uint32_t ulReturn;
  5534                           
  5535                           ;tasks.c: 3878: vPortEnterCritical();
  5536                           
  5537                           ;_xTicksToWait stored from w2
  5538                           	line	3878
  5539  00F994  002FFFA6           	mov.w	#((0+f20446+6)-0),w6
  5540  00F996  00478306           	add.w	sp,w6,w6
  5541  00F998  00780B02           	mov.w	w2,[w6]
  5542                           ;_xClearCountOnExit stored from w0
  5543  00F99A  002FFFC6           	mov.w	#((0+f20446+8)-0),w6
  5544  00F99C  00478306           	add.w	sp,w6,w6
  5545  00F99E  00780B00           	mov.w	w0,[w6]
  5546  00F9A0  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  5547                           ;tasks.c: 3879: {
  5548                           
  5549                           ;tasks.c: 3881: if( pxCurrentTCB->ulNotifiedValu
                                 e == 0UL )
  5550                           
  5551                           	line	3881
  5552  00F9A4  00208006           	mov.w	#_pxCurrentTCB,w6
  5553  00F9A6  00780316           	mov.w	[w6],w6
  5554  00F9A8  00B00206           	add.w	#32,w6
  5555  00F9AA  00780236           	mov.w	[w6++],w4
  5556  00F9AC  007802A6           	mov.w	[w6--],w5
  5557  00F9AE  00E00005           	cp0.w	w5
  5558  00F9B0  003A0001           	bra	nz,u1115
  5559  00F9B2  00E00004           	cp0.w	w4
  5560  00F9B4                     	u1115:
  5561  00F9B4  003A0002           	bra	nz,u1111
  5562  00F9B6  0004F9BE           	goto	u1110
              00000000           
  5563  00F9BA                     u1111:
  5564  00F9BA  0004FA36           	goto	lab923
              00000000           
  5565  00F9BE                     u1110:
  5566                           ;tasks.c: 3882: {
  5567                           
  5568                           ;tasks.c: 3884: pxCurrentTCB->eNotifyState = eWa
                                 itingNotification;
  5569                           
  5570                           	line	3884
  5571  00F9BE  00200016           	mov.w	#01h,w6
  5572  00F9C0  00208007           	mov.w	#_pxCurrentTCB,w7
  5573  00F9C2  00780297           	mov	[w7],w5
  5574  00F9C4  009862C6           	mov.b	w6,[w5+36]
  5575                           ;tasks.c: 3886: if( xTicksToWait > ( TickType_t 
                                 ) 0 )
  5576                           
  5577                           	line	3886
  5578  00F9C6  002FFFA6           	mov.w	#((0+f20446+6)-0),w6
  5579  00F9C8  00478306           	add.w	sp,w6,w6
  5580  00F9CA  00E00016           	cp0.w	[w6]
  5581  00F9CC  00320002           	bra	z,u1121
  5582  00F9CE  0004F9D6           	goto	u1120
              00000000           
  5583  00F9D2                     u1121:
  5584  00F9D2  0004FA32           	goto	lab924
              00000000           
  5585  00F9D6                     u1120:
  5586                           ;tasks.c: 3887: {
  5587                           
  5588                           ;tasks.c: 3890: if( uxListRemove( &( pxCurrentTC
                                 B->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  5589                           
  5590                           	line	3890
  5591  00F9D6  00208006           	mov.w	#_pxCurrentTCB,w6
  5592  00F9D8  00780016           	mov.w	[w6],w0
  5593  00F9DA  00B00020           	add.w	#2,w0
  5594  00F9DC  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  5595  00F9E0  00E00000           	cp0.w	w0
  5596  00F9E2  003A0002           	bra	nz,u1131
  5597  00F9E4  0004F9EC           	goto	u1130
              00000000           
  5598  00F9E8                     u1131:
  5599  00F9E8  0004F9F0           	goto	lab925
              00000000           
  5600  00F9EC                     u1130:
  5601                           ;tasks.c: 3891: {
  5602                           
  5603                           ;tasks.c: 3895: ;
  5604                           
  5605                           ;tasks.c: 3896: }
  5606                           
  5607                           	line	3896
  5608  00F9EC  0004F9F0           	goto	lab926
              00000000           
  5609                           	line	3897
  5610  00F9F0                     lab925:
  5611                           ;tasks.c: 3897: else
  5612                           
  5613                           ;tasks.c: 3898: {
  5614                           
  5615                           ;tasks.c: 3899: ;
  5616                           
  5617                           	line	3900
  5618  00F9F0                     lab926:
  5619                           ;tasks.c: 3900: }
  5620                           
  5621                           ;tasks.c: 3903: {
  5622                           
  5623                           ;tasks.c: 3904: if( xTicksToWait == ( TickType_t
                                  ) 0xffff )
  5624                           
  5625                           	line	3904
  5626  00F9F0  002FFFF7           	mov.w	#-1,w7
  5627  00F9F2  0097BB5F           	mov.w	[sp+((0+f20446+6)-0)],w6
  5628  00F9F4  00E13007           	cp.w	w6, w7
  5629  00F9F6  003A0002           	bra	nz,u1141
  5630  00F9F8  0004FA00           	goto	u1140
              00000000           
  5631  00F9FC                     u1141:
  5632  00F9FC  0004FA12           	goto	lab927
              00000000           
  5633  00FA00                     u1140:
  5634                           ;tasks.c: 3905: {
  5635                           
  5636                           ;tasks.c: 3910: vListInsertEnd( &xSuspendedTaskL
                                 ist, &( pxCurrentTCB->xGenericListItem ) );
  5637                           
  5638                           	line	3910
  5639  00FA00  00208006           	mov.w	#_pxCurrentTCB,w6
  5640  00FA02  00780116           	mov.w	[w6],w2
  5641  00FA04  00B00022           	add.w	#2,w2
  5642  00FA06  00208366           	mov.w	#_xSuspendedTaskList,w6
  5643  00FA08  00780006           	mov.w	w6,w0
  5644  00FA0A  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  5645                           ;tasks.c: 3911: }
  5646                           
  5647                           	line	3911
  5648  00FA0E  0004FA2A           	goto	lab928
              00000000           
  5649                           	line	3912
  5650  00FA12                     lab927:
  5651                           ;tasks.c: 3912: else
  5652                           
  5653                           ;tasks.c: 3913: {
  5654                           
  5655                           ;tasks.c: 3918: xTimeToWake = xTickCount + xTick
                                 sToWait;
  5656                           
  5657                           	line	3918
  5658  00FA12  00208146           	mov.w	#_xTickCount,w6
  5659  00FA14  00780396           	mov.w	[w6],w7
  5660  00FA16  002FFFA6           	mov.w	#((0+f20446+6)-0),w6
  5661  00FA18  00478306           	add.w	sp,w6,w6
  5662  00FA1A  00780316           	mov.w	[w6],w6
  5663  00FA1C  00438386           	add.w	w7,w6,w7
  5664  00FA1E  002FFF46           	mov.w	#((0+f20446+0)-0),w6
  5665  00FA20  00478306           	add.w	sp,w6,w6
  5666  00FA22  00780B07           	mov.w	w7,[w6]
  5667                           ;tasks.c: 3919: prvAddCurrentTaskToDelayedList( 
                                 xTimeToWake );
  5668                           
  5669                           	line	3919
  5670  00FA24  0097B82F           	mov.w	[sp+((0+f20446+0)-0)],w0
  5671  00FA26  0002F81E           	call	(_prvAddCurrentTaskToDelayedList)	;0 bytes
              00000000            adjustment
  5672                           	line	3920
  5673  00FA2A                     lab928:
  5674                           ;tasks.c: 3920: }
  5675                           
  5676                           ;tasks.c: 3921: }
  5677                           
  5678                           ;tasks.c: 3937: vPortYield();
  5679                           
  5680                           	line	3937
  5681  00FA2A  0002C410           	call	(_vPortYield)
              00000000           
  5682                           ;tasks.c: 3938: }
  5683                           
  5684                           	line	3938
  5685  00FA2E  0004FA32           	goto	lab929
              00000000           
  5686                           	line	3939
  5687  00FA32                     lab924:
  5688                           ;tasks.c: 3939: else
  5689                           
  5690                           ;tasks.c: 3940: {
  5691                           
  5692                           ;tasks.c: 3941: ;
  5693                           
  5694                           	line	3942
  5695  00FA32                     lab929:
  5696                           ;tasks.c: 3942: }
  5697                           
  5698                           ;tasks.c: 3943: }
  5699                           
  5700                           	line	3943
  5701  00FA32  0004FA36           	goto	lab930
              00000000           
  5702                           	line	3944
  5703  00FA36                     lab923:
  5704                           ;tasks.c: 3944: else
  5705                           
  5706                           ;tasks.c: 3945: {
  5707                           
  5708                           ;tasks.c: 3946: ;
  5709                           
  5710                           	line	3947
  5711  00FA36                     lab930:
  5712                           ;tasks.c: 3947: }
  5713                           
  5714                           ;tasks.c: 3948: }
  5715                           
  5716                           ;tasks.c: 3949: vPortExitCritical();
  5717                           
  5718                           	line	3949
  5719  00FA36  0002CA22           	call	(_vPortExitCritical)
              00000000           
  5720                           ;tasks.c: 3951: vPortEnterCritical();
  5721                           
  5722                           	line	3951
  5723  00FA3A  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  5724                           ;tasks.c: 3952: {
  5725                           
  5726                           ;tasks.c: 3953: ulReturn = pxCurrentTCB->ulNotif
                                 iedValue;
  5727                           
  5728                           	line	3953
  5729  00FA3E  00208006           	mov.w	#_pxCurrentTCB,w6
  5730  00FA40  00780316           	mov.w	[w6],w6
  5731  00FA42  00B00206           	add.w	#32,w6
  5732  00FA44  00780236           	mov.w	[w6++],w4
  5733  00FA46  007802A6           	mov.w	[w6--],w5
  5734  00FA48  009FBFB4           	mov.w	w4,[sp+((0+f20446+2)-0)]
  5735  00FA4A  009FBFC5           	mov.w	w5,[sp+((0+f20446+2)-0+2)]
  5736                           ;tasks.c: 3955: if( ulReturn != 0UL )
  5737                           
  5738                           	line	3955
  5739  00FA4C  002FFF66           	mov.w	#((0+f20446+2)-0),w6
  5740  00FA4E  00478306           	add.w	sp,w6,w6
  5741  00FA50  00780236           	mov.w	[w6++],w4
  5742  00FA52  007802A6           	mov.w	[w6--],w5
  5743  00FA54  00E00005           	cp0.w	w5
  5744  00FA56  003A0001           	bra	nz,u1155
  5745  00FA58  00E00004           	cp0.w	w4
  5746  00FA5A                     	u1155:
  5747  00FA5A  00320002           	bra	z,u1151
  5748  00FA5C  0004FA64           	goto	u1150
              00000000           
  5749  00FA60                     u1151:
  5750  00FA60  0004FA9A           	goto	lab931
              00000000           
  5751  00FA64                     u1150:
  5752                           ;tasks.c: 3956: {
  5753                           
  5754                           ;tasks.c: 3957: if( xClearCountOnExit != ( ( Bas
                                 eType_t ) 0 ) )
  5755                           
  5756                           	line	3957
  5757  00FA64  002FFFC6           	mov.w	#((0+f20446+8)-0),w6
  5758  00FA66  00478306           	add.w	sp,w6,w6
  5759  00FA68  00E00016           	cp0.w	[w6]
  5760  00FA6A  00320002           	bra	z,u1161
  5761  00FA6C  0004FA74           	goto	u1160
              00000000           
  5762  00FA70                     u1161:
  5763  00FA70  0004FA86           	goto	lab932
              00000000           
  5764  00FA74                     u1160:
  5765                           ;tasks.c: 3958: {
  5766                           
  5767                           ;tasks.c: 3959: pxCurrentTCB->ulNotifiedValue = 
                                 0UL;
  5768                           
  5769                           	line	3959
  5770  00FA74  00208006           	mov.w	#_pxCurrentTCB,w6
  5771  00FA76  00780316           	mov.w	[w6],w6
  5772  00FA78  00B00206           	add.w	#32,w6
  5773  00FA7A  00200007           	mov.w	#(0 & 0ffffh), w7
  5774  00FA7C  00781B07           	mov.w	w7,[w6++]
  5775  00FA7E  00200007           	mov.w	#highword(0), w7
  5776  00FA80  00781307           	mov.w	w7,[w6--]
  5777                           ;tasks.c: 3960: }
  5778                           
  5779                           	line	3960
  5780  00FA82  0004FA96           	goto	lab933
              00000000           
  5781                           	line	3961
  5782  00FA86                     lab932:
  5783                           ;tasks.c: 3961: else
  5784                           
  5785                           ;tasks.c: 3962: {
  5786                           
  5787                           ;tasks.c: 3963: ( pxCurrentTCB->ulNotifiedValue 
                                 )--;
  5788                           
  5789                           	line	3963
  5790  00FA86  00200005           	mov.w	#highword(01h), w5
  5791  00FA88  00200014           	mov.w	#(01h & 0ffffh), w4
  5792  00FA8A  00208006           	mov.w	#_pxCurrentTCB,w6
  5793  00FA8C  00780316           	mov.w	[w6],w6
  5794  00FA8E  00B00206           	add.w	#32,w6
  5795  00FA90  00BE0116           	mov.d	[w6],w2
  5796  00FA92  00511B04           	sub.w	w2,w4,[w6++]
  5797  00FA94  00599305           	subb.w	w3,w5,[w6--]
  5798                           	line	3964
  5799  00FA96                     lab933:
  5800                           ;tasks.c: 3964: }
  5801                           
  5802                           ;tasks.c: 3965: }
  5803                           
  5804                           	line	3965
  5805  00FA96  0004FA9A           	goto	lab934
              00000000           
  5806                           	line	3966
  5807  00FA9A                     lab931:
  5808                           ;tasks.c: 3966: else
  5809                           
  5810                           ;tasks.c: 3967: {
  5811                           
  5812                           ;tasks.c: 3968: ;
  5813                           
  5814                           	line	3969
  5815  00FA9A                     lab934:
  5816                           ;tasks.c: 3969: }
  5817                           
  5818                           ;tasks.c: 3971: pxCurrentTCB->eNotifyState = eNo
                                 tWaitingNotification;
  5819                           
  5820                           	line	3971
  5821  00FA9A  00200006           	mov.w	#0,w6
  5822  00FA9C  00208007           	mov.w	#_pxCurrentTCB,w7
  5823  00FA9E  00780297           	mov	[w7],w5
  5824  00FAA0  009862C6           	mov.b	w6,[w5+36]
  5825                           ;tasks.c: 3972: }
  5826                           
  5827                           ;tasks.c: 3973: vPortExitCritical();
  5828                           
  5829                           	line	3973
  5830  00FAA2  0002CA22           	call	(_vPortExitCritical)
              00000000           
  5831                           ;tasks.c: 3975: return ulReturn;
  5832                           
  5833                           	line	3975
  5834  00FAA6  002FFF66           	mov.w	#((0+f20446+2)-0),w6
  5835  00FAA8  00478306           	add.w	sp,w6,w6
  5836  00FAAA  00BE0016           	mov.d	[w6],w0
  5837  00FAAC  0004FAB0           	goto	lab922
              00000000           
  5838                           ;tasks.c: 3976: }
  5839                           
  5840                           	line	3976
  5841  00FAB0                     lab922:
  5842                           	global	_ulTaskNotifyTake
  5843                           
  5844  00FAB0  00B100CF           	sub.w	#12,sp
  5845  00FAB2  00060000           	return
  5846                           	line	3874
  5847                           
  5848  00FAB4                     f20441:
  5849                           
  5850  00FAB4  00B000CF           	add.w	#12,sp
  5851  00FAB6  0004F994           	goto	f20440
              00000000           
  5852  000000                     f20446	equ	-12		;stack offset for auto's
  5853  000000                     f20443	equ	-16		;stack offset for parameters
  5854                           	line	0
  5855                           	global	 __end_of_ulTaskNotifyTake
  5856  00FABA                     __end_of_ulTaskNotifyTake:
  5857                           	global	_xTaskNotifyWait
  5858                           	signat	_xTaskNotifyWait,16442
  5859                           	line	3984
  5860  00FABA                     _xTaskNotifyWait:
  5861  00FABA  0004FBFC           	goto	f20451
              00000000           
  5862  00FABE                     f20450:
  5863                           
  5864                           ;tasks.c: 3983: BaseType_t xTaskNotifyWait( uint
                                 32_t ulBitsToClearOnEntry, uint32_t ulBitsToClea
                                 rOnExit, uint32_t *pulNotificationValue, TickTyp
                                 e_t xTicksToWait )
  5865                           
  5866                           ;tasks.c: 3984: {
  5867                           
  5868                           ;tasks.c: 3985: TickType_t xTimeToWake;
  5869                           
  5870                           ;tasks.c: 3986: BaseType_t xReturn;
  5871                           
  5872                           ;tasks.c: 3988: vPortEnterCritical();
  5873                           
  5874                           ;_xTicksToWait stored from w6
  5875                           	line	3988
  5876  00FABE  002FFF27           	mov.w	#((0+f20456+4)-0),w7
  5877  00FAC0  00478387           	add.w	sp,w7,w7
  5878  00FAC2  00780B86           	mov.w	w6,[w7]
  5879                           ;_pulNotificationValue stored from w4
  5880  00FAC4  002FFF46           	mov.w	#((0+f20456+6)-0),w6
  5881  00FAC6  00478306           	add.w	sp,w6,w6
  5882  00FAC8  00780B04           	mov.w	w4,[w6]
  5883                           ;_ulBitsToClearOnExit stored from w23
  5884  00FACA  009FBFB2           	mov.w	w2,[sp+((0+f20456+8)-0)]
  5885  00FACC  009FBFC3           	mov.w	w3,[sp+((0+f20456+8)-0+2)]
  5886                           ;_ulBitsToClearOnEntry stored from w01
  5887  00FACE  009FBFD0           	mov.w	w0,[sp+((0+f20456+12)-0)]
  5888  00FAD0  009FBFE1           	mov.w	w1,[sp+((0+f20456+12)-0+2)]
  5889  00FAD2  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  5890                           ;tasks.c: 3989: {
  5891                           
  5892                           ;tasks.c: 3991: if( pxCurrentTCB->eNotifyState !
                                 = eNotified )
  5893                           
  5894                           	line	3991
  5895  00FAD6  00208006           	mov.w	#_pxCurrentTCB,w6
  5896  00FAD8  00780396           	mov.w	[w6],w7
  5897  00FADA  00B00247           	add.w	#36,w7
  5898  00FADC  00784317           	mov.b	[w7],w6
  5899  00FADE  00E13462           	cp.b	w6, #2
  5900  00FAE0  00320002           	bra	z,u1171
  5901  00FAE2  0004FAEA           	goto	u1170
              00000000           
  5902  00FAE6                     u1171:
  5903  00FAE6  0004FB7A           	goto	lab936
              00000000           
  5904  00FAEA                     u1170:
  5905                           ;tasks.c: 3992: {
  5906                           
  5907                           ;tasks.c: 3996: pxCurrentTCB->ulNotifiedValue &=
                                  ~ulBitsToClearOnEntry;
  5908                           
  5909                           	line	3996
  5910  00FAEA  002FFFA6           	mov.w	#((0+f20456+12)-0),w6
  5911  00FAEC  00478306           	add.w	sp,w6,w6
  5912  00FAEE  00BE0216           	mov.d	[w6],w4
  5913  00FAF0  00EA8304           	com.w	w4,w6
  5914  00FAF2  00EA8385           	com.w	w5,w7
  5915  00FAF4  00208005           	mov.w	#_pxCurrentTCB,w5
  5916  00FAF6  00780295           	mov.w	[w5],w5
  5917  00FAF8  00B00205           	add.w	#32,w5
  5918  00FAFA  00780195           	mov.w	[w5],w3
  5919  00FAFC  00619A86           	and.w	w3,w6,[w5++]
  5920  00FAFE  00780195           	mov.w	[w5],w3
  5921  00FB00  00619287           	and.w	w3,w7,[w5--]
  5922                           ;tasks.c: 3999: pxCurrentTCB->eNotifyState = eWa
                                 itingNotification;
  5923                           
  5924                           	line	3999
  5925  00FB02  00200016           	mov.w	#01h,w6
  5926  00FB04  00208007           	mov.w	#_pxCurrentTCB,w7
  5927  00FB06  00780297           	mov	[w7],w5
  5928  00FB08  009862C6           	mov.b	w6,[w5+36]
  5929                           ;tasks.c: 4001: if( xTicksToWait > ( TickType_t 
                                 ) 0 )
  5930                           
  5931                           	line	4001
  5932  00FB0A  002FFF26           	mov.w	#((0+f20456+4)-0),w6
  5933  00FB0C  00478306           	add.w	sp,w6,w6
  5934  00FB0E  00E00016           	cp0.w	[w6]
  5935  00FB10  00320002           	bra	z,u1181
  5936  00FB12  0004FB1A           	goto	u1180
              00000000           
  5937  00FB16                     u1181:
  5938  00FB16  0004FB76           	goto	lab937
              00000000           
  5939  00FB1A                     u1180:
  5940                           ;tasks.c: 4002: {
  5941                           
  5942                           ;tasks.c: 4005: if( uxListRemove( &( pxCurrentTC
                                 B->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  5943                           
  5944                           	line	4005
  5945  00FB1A  00208006           	mov.w	#_pxCurrentTCB,w6
  5946  00FB1C  00780016           	mov.w	[w6],w0
  5947  00FB1E  00B00020           	add.w	#2,w0
  5948  00FB20  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  5949  00FB24  00E00000           	cp0.w	w0
  5950  00FB26  003A0002           	bra	nz,u1191
  5951  00FB28  0004FB30           	goto	u1190
              00000000           
  5952  00FB2C                     u1191:
  5953  00FB2C  0004FB34           	goto	lab938
              00000000           
  5954  00FB30                     u1190:
  5955                           ;tasks.c: 4006: {
  5956                           
  5957                           ;tasks.c: 4010: ;
  5958                           
  5959                           ;tasks.c: 4011: }
  5960                           
  5961                           	line	4011
  5962  00FB30  0004FB34           	goto	lab939
              00000000           
  5963                           	line	4012
  5964  00FB34                     lab938:
  5965                           ;tasks.c: 4012: else
  5966                           
  5967                           ;tasks.c: 4013: {
  5968                           
  5969                           ;tasks.c: 4014: ;
  5970                           
  5971                           	line	4015
  5972  00FB34                     lab939:
  5973                           ;tasks.c: 4015: }
  5974                           
  5975                           ;tasks.c: 4018: {
  5976                           
  5977                           ;tasks.c: 4019: if( xTicksToWait == ( TickType_t
                                  ) 0xffff )
  5978                           
  5979                           	line	4019
  5980  00FB34  002FFFF7           	mov.w	#-1,w7
  5981  00FB36  0097BB1F           	mov.w	[sp+((0+f20456+4)-0)],w6
  5982  00FB38  00E13007           	cp.w	w6, w7
  5983  00FB3A  003A0002           	bra	nz,u1201
  5984  00FB3C  0004FB44           	goto	u1200
              00000000           
  5985  00FB40                     u1201:
  5986  00FB40  0004FB56           	goto	lab940
              00000000           
  5987  00FB44                     u1200:
  5988                           ;tasks.c: 4020: {
  5989                           
  5990                           ;tasks.c: 4025: vListInsertEnd( &xSuspendedTaskL
                                 ist, &( pxCurrentTCB->xGenericListItem ) );
  5991                           
  5992                           	line	4025
  5993  00FB44  00208006           	mov.w	#_pxCurrentTCB,w6
  5994  00FB46  00780116           	mov.w	[w6],w2
  5995  00FB48  00B00022           	add.w	#2,w2
  5996  00FB4A  00208366           	mov.w	#_xSuspendedTaskList,w6
  5997  00FB4C  00780006           	mov.w	w6,w0
  5998  00FB4E  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  5999                           ;tasks.c: 4026: }
  6000                           
  6001                           	line	4026
  6002  00FB52  0004FB6E           	goto	lab941
              00000000           
  6003                           	line	4027
  6004  00FB56                     lab940:
  6005                           ;tasks.c: 4027: else
  6006                           
  6007                           ;tasks.c: 4028: {
  6008                           
  6009                           ;tasks.c: 4033: xTimeToWake = xTickCount + xTick
                                 sToWait;
  6010                           
  6011                           	line	4033
  6012  00FB56  00208146           	mov.w	#_xTickCount,w6
  6013  00FB58  00780396           	mov.w	[w6],w7
  6014  00FB5A  002FFF26           	mov.w	#((0+f20456+4)-0),w6
  6015  00FB5C  00478306           	add.w	sp,w6,w6
  6016  00FB5E  00780316           	mov.w	[w6],w6
  6017  00FB60  00438386           	add.w	w7,w6,w7
  6018  00FB62  002FFEE6           	mov.w	#((0+f20456+0)-0),w6
  6019  00FB64  00478306           	add.w	sp,w6,w6
  6020  00FB66  00780B07           	mov.w	w7,[w6]
  6021                           ;tasks.c: 4034: prvAddCurrentTaskToDelayedList( 
                                 xTimeToWake );
  6022                           
  6023                           	line	4034
  6024  00FB68  0097B07F           	mov.w	[sp+((0+f20456+0)-0)],w0
  6025  00FB6A  0002F81E           	call	(_prvAddCurrentTaskToDelayedList)	;0 bytes
              00000000            adjustment
  6026                           	line	4035
  6027  00FB6E                     lab941:
  6028                           ;tasks.c: 4035: }
  6029                           
  6030                           ;tasks.c: 4036: }
  6031                           
  6032                           ;tasks.c: 4052: vPortYield();
  6033                           
  6034                           	line	4052
  6035  00FB6E  0002C410           	call	(_vPortYield)
              00000000           
  6036                           ;tasks.c: 4053: }
  6037                           
  6038                           	line	4053
  6039  00FB72  0004FB76           	goto	lab942
              00000000           
  6040                           	line	4054
  6041  00FB76                     lab937:
  6042                           ;tasks.c: 4054: else
  6043                           
  6044                           ;tasks.c: 4055: {
  6045                           
  6046                           ;tasks.c: 4056: ;
  6047                           
  6048                           	line	4057
  6049  00FB76                     lab942:
  6050                           ;tasks.c: 4057: }
  6051                           
  6052                           ;tasks.c: 4058: }
  6053                           
  6054                           	line	4058
  6055  00FB76  0004FB7A           	goto	lab943
              00000000           
  6056                           	line	4059
  6057  00FB7A                     lab936:
  6058                           ;tasks.c: 4059: else
  6059                           
  6060                           ;tasks.c: 4060: {
  6061                           
  6062                           ;tasks.c: 4061: ;
  6063                           
  6064                           	line	4062
  6065  00FB7A                     lab943:
  6066                           ;tasks.c: 4062: }
  6067                           
  6068                           ;tasks.c: 4063: }
  6069                           
  6070                           ;tasks.c: 4064: vPortExitCritical();
  6071                           
  6072                           	line	4064
  6073  00FB7A  0002CA22           	call	(_vPortExitCritical)
              00000000           
  6074                           ;tasks.c: 4066: vPortEnterCritical();
  6075                           
  6076                           	line	4066
  6077  00FB7E  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  6078                           ;tasks.c: 4067: {
  6079                           
  6080                           ;tasks.c: 4068: if( pulNotificationValue != (0) 
                                 )
  6081                           
  6082                           	line	4068
  6083  00FB82  002FFF46           	mov.w	#((0+f20456+6)-0),w6
  6084  00FB84  00478306           	add.w	sp,w6,w6
  6085  00FB86  00E00016           	cp0.w	[w6]
  6086  00FB88  00320002           	bra	z,u1211
  6087  00FB8A  0004FB92           	goto	u1210
              00000000           
  6088  00FB8E                     u1211:
  6089  00FB8E  0004FBA4           	goto	lab944
              00000000           
  6090  00FB92                     u1210:
  6091                           ;tasks.c: 4069: {
  6092                           
  6093                           ;tasks.c: 4072: *pulNotificationValue = pxCurren
                                 tTCB->ulNotifiedValue;
  6094                           
  6095                           	line	4072
  6096  00FB92  00208006           	mov.w	#_pxCurrentTCB,w6
  6097  00FB94  00780316           	mov.w	[w6],w6
  6098  00FB96  00B00206           	add.w	#32,w6
  6099  00FB98  00780236           	mov.w	[w6++],w4
  6100  00FB9A  007802A6           	mov.w	[w6--],w5
  6101  00FB9C  002FFF46           	mov.w	#((0+f20456+6)-0),w6
  6102  00FB9E  00478306           	add.w	sp,w6,w6
  6103  00FBA0  00780316           	mov.w	[w6],w6
  6104  00FBA2  00BE8B04           	mov.d	w4,[w6]
  6105                           	line	4073
  6106  00FBA4                     lab944:
  6107                           ;tasks.c: 4073: }
  6108                           
  6109                           ;tasks.c: 4079: if( pxCurrentTCB->eNotifyState =
                                 = eWaitingNotification )
  6110                           
  6111                           	line	4079
  6112  00FBA4  00208006           	mov.w	#_pxCurrentTCB,w6
  6113  00FBA6  00780396           	mov.w	[w6],w7
  6114  00FBA8  00B00247           	add.w	#36,w7
  6115  00FBAA  00784317           	mov.b	[w7],w6
  6116  00FBAC  00E13461           	cp.b	w6, #1
  6117  00FBAE  003A0002           	bra	nz,u1221
  6118  00FBB0  0004FBB8           	goto	u1220
              00000000           
  6119  00FBB4                     u1221:
  6120  00FBB4  0004FBC4           	goto	lab945
              00000000           
  6121  00FBB8                     u1220:
  6122                           ;tasks.c: 4080: {
  6123                           
  6124                           ;tasks.c: 4082: xReturn = ( ( BaseType_t ) 0 );
  6125                           
  6126                           	line	4082
  6127  00FBB8  00200007           	mov.w	#0,w7
  6128  00FBBA  002FFF06           	mov.w	#((0+f20456+2)-0),w6
  6129  00FBBC  00478306           	add.w	sp,w6,w6
  6130  00FBBE  00780B07           	mov.w	w7,[w6]
  6131                           ;tasks.c: 4083: }
  6132                           
  6133                           	line	4083
  6134  00FBC0  0004FBE4           	goto	lab946
              00000000           
  6135                           	line	4084
  6136  00FBC4                     lab945:
  6137                           ;tasks.c: 4084: else
  6138                           
  6139                           ;tasks.c: 4085: {
  6140                           
  6141                           ;tasks.c: 4088: pxCurrentTCB->ulNotifiedValue &=
                                  ~ulBitsToClearOnExit;
  6142                           
  6143                           	line	4088
  6144  00FBC4  002FFF66           	mov.w	#((0+f20456+8)-0),w6
  6145  00FBC6  00478306           	add.w	sp,w6,w6
  6146  00FBC8  00BE0216           	mov.d	[w6],w4
  6147  00FBCA  00EA8304           	com.w	w4,w6
  6148  00FBCC  00EA8385           	com.w	w5,w7
  6149  00FBCE  00208005           	mov.w	#_pxCurrentTCB,w5
  6150  00FBD0  00780295           	mov.w	[w5],w5
  6151  00FBD2  00B00205           	add.w	#32,w5
  6152  00FBD4  00780195           	mov.w	[w5],w3
  6153  00FBD6  00619A86           	and.w	w3,w6,[w5++]
  6154  00FBD8  00780195           	mov.w	[w5],w3
  6155  00FBDA  00619287           	and.w	w3,w7,[w5--]
  6156                           ;tasks.c: 4089: xReturn = ( ( BaseType_t ) 1 );
  6157                           
  6158                           	line	4089
  6159  00FBDC  00200017           	mov.w	#01h,w7
  6160  00FBDE  002FFF06           	mov.w	#((0+f20456+2)-0),w6
  6161  00FBE0  00478306           	add.w	sp,w6,w6
  6162  00FBE2  00780B07           	mov.w	w7,[w6]
  6163                           	line	4090
  6164  00FBE4                     lab946:
  6165                           ;tasks.c: 4090: }
  6166                           
  6167                           ;tasks.c: 4092: pxCurrentTCB->eNotifyState = eNo
                                 tWaitingNotification;
  6168                           
  6169                           	line	4092
  6170  00FBE4  00200006           	mov.w	#0,w6
  6171  00FBE6  00208007           	mov.w	#_pxCurrentTCB,w7
  6172  00FBE8  00780297           	mov	[w7],w5
  6173  00FBEA  009862C6           	mov.b	w6,[w5+36]
  6174                           ;tasks.c: 4093: }
  6175                           
  6176                           ;tasks.c: 4094: vPortExitCritical();
  6177                           
  6178                           	line	4094
  6179  00FBEC  0002CA22           	call	(_vPortExitCritical)
              00000000           
  6180                           ;tasks.c: 4096: return xReturn;
  6181                           
  6182                           	line	4096
  6183  00FBF0  0097B80F           	mov.w	[sp+((0+f20456+2)-0)], w0
  6184  00FBF2  00780000           	mov.w	w0,w0
  6185  00FBF4  0004FBF8           	goto	lab935
              00000000           
  6186                           ;tasks.c: 4097: }
  6187                           
  6188                           	line	4097
  6189  00FBF8                     lab935:
  6190                           	global	_xTaskNotifyWait
  6191                           
  6192  00FBF8  00B1012F           	sub.w	#18,sp
  6193  00FBFA  00060000           	return
  6194                           	line	3984
  6195                           
  6196  00FBFC                     f20451:
  6197                           
  6198  00FBFC  00B0012F           	add.w	#18,sp
  6199  00FBFE  0004FABE           	goto	f20450
              00000000           
  6200  000000                     f20456	equ	-18		;stack offset for auto's
  6201  000000                     f20453	equ	-22		;stack offset for parameters
  6202                           	line	0
  6203                           	global	 __end_of_xTaskNotifyWait
  6204  00FC02                     __end_of_xTaskNotifyWait:
  6205                           	global	_xTaskGenericNotify
  6206                           	signat	_xTaskGenericNotify,16442
  6207                           	line	4105
  6208  00FC02                     _xTaskGenericNotify:
  6209  00FC02  0004FD6E           	goto	f20461
              00000000           
  6210  00FC06                     f20460:
  6211                           
  6212                           ;tasks.c: 4104: BaseType_t xTaskGenericNotify( T
                                 askHandle_t xTaskToNotify, uint32_t ulValue, eNo
                                 tifyAction eAction, uint32_t *pulPreviousNotific
                                 ationValue )
  6213                           
  6214                           ;tasks.c: 4105: {
  6215                           
  6216                           ;tasks.c: 4106: TCB_t * pxTCB;
  6217                           
  6218                           ;tasks.c: 4107: eNotifyValue eOriginalNotifyStat
                                 e;
  6219                           
  6220                           ;tasks.c: 4108: BaseType_t xReturn = ( ( ( BaseT
                                 ype_t ) 1 ) );
  6221                           
  6222                           	line	4108
  6223  00FC06  00200015           	mov.w	#01h,w5
  6224  00FC08  002FFF27           	mov.w	#((0+f20466+4)-0),w7
  6225  00FC0A  00478387           	add.w	sp,w7,w7
  6226  00FC0C  00780B85           	mov.w	w5,[w7]
  6227                           ;tasks.c: 4110: ;
  6228                           
  6229                           ;tasks.c: 4111: pxTCB = ( TCB_t * ) xTaskToNotif
                                 y;
  6230                           
  6231                           	line	4111
  6232  00FC0E  002FFEE7           	mov.w	#((0+f20466+0)-0),w7
  6233  00FC10  00478387           	add.w	sp,w7,w7
  6234  00FC12  00780B80           	mov.w	w0,[w7]
  6235                           ;tasks.c: 4113: vPortEnterCritical();
  6236                           
  6237                           ;_pulPreviousNotificationValue stored from w6
  6238                           	line	4113
  6239  00FC14  002FFF47           	mov.w	#((0+f20466+6)-0),w7
  6240  00FC16  00478387           	add.w	sp,w7,w7
  6241  00FC18  00780B86           	mov.w	w6,[w7]
  6242                           ;_eAction stored from w4
  6243  00FC1A  002FFF66           	mov.w	#((0+f20466+8)-0),w6
  6244  00FC1C  00478306           	add.w	sp,w6,w6
  6245  00FC1E  00784B04           	mov.b	w4,[w6]
  6246                           ;_ulValue stored from w23
  6247  00FC20  009FBFC2           	mov.w	w2,[sp+((0+f20466+10)-0)]
  6248  00FC22  009FBFD3           	mov.w	w3,[sp+((0+f20466+10)-0+2)]
  6249                           ;_xTaskToNotify stored from w0
  6250  00FC24  002FFFC6           	mov.w	#((0+f20466+14)-0),w6
  6251  00FC26  00478306           	add.w	sp,w6,w6
  6252  00FC28  00780B00           	mov.w	w0,[w6]
  6253  00FC2A  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  6254                           ;tasks.c: 4114: {
  6255                           
  6256                           ;tasks.c: 4115: if( pulPreviousNotificationValue
                                  != (0) )
  6257                           
  6258                           	line	4115
  6259  00FC2E  002FFF46           	mov.w	#((0+f20466+6)-0),w6
  6260  00FC30  00478306           	add.w	sp,w6,w6
  6261  00FC32  00E00016           	cp0.w	[w6]
  6262  00FC34  00320002           	bra	z,u1231
  6263  00FC36  0004FC3E           	goto	u1230
              00000000           
  6264  00FC3A                     u1231:
  6265  00FC3A  0004FC4E           	goto	lab948
              00000000           
  6266  00FC3E                     u1230:
  6267                           ;tasks.c: 4116: {
  6268                           
  6269                           ;tasks.c: 4117: *pulPreviousNotificationValue = 
                                 pxTCB->ulNotifiedValue;
  6270                           
  6271                           	line	4117
  6272  00FC3E  0097B37F           	mov.w	[sp+((0+f20466+0)-0)],w6
  6273  00FC40  00B00206           	add.w	#32,w6
  6274  00FC42  00780236           	mov.w	[w6++],w4
  6275  00FC44  007802A6           	mov.w	[w6--],w5
  6276  00FC46  002FFF46           	mov.w	#((0+f20466+6)-0),w6
  6277  00FC48  00478306           	add.w	sp,w6,w6
  6278  00FC4A  00780316           	mov.w	[w6],w6
  6279  00FC4C  00BE8B04           	mov.d	w4,[w6]
  6280                           	line	4118
  6281  00FC4E                     lab948:
  6282                           ;tasks.c: 4118: }
  6283                           
  6284                           ;tasks.c: 4120: eOriginalNotifyState = pxTCB->eN
                                 otifyState;
  6285                           
  6286                           	line	4120
  6287  00FC4E  0097B3FF           	mov.w	[sp+((0+f20466+0)-0)],w7
  6288  00FC50  00B00247           	add.w	#36,w7
  6289  00FC52  002FFF06           	mov.w	#((0+f20466+2)-0),w6
  6290  00FC54  00478306           	add.w	sp,w6,w6
  6291  00FC56  00784B17           	mov.b	[w7],[w6]
  6292                           ;tasks.c: 4122: pxTCB->eNotifyState = eNotified;
  6293                           
  6294                           	line	4122
  6295  00FC58  00200026           	mov.w	#02h,w6
  6296  00FC5A  002FFEE7           	mov.w	#((0+f20466+0)-0),w7
  6297  00FC5C  00478387           	add.w	sp,w7,w7
  6298  00FC5E  00780297           	mov	[w7],w5
  6299  00FC60  009862C6           	mov.b	w6,[w5+36]
  6300                           ;tasks.c: 4124: switch( eAction )
  6301                           
  6302                           	line	4124
  6303  00FC62  0004FCCE           	goto	lab950
              00000000           
  6304                           ;tasks.c: 4125: {
  6305                           
  6306                           ;tasks.c: 4126: case eSetBits :
  6307                           
  6308                           	line	4126
  6309  00FC66                     lab951:
  6310                           ;tasks.c: 4127: pxTCB->ulNotifiedValue |= ulValu
                                 e;
  6311                           
  6312                           	line	4127
  6313  00FC66  002FFF86           	mov.w	#((0+f20466+10)-0),w6
  6314  00FC68  00478306           	add.w	sp,w6,w6
  6315  00FC6A  00BE0216           	mov.d	[w6],w4
  6316  00FC6C  0097B37F           	mov.w	[sp+((0+f20466+0)-0)],w6
  6317  00FC6E  00B00206           	add.w	#32,w6
  6318  00FC70  00780396           	mov.w	[w6],w7
  6319  00FC72  00739B04           	ior.w	w7,w4,[w6++]
  6320  00FC74  00780396           	mov.w	[w6],w7
  6321  00FC76  00739305           	ior.w	w7,w5,[w6--]
  6322                           ;tasks.c: 4128: break;
  6323                           
  6324                           	line	4128
  6325  00FC78  0004FCEE           	goto	lab949
              00000000           
  6326                           ;tasks.c: 4130: case eIncrement :
  6327                           
  6328                           	line	4130
  6329  00FC7C                     lab952:
  6330                           ;tasks.c: 4131: ( pxTCB->ulNotifiedValue )++;
  6331                           
  6332                           	line	4131
  6333  00FC7C  0097B37F           	mov.w	[sp+((0+f20466+0)-0)],w6
  6334  00FC7E  00B00206           	add.w	#32,w6
  6335  00FC80  00780396           	mov.w	[w6],w7
  6336  00FC82  00439B61           	add.w	w7,#1,[w6++]
  6337  00FC84  00780396           	mov.w	[w6],w7
  6338  00FC86  004B9360           	addc.w	w7,#0,[w6--]
  6339                           ;tasks.c: 4132: break;
  6340                           
  6341                           	line	4132
  6342  00FC88  0004FCEE           	goto	lab949
              00000000           
  6343                           ;tasks.c: 4134: case eSetValueWithOverwrite :
  6344                           
  6345                           	line	4134
  6346  00FC8C                     lab953:
  6347                           ;tasks.c: 4135: pxTCB->ulNotifiedValue = ulValue
                                 ;
  6348                           
  6349                           	line	4135
  6350  00FC8C  002FFF86           	mov.w	#((0+f20466+10)-0),w6
  6351  00FC8E  00478306           	add.w	sp,w6,w6
  6352  00FC90  00BE0216           	mov.d	[w6],w4
  6353  00FC92  0097B37F           	mov.w	[sp+((0+f20466+0)-0)],w6
  6354  00FC94  00B00206           	add.w	#32,w6
  6355  00FC96  00BE8B04           	mov.d	w4,[w6]
  6356                           ;tasks.c: 4136: break;
  6357                           
  6358                           	line	4136
  6359  00FC98  0004FCEE           	goto	lab949
              00000000           
  6360                           ;tasks.c: 4138: case eSetValueWithoutOverwrite :
  6361                           
  6362                           	line	4138
  6363  00FC9C                     lab954:
  6364                           ;tasks.c: 4139: if( eOriginalNotifyState != eNot
                                 ified )
  6365                           
  6366                           	line	4139
  6367  00FC9C  0097F30F           	mov.b	[sp+((0+f20466+2)-0)],w6
  6368  00FC9E  00E13462           	cp.b	w6, #2
  6369  00FCA0  00320002           	bra	z,u1241
  6370  00FCA2  0004FCAA           	goto	u1240
              00000000           
  6371  00FCA6                     u1241:
  6372  00FCA6  0004FCBA           	goto	lab955
              00000000           
  6373  00FCAA                     u1240:
  6374                           ;tasks.c: 4140: {
  6375                           
  6376                           ;tasks.c: 4141: pxTCB->ulNotifiedValue = ulValue
                                 ;
  6377                           
  6378                           	line	4141
  6379  00FCAA  002FFF86           	mov.w	#((0+f20466+10)-0),w6
  6380  00FCAC  00478306           	add.w	sp,w6,w6
  6381  00FCAE  00BE0216           	mov.d	[w6],w4
  6382  00FCB0  0097B37F           	mov.w	[sp+((0+f20466+0)-0)],w6
  6383  00FCB2  00B00206           	add.w	#32,w6
  6384  00FCB4  00BE8B04           	mov.d	w4,[w6]
  6385                           ;tasks.c: 4142: }
  6386                           
  6387                           	line	4142
  6388  00FCB6  0004FCC2           	goto	lab956
              00000000           
  6389                           	line	4143
  6390  00FCBA                     lab955:
  6391                           ;tasks.c: 4143: else
  6392                           
  6393                           ;tasks.c: 4144: {
  6394                           
  6395                           ;tasks.c: 4146: xReturn = ( ( ( BaseType_t ) 0 )
                                  );
  6396                           
  6397                           	line	4146
  6398  00FCBA  00200007           	mov.w	#0,w7
  6399  00FCBC  002FFF26           	mov.w	#((0+f20466+4)-0),w6
  6400  00FCBE  00478306           	add.w	sp,w6,w6
  6401  00FCC0  00780B07           	mov.w	w7,[w6]
  6402                           	line	4147
  6403  00FCC2                     lab956:
  6404                           ;tasks.c: 4147: }
  6405                           
  6406                           ;tasks.c: 4148: break;
  6407                           
  6408                           	line	4148
  6409  00FCC2  0004FCEE           	goto	lab949
              00000000           
  6410                           ;tasks.c: 4150: case eNoAction:
  6411                           
  6412                           	line	4150
  6413  00FCC6                     lab957:
  6414                           ;tasks.c: 4153: break;
  6415                           
  6416                           	line	4153
  6417  00FCC6  0004FCEE           	goto	lab949
              00000000           
  6418                           ;tasks.c: 4154: }
  6419                           
  6420                           	line	4154
  6421  00FCCA  0004FCEE           	goto	lab949
              00000000           
  6422                           	line	4124
  6423  00FCCE                     lab950:
  6424  00FCCE  0097F36F           	mov.b	[sp+((0+f20466+8)-0)],w6
  6425  00FCD0  00FB8306           	ze	w6,w6
  6426  00FCD2  00FB8306           	ze	w6,w6
  6427  00FCD4  00780206           	mov.w	w6,w4
  6428  00FCD6  00520260           	sub.w	w4,#0,w4
  6429  00FCD8  0032FFF6           	bra	z,lab957
  6430  00FCDA  00520261           	sub.w	w4,#1,w4
  6431  00FCDC  0032FFC4           	bra	z,lab951
  6432  00FCDE  00520261           	sub.w	w4,#1,w4
  6433  00FCE0  0032FFCD           	bra	z,lab952
  6434  00FCE2  00520261           	sub.w	w4,#1,w4
  6435  00FCE4  0032FFD3           	bra	z,lab953
  6436  00FCE6  00520261           	sub.w	w4,#1,w4
  6437  00FCE8  0032FFD9           	bra	z,lab954
  6438  00FCEA  0004FCEE           	goto	lab949
              00000000           
  6439                           
  6440                           	line	4154
  6441  00FCEE                     lab949:
  6442                           ;tasks.c: 4159: if( eOriginalNotifyState == eWai
                                 tingNotification )
  6443                           
  6444                           	line	4159
  6445  00FCEE  0097F30F           	mov.b	[sp+((0+f20466+2)-0)],w6
  6446  00FCF0  00E13461           	cp.b	w6, #1
  6447  00FCF2  003A0002           	bra	nz,u1251
  6448  00FCF4  0004FCFC           	goto	u1250
              00000000           
  6449  00FCF8                     u1251:
  6450  00FCF8  0004FD5E           	goto	lab958
              00000000           
  6451  00FCFC                     u1250:
  6452                           ;tasks.c: 4160: {
  6453                           
  6454                           ;tasks.c: 4161: ( void ) uxListRemove( &( pxTCB-
                                 >xGenericListItem ) );
  6455                           
  6456                           	line	4161
  6457  00FCFC  0097B07F           	mov.w	[sp+((0+f20466+0)-0)],w0
  6458  00FCFE  00B00020           	add.w	#2,w0
  6459  00FD00  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  6460                           ;tasks.c: 4162: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  6461                           
  6462                           	line	4162
  6463  00FD04  00804076           	mov	_uxTopReadyPriority,w6
  6464  00FD06  0097B3FF           	mov.w	[sp+((0+f20466+0)-0)],w7
  6465  00FD08  00B00167           	add.w	#22,w7
  6466  00FD0A  00780297           	mov.w	[w7],w5
  6467  00FD0C  00E12806           	cp.w	w5, w6
  6468  00FD0E  00360002           	bra	leu,u1261
  6469  00FD10  0004FD18           	goto	u1260
              00000000           
  6470  00FD14                     u1261:
  6471  00FD14  0004FD20           	goto	lab959
              00000000           
  6472  00FD18                     u1260:
  6473  00FD18  0097B3FF           	mov.w	[sp+((0+f20466+0)-0)],w7
  6474  00FD1A  00B00167           	add.w	#22,w7
  6475  00FD1C  00780317           	mov.w	[w7],w6
  6476  00FD1E  00884076           	mov	w6,_uxTopReadyPriority
  6477  00FD20                     lab959:
  6478  00FD20  0097B17F           	mov.w	[sp+((0+f20466+0)-0)],w2
  6479  00FD22  00B00022           	add.w	#2,w2
  6480  00FD24  00208406           	mov	#_pxReadyTasksLists,w6
  6481  00FD26  002000A4           	mov.w	#0Ah,w4
  6482  00FD28  0097B3FF           	mov.w	[sp+((0+f20466+0)-0)],w7
  6483  00FD2A  00B00167           	add.w	#22,w7
  6484  00FD2C  00780297           	mov.w	[w7],w5
  6485  00FD2E  00780005           	mov.w	w5,w0
  6486  00FD30  00B80004           	mul.uu	w0,w4,w0
  6487  00FD32  00400006           	add.w	w0,w6,w0
  6488  00FD34  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  6489                           ;tasks.c: 4165: ;
  6490                           
  6491                           ;tasks.c: 4167: if( pxTCB->uxPriority > pxCurren
                                 tTCB->uxPriority )
  6492                           
  6493                           	line	4167
  6494  00FD38  00208006           	mov.w	#_pxCurrentTCB,w6
  6495  00FD3A  00780316           	mov.w	[w6],w6
  6496  00FD3C  00B00166           	add.w	#22,w6
  6497  00FD3E  00780396           	mov.w	[w6],w7
  6498  00FD40  0097B2FF           	mov.w	[sp+((0+f20466+0)-0)],w5
  6499  00FD42  00B00165           	add.w	#22,w5
  6500  00FD44  00780315           	mov.w	[w5],w6
  6501  00FD46  00E13007           	cp.w	w6, w7
  6502  00FD48  00360002           	bra	leu,u1271
  6503  00FD4A  0004FD52           	goto	u1270
              00000000           
  6504  00FD4E                     u1271:
  6505  00FD4E  0004FD5A           	goto	lab960
              00000000           
  6506  00FD52                     u1270:
  6507                           ;tasks.c: 4168: {
  6508                           
  6509                           ;tasks.c: 4171: vPortYield();
  6510                           
  6511                           	line	4171
  6512  00FD52  0002C410           	call	(_vPortYield)
              00000000           
  6513                           ;tasks.c: 4172: }
  6514                           
  6515                           	line	4172
  6516  00FD56  0004FD5A           	goto	lab961
              00000000           
  6517                           	line	4173
  6518  00FD5A                     lab960:
  6519                           ;tasks.c: 4173: else
  6520                           
  6521                           ;tasks.c: 4174: {
  6522                           
  6523                           ;tasks.c: 4175: ;
  6524                           
  6525                           	line	4176
  6526  00FD5A                     lab961:
  6527                           ;tasks.c: 4176: }
  6528                           
  6529                           ;tasks.c: 4177: }
  6530                           
  6531                           	line	4177
  6532  00FD5A  0004FD5E           	goto	lab962
              00000000           
  6533                           	line	4178
  6534  00FD5E                     lab958:
  6535                           ;tasks.c: 4178: else
  6536                           
  6537                           ;tasks.c: 4179: {
  6538                           
  6539                           ;tasks.c: 4180: ;
  6540                           
  6541                           	line	4181
  6542  00FD5E                     lab962:
  6543                           ;tasks.c: 4181: }
  6544                           
  6545                           ;tasks.c: 4182: }
  6546                           
  6547                           ;tasks.c: 4183: vPortExitCritical();
  6548                           
  6549                           	line	4183
  6550  00FD5E  0002CA22           	call	(_vPortExitCritical)
              00000000           
  6551                           ;tasks.c: 4185: return xReturn;
  6552                           
  6553                           	line	4185
  6554  00FD62  0097B81F           	mov.w	[sp+((0+f20466+4)-0)], w0
  6555  00FD64  00780000           	mov.w	w0,w0
  6556  00FD66  0004FD6A           	goto	lab947
              00000000           
  6557                           ;tasks.c: 4186: }
  6558                           
  6559                           	line	4186
  6560  00FD6A                     lab947:
  6561                           	global	_xTaskGenericNotify
  6562                           
  6563  00FD6A  00B1012F           	sub.w	#18,sp
  6564  00FD6C  00060000           	return
  6565                           	line	4105
  6566                           
  6567  00FD6E                     f20461:
  6568                           
  6569  00FD6E  00B0012F           	add.w	#18,sp
  6570  00FD70  0004FC06           	goto	f20460
              00000000           
  6571  000000                     f20466	equ	-18		;stack offset for auto's
  6572  000000                     f20463	equ	-22		;stack offset for parameters
  6573                           	line	0
  6574                           	global	 __end_of_xTaskGenericNotify
  6575  00FD74                     __end_of_xTaskGenericNotify:
  6576                           	global	_xTaskNotifyFromISR
  6577                           	signat	_xTaskNotifyFromISR,16442
  6578                           	line	4194
  6579  00FD74                     _xTaskNotifyFromISR:
  6580  00FD74  0004FEEE           	goto	f20471
              00000000           
  6581  00FD78                     f20470:
  6582                           
  6583                           ;tasks.c: 4193: BaseType_t xTaskNotifyFromISR( T
                                 askHandle_t xTaskToNotify, uint32_t ulValue, eNo
                                 tifyAction eAction, BaseType_t *pxHigherPriority
                                 TaskWoken )
  6584                           
  6585                           ;tasks.c: 4194: {
  6586                           
  6587                           ;tasks.c: 4195: TCB_t * pxTCB;
  6588                           
  6589                           ;tasks.c: 4196: eNotifyValue eOriginalNotifyStat
                                 e;
  6590                           
  6591                           ;tasks.c: 4197: BaseType_t xReturn = ( ( ( BaseT
                                 ype_t ) 1 ) );
  6592                           
  6593                           	line	4197
  6594  00FD78  00200015           	mov.w	#01h,w5
  6595  00FD7A  002FFF07           	mov.w	#((0+f20476+4)-0),w7
  6596  00FD7C  00478387           	add.w	sp,w7,w7
  6597  00FD7E  00780B85           	mov.w	w5,[w7]
  6598                           ;tasks.c: 4198: UBaseType_t uxSavedInterruptStat
                                 us;
  6599                           
  6600                           ;tasks.c: 4200: ;
  6601                           
  6602                           ;tasks.c: 4218: ;
  6603                           
  6604                           ;tasks.c: 4220: pxTCB = ( TCB_t * ) xTaskToNotif
                                 y;
  6605                           
  6606                           	line	4220
  6607  00FD80  002FFEC7           	mov.w	#((0+f20476+0)-0),w7
  6608  00FD82  00478387           	add.w	sp,w7,w7
  6609  00FD84  00780B80           	mov.w	w0,[w7]
  6610                           ;tasks.c: 4222: uxSavedInterruptStatus = 0;
  6611                           
  6612                           	line	4222
  6613  00FD86  00200005           	mov.w	#0,w5
  6614  00FD88  002FFF27           	mov.w	#((0+f20476+6)-0),w7
  6615  00FD8A  00478387           	add.w	sp,w7,w7
  6616  00FD8C  00780B85           	mov.w	w5,[w7]
  6617                           ;tasks.c: 4223: {
  6618                           
  6619                           ;tasks.c: 4224: eOriginalNotifyState = pxTCB->eN
                                 otifyState;
  6620                           
  6621                           	line	4224
  6622  00FD8E  0097B2EF           	mov.w	[sp+((0+f20476+0)-0)],w5
  6623  00FD90  00B00245           	add.w	#36,w5
  6624  00FD92  002FFEE7           	mov.w	#((0+f20476+2)-0),w7
  6625  00FD94  00478387           	add.w	sp,w7,w7
  6626  00FD96  00784B95           	mov.b	[w5],[w7]
  6627                           ;tasks.c: 4226: pxTCB->eNotifyState = eNotified;
  6628                           
  6629                           	line	4226
  6630  00FD98  00200027           	mov.w	#02h,w7
  6631  00FD9A  002FFEC5           	mov.w	#((0+f20476+0)-0),w5
  6632  00FD9C  00478285           	add.w	sp,w5,w5
  6633  00FD9E  00780095           	mov	[w5],w1
  6634  00FDA0  009860C7           	mov.b	w7,[w1+36]
  6635                           ;tasks.c: 4228: switch( eAction )
  6636                           
  6637                           ;_pxHigherPriorityTaskWoken stored from w6
  6638                           	line	4228
  6639  00FDA2  002FFF47           	mov.w	#((0+f20476+8)-0),w7
  6640  00FDA4  00478387           	add.w	sp,w7,w7
  6641  00FDA6  00780B86           	mov.w	w6,[w7]
  6642                           ;_eAction stored from w4
  6643  00FDA8  002FFF66           	mov.w	#((0+f20476+10)-0),w6
  6644  00FDAA  00478306           	add.w	sp,w6,w6
  6645  00FDAC  00784B04           	mov.b	w4,[w6]
  6646                           ;_ulValue stored from w23
  6647  00FDAE  009FBFC2           	mov.w	w2,[sp+((0+f20476+12)-0)]
  6648  00FDB0  009FBFD3           	mov.w	w3,[sp+((0+f20476+12)-0+2)]
  6649                           ;_xTaskToNotify stored from w0
  6650  00FDB2  002FFFC6           	mov.w	#((0+f20476+16)-0),w6
  6651  00FDB4  00478306           	add.w	sp,w6,w6
  6652  00FDB6  00780B00           	mov.w	w0,[w6]
  6653  00FDB8  0004FE24           	goto	lab965
              00000000           
  6654                           ;tasks.c: 4229: {
  6655                           
  6656                           ;tasks.c: 4230: case eSetBits :
  6657                           
  6658                           	line	4230
  6659  00FDBC                     lab966:
  6660                           ;tasks.c: 4231: pxTCB->ulNotifiedValue |= ulValu
                                 e;
  6661                           
  6662                           	line	4231
  6663  00FDBC  002FFF86           	mov.w	#((0+f20476+12)-0),w6
  6664  00FDBE  00478306           	add.w	sp,w6,w6
  6665  00FDC0  00BE0216           	mov.d	[w6],w4
  6666  00FDC2  0097B36F           	mov.w	[sp+((0+f20476+0)-0)],w6
  6667  00FDC4  00B00206           	add.w	#32,w6
  6668  00FDC6  00780396           	mov.w	[w6],w7
  6669  00FDC8  00739B04           	ior.w	w7,w4,[w6++]
  6670  00FDCA  00780396           	mov.w	[w6],w7
  6671  00FDCC  00739305           	ior.w	w7,w5,[w6--]
  6672                           ;tasks.c: 4232: break;
  6673                           
  6674                           	line	4232
  6675  00FDCE  0004FE44           	goto	lab964
              00000000           
  6676                           ;tasks.c: 4234: case eIncrement :
  6677                           
  6678                           	line	4234
  6679  00FDD2                     lab967:
  6680                           ;tasks.c: 4235: ( pxTCB->ulNotifiedValue )++;
  6681                           
  6682                           	line	4235
  6683  00FDD2  0097B36F           	mov.w	[sp+((0+f20476+0)-0)],w6
  6684  00FDD4  00B00206           	add.w	#32,w6
  6685  00FDD6  00780396           	mov.w	[w6],w7
  6686  00FDD8  00439B61           	add.w	w7,#1,[w6++]
  6687  00FDDA  00780396           	mov.w	[w6],w7
  6688  00FDDC  004B9360           	addc.w	w7,#0,[w6--]
  6689                           ;tasks.c: 4236: break;
  6690                           
  6691                           	line	4236
  6692  00FDDE  0004FE44           	goto	lab964
              00000000           
  6693                           ;tasks.c: 4238: case eSetValueWithOverwrite :
  6694                           
  6695                           	line	4238
  6696  00FDE2                     lab968:
  6697                           ;tasks.c: 4239: pxTCB->ulNotifiedValue = ulValue
                                 ;
  6698                           
  6699                           	line	4239
  6700  00FDE2  002FFF86           	mov.w	#((0+f20476+12)-0),w6
  6701  00FDE4  00478306           	add.w	sp,w6,w6
  6702  00FDE6  00BE0216           	mov.d	[w6],w4
  6703  00FDE8  0097B36F           	mov.w	[sp+((0+f20476+0)-0)],w6
  6704  00FDEA  00B00206           	add.w	#32,w6
  6705  00FDEC  00BE8B04           	mov.d	w4,[w6]
  6706                           ;tasks.c: 4240: break;
  6707                           
  6708                           	line	4240
  6709  00FDEE  0004FE44           	goto	lab964
              00000000           
  6710                           ;tasks.c: 4242: case eSetValueWithoutOverwrite :
  6711                           
  6712                           	line	4242
  6713  00FDF2                     lab969:
  6714                           ;tasks.c: 4243: if( eOriginalNotifyState != eNot
                                 ified )
  6715                           
  6716                           	line	4243
  6717  00FDF2  0097EB6F           	mov.b	[sp+((0+f20476+2)-0)],w6
  6718  00FDF4  00E13462           	cp.b	w6, #2
  6719  00FDF6  00320002           	bra	z,u1281
  6720  00FDF8  0004FE00           	goto	u1280
              00000000           
  6721  00FDFC                     u1281:
  6722  00FDFC  0004FE10           	goto	lab970
              00000000           
  6723  00FE00                     u1280:
  6724                           ;tasks.c: 4244: {
  6725                           
  6726                           ;tasks.c: 4245: pxTCB->ulNotifiedValue = ulValue
                                 ;
  6727                           
  6728                           	line	4245
  6729  00FE00  002FFF86           	mov.w	#((0+f20476+12)-0),w6
  6730  00FE02  00478306           	add.w	sp,w6,w6
  6731  00FE04  00BE0216           	mov.d	[w6],w4
  6732  00FE06  0097B36F           	mov.w	[sp+((0+f20476+0)-0)],w6
  6733  00FE08  00B00206           	add.w	#32,w6
  6734  00FE0A  00BE8B04           	mov.d	w4,[w6]
  6735                           ;tasks.c: 4246: }
  6736                           
  6737                           	line	4246
  6738  00FE0C  0004FE18           	goto	lab971
              00000000           
  6739                           	line	4247
  6740  00FE10                     lab970:
  6741                           ;tasks.c: 4247: else
  6742                           
  6743                           ;tasks.c: 4248: {
  6744                           
  6745                           ;tasks.c: 4250: xReturn = ( ( ( BaseType_t ) 0 )
                                  );
  6746                           
  6747                           	line	4250
  6748  00FE10  00200007           	mov.w	#0,w7
  6749  00FE12  002FFF06           	mov.w	#((0+f20476+4)-0),w6
  6750  00FE14  00478306           	add.w	sp,w6,w6
  6751  00FE16  00780B07           	mov.w	w7,[w6]
  6752                           	line	4251
  6753  00FE18                     lab971:
  6754                           ;tasks.c: 4251: }
  6755                           
  6756                           ;tasks.c: 4252: break;
  6757                           
  6758                           	line	4252
  6759  00FE18  0004FE44           	goto	lab964
              00000000           
  6760                           ;tasks.c: 4254: case eNoAction :
  6761                           
  6762                           	line	4254
  6763  00FE1C                     lab972:
  6764                           ;tasks.c: 4257: break;
  6765                           
  6766                           	line	4257
  6767  00FE1C  0004FE44           	goto	lab964
              00000000           
  6768                           ;tasks.c: 4258: }
  6769                           
  6770                           	line	4258
  6771  00FE20  0004FE44           	goto	lab964
              00000000           
  6772                           	line	4228
  6773  00FE24                     lab965:
  6774  00FE24  0097F36F           	mov.b	[sp+((0+f20476+10)-0)],w6
  6775  00FE26  00FB8306           	ze	w6,w6
  6776  00FE28  00FB8306           	ze	w6,w6
  6777  00FE2A  00780206           	mov.w	w6,w4
  6778  00FE2C  00520260           	sub.w	w4,#0,w4
  6779  00FE2E  0032FFF6           	bra	z,lab972
  6780  00FE30  00520261           	sub.w	w4,#1,w4
  6781  00FE32  0032FFC4           	bra	z,lab966
  6782  00FE34  00520261           	sub.w	w4,#1,w4
  6783  00FE36  0032FFCD           	bra	z,lab967
  6784  00FE38  00520261           	sub.w	w4,#1,w4
  6785  00FE3A  0032FFD3           	bra	z,lab968
  6786  00FE3C  00520261           	sub.w	w4,#1,w4
  6787  00FE3E  0032FFD9           	bra	z,lab969
  6788  00FE40  0004FE44           	goto	lab964
              00000000           
  6789                           
  6790                           	line	4258
  6791  00FE44                     lab964:
  6792                           ;tasks.c: 4263: if( eOriginalNotifyState == eWai
                                 tingNotification )
  6793                           
  6794                           	line	4263
  6795  00FE44  0097EB6F           	mov.b	[sp+((0+f20476+2)-0)],w6
  6796  00FE46  00E13461           	cp.b	w6, #1
  6797  00FE48  003A0002           	bra	nz,u1291
  6798  00FE4A  0004FE52           	goto	u1290
              00000000           
  6799  00FE4E                     u1291:
  6800  00FE4E  0004FEE2           	goto	lab973
              00000000           
  6801  00FE52                     u1290:
  6802                           ;tasks.c: 4264: {
  6803                           
  6804                           ;tasks.c: 4266: ;
  6805                           
  6806                           ;tasks.c: 4268: if( uxSchedulerSuspended == ( UB
                                 aseType_t ) ( ( BaseType_t ) 0 ) )
  6807                           
  6808                           	line	4268
  6809  00FE52  00E2080A           	cp0.w	_uxSchedulerSuspended
  6810  00FE54  003A0002           	bra	nz,u1301
  6811  00FE56  0004FE5E           	goto	u1300
              00000000           
  6812  00FE5A                     u1301:
  6813  00FE5A  0004FE9E           	goto	lab974
              00000000           
  6814  00FE5E                     u1300:
  6815                           ;tasks.c: 4269: {
  6816                           
  6817                           ;tasks.c: 4270: ( void ) uxListRemove( &( pxTCB-
                                 >xGenericListItem ) );
  6818                           
  6819                           	line	4270
  6820  00FE5E  0097B06F           	mov.w	[sp+((0+f20476+0)-0)],w0
  6821  00FE60  00B00020           	add.w	#2,w0
  6822  00FE62  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  6823                           ;tasks.c: 4271: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  6824                           
  6825                           	line	4271
  6826  00FE66  00804076           	mov	_uxTopReadyPriority,w6
  6827  00FE68  0097B3EF           	mov.w	[sp+((0+f20476+0)-0)],w7
  6828  00FE6A  00B00167           	add.w	#22,w7
  6829  00FE6C  00780297           	mov.w	[w7],w5
  6830  00FE6E  00E12806           	cp.w	w5, w6
  6831  00FE70  00360002           	bra	leu,u1311
  6832  00FE72  0004FE7A           	goto	u1310
              00000000           
  6833  00FE76                     u1311:
  6834  00FE76  0004FE82           	goto	lab975
              00000000           
  6835  00FE7A                     u1310:
  6836  00FE7A  0097B3EF           	mov.w	[sp+((0+f20476+0)-0)],w7
  6837  00FE7C  00B00167           	add.w	#22,w7
  6838  00FE7E  00780317           	mov.w	[w7],w6
  6839  00FE80  00884076           	mov	w6,_uxTopReadyPriority
  6840  00FE82                     lab975:
  6841  00FE82  0097B16F           	mov.w	[sp+((0+f20476+0)-0)],w2
  6842  00FE84  00B00022           	add.w	#2,w2
  6843  00FE86  00208406           	mov	#_pxReadyTasksLists,w6
  6844  00FE88  002000A4           	mov.w	#0Ah,w4
  6845  00FE8A  0097B3EF           	mov.w	[sp+((0+f20476+0)-0)],w7
  6846  00FE8C  00B00167           	add.w	#22,w7
  6847  00FE8E  00780297           	mov.w	[w7],w5
  6848  00FE90  00780005           	mov.w	w5,w0
  6849  00FE92  00B80004           	mul.uu	w0,w4,w0
  6850  00FE94  00400006           	add.w	w0,w6,w0
  6851  00FE96  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  6852                           ;tasks.c: 4272: }
  6853                           
  6854                           	line	4272
  6855  00FE9A  0004FEAA           	goto	lab976
              00000000           
  6856                           	line	4273
  6857  00FE9E                     lab974:
  6858                           ;tasks.c: 4273: else
  6859                           
  6860                           ;tasks.c: 4274: {
  6861                           
  6862                           ;tasks.c: 4277: vListInsertEnd( &( xPendingReady
                                 List ), &( pxTCB->xEventListItem ) );
  6863                           
  6864                           	line	4277
  6865  00FE9E  0097B16F           	mov.w	[sp+((0+f20476+0)-0)],w2
  6866  00FEA0  00B000C2           	add.w	#12,w2
  6867  00FEA2  002082C6           	mov.w	#_xPendingReadyList,w6
  6868  00FEA4  00780006           	mov.w	w6,w0
  6869  00FEA6  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  6870                           	line	4278
  6871  00FEAA                     lab976:
  6872                           ;tasks.c: 4278: }
  6873                           
  6874                           ;tasks.c: 4280: if( pxTCB->uxPriority > pxCurren
                                 tTCB->uxPriority )
  6875                           
  6876                           	line	4280
  6877  00FEAA  00208006           	mov.w	#_pxCurrentTCB,w6
  6878  00FEAC  00780316           	mov.w	[w6],w6
  6879  00FEAE  00B00166           	add.w	#22,w6
  6880  00FEB0  00780396           	mov.w	[w6],w7
  6881  00FEB2  0097B2EF           	mov.w	[sp+((0+f20476+0)-0)],w5
  6882  00FEB4  00B00165           	add.w	#22,w5
  6883  00FEB6  00780315           	mov.w	[w5],w6
  6884  00FEB8  00E13007           	cp.w	w6, w7
  6885  00FEBA  00360002           	bra	leu,u1321
  6886  00FEBC  0004FEC4           	goto	u1320
              00000000           
  6887  00FEC0                     u1321:
  6888  00FEC0  0004FEE2           	goto	lab977
              00000000           
  6889  00FEC4                     u1320:
  6890                           ;tasks.c: 4281: {
  6891                           
  6892                           ;tasks.c: 4284: if( pxHigherPriorityTaskWoken !=
                                  (0) )
  6893                           
  6894                           	line	4284
  6895  00FEC4  002FFF46           	mov.w	#((0+f20476+8)-0),w6
  6896  00FEC6  00478306           	add.w	sp,w6,w6
  6897  00FEC8  00E00016           	cp0.w	[w6]
  6898  00FECA  00320002           	bra	z,u1331
  6899  00FECC  0004FED4           	goto	u1330
              00000000           
  6900  00FED0                     u1331:
  6901  00FED0  0004FEDE           	goto	lab978
              00000000           
  6902  00FED4                     u1330:
  6903                           ;tasks.c: 4285: {
  6904                           
  6905                           ;tasks.c: 4286: *pxHigherPriorityTaskWoken = ( (
                                  BaseType_t ) 1 );
  6906                           
  6907                           	line	4286
  6908  00FED4  002FFF46           	mov.w	#((0+f20476+8)-0),w6
  6909  00FED6  00478306           	add.w	sp,w6,w6
  6910  00FED8  00780316           	mov.w	[w6],w6
  6911  00FEDA  00200017           	mov.w	#01h,w7
  6912  00FEDC  00780B07           	mov.w	w7,[w6]
  6913                           	line	4287
  6914  00FEDE                     lab978:
  6915                           ;tasks.c: 4287: }
  6916                           
  6917                           ;tasks.c: 4288: }
  6918                           
  6919                           	line	4288
  6920  00FEDE  0004FEE2           	goto	lab979
              00000000           
  6921                           	line	4289
  6922  00FEE2                     lab977:
  6923                           ;tasks.c: 4289: else
  6924                           
  6925                           ;tasks.c: 4290: {
  6926                           
  6927                           ;tasks.c: 4291: ;
  6928                           
  6929                           	line	4292
  6930  00FEE2                     lab979:
  6931                           	line	4293
  6932  00FEE2                     lab973:
  6933                           ;tasks.c: 4292: }
  6934                           
  6935                           ;tasks.c: 4293: }
  6936                           
  6937                           ;tasks.c: 4294: }
  6938                           
  6939                           ;tasks.c: 4295: ( void ) uxSavedInterruptStatus;
  6940                           
  6941                           ;tasks.c: 4297: return xReturn;
  6942                           
  6943                           	line	4297
  6944  00FEE2  0097B80F           	mov.w	[sp+((0+f20476+4)-0)], w0
  6945  00FEE4  00780000           	mov.w	w0,w0
  6946  00FEE6  0004FEEA           	goto	lab963
              00000000           
  6947                           ;tasks.c: 4298: }
  6948                           
  6949                           	line	4298
  6950  00FEEA                     lab963:
  6951                           	global	_xTaskNotifyFromISR
  6952                           
  6953  00FEEA  00B1014F           	sub.w	#20,sp
  6954  00FEEC  00060000           	return
  6955                           	line	4194
  6956                           
  6957  00FEEE                     f20471:
  6958                           
  6959  00FEEE  00B0014F           	add.w	#20,sp
  6960  00FEF0  0004FD78           	goto	f20470
              00000000           
  6961  000000                     f20476	equ	-20		;stack offset for auto's
  6962  000000                     f20473	equ	-24		;stack offset for parameters
  6963                           	line	0
  6964                           	global	 __end_of_xTaskNotifyFromISR
  6965  00FEF4                     __end_of_xTaskNotifyFromISR:
  6966                           	global	_vTaskNotifyGiveFromISR
  6967                           	signat	_vTaskNotifyGiveFromISR,8250
  6968                           	line	4306
  6969  00FEF4                     _vTaskNotifyGiveFromISR:
  6970  00FEF4  0004FFD4           	goto	f20481
              00000000           
  6971  00FEF8                     f20480:
  6972                           
  6973                           ;tasks.c: 4305: void vTaskNotifyGiveFromISR( Tas
                                 kHandle_t xTaskToNotify, BaseType_t *pxHigherPri
                                 orityTaskWoken )
  6974                           
  6975                           ;tasks.c: 4306: {
  6976                           
  6977                           ;tasks.c: 4307: TCB_t * pxTCB;
  6978                           
  6979                           ;tasks.c: 4308: eNotifyValue eOriginalNotifyStat
                                 e;
  6980                           
  6981                           ;tasks.c: 4309: UBaseType_t uxSavedInterruptStat
                                 us;
  6982                           
  6983                           ;tasks.c: 4311: ;
  6984                           
  6985                           ;tasks.c: 4329: ;
  6986                           
  6987                           ;tasks.c: 4331: pxTCB = ( TCB_t * ) xTaskToNotif
                                 y;
  6988                           
  6989                           	line	4331
  6990  00FEF8  002FFF46           	mov.w	#((0+f20486+0)-0),w6
  6991  00FEFA  00478306           	add.w	sp,w6,w6
  6992  00FEFC  00780B00           	mov.w	w0,[w6]
  6993                           ;tasks.c: 4333: uxSavedInterruptStatus = 0;
  6994                           
  6995                           	line	4333
  6996  00FEFE  00200007           	mov.w	#0,w7
  6997  00FF00  002FFF86           	mov.w	#((0+f20486+4)-0),w6
  6998  00FF02  00478306           	add.w	sp,w6,w6
  6999  00FF04  00780B07           	mov.w	w7,[w6]
  7000                           ;tasks.c: 4334: {
  7001                           
  7002                           ;tasks.c: 4335: eOriginalNotifyState = pxTCB->eN
                                 otifyState;
  7003                           
  7004                           	line	4335
  7005  00FF06  0097BBAF           	mov.w	[sp+((0+f20486+0)-0)],w7
  7006  00FF08  00B00247           	add.w	#36,w7
  7007  00FF0A  002FFF66           	mov.w	#((0+f20486+2)-0),w6
  7008  00FF0C  00478306           	add.w	sp,w6,w6
  7009  00FF0E  00784B17           	mov.b	[w7],[w6]
  7010                           ;tasks.c: 4336: pxTCB->eNotifyState = eNotified;
  7011                           
  7012                           	line	4336
  7013  00FF10  00200026           	mov.w	#02h,w6
  7014  00FF12  002FFF47           	mov.w	#((0+f20486+0)-0),w7
  7015  00FF14  00478387           	add.w	sp,w7,w7
  7016  00FF16  00780297           	mov	[w7],w5
  7017  00FF18  009862C6           	mov.b	w6,[w5+36]
  7018                           ;tasks.c: 4340: ( pxTCB->ulNotifiedValue )++;
  7019                           
  7020                           	line	4340
  7021  00FF1A  0097BB2F           	mov.w	[sp+((0+f20486+0)-0)],w6
  7022  00FF1C  00B00206           	add.w	#32,w6
  7023  00FF1E  00780396           	mov.w	[w6],w7
  7024  00FF20  00439B61           	add.w	w7,#1,[w6++]
  7025  00FF22  00780396           	mov.w	[w6],w7
  7026  00FF24  004B9360           	addc.w	w7,#0,[w6--]
  7027                           ;tasks.c: 4344: if( eOriginalNotifyState == eWai
                                 tingNotification )
  7028                           
  7029                           ;_pxHigherPriorityTaskWoken stored from w2
  7030                           	line	4344
  7031  00FF26  002FFFA6           	mov.w	#((0+f20486+6)-0),w6
  7032  00FF28  00478306           	add.w	sp,w6,w6
  7033  00FF2A  00780B02           	mov.w	w2,[w6]
  7034                           ;_xTaskToNotify stored from w0
  7035  00FF2C  002FFFC6           	mov.w	#((0+f20486+8)-0),w6
  7036  00FF2E  00478306           	add.w	sp,w6,w6
  7037  00FF30  00780B00           	mov.w	w0,[w6]
  7038  00FF32  0097F36F           	mov.b	[sp+((0+f20486+2)-0)],w6
  7039  00FF34  00E13461           	cp.b	w6, #1
  7040  00FF36  003A0002           	bra	nz,u1341
  7041  00FF38  0004FF40           	goto	u1340
              00000000           
  7042  00FF3C                     u1341:
  7043  00FF3C  0004FFD0           	goto	lab981
              00000000           
  7044  00FF40                     u1340:
  7045                           ;tasks.c: 4345: {
  7046                           
  7047                           ;tasks.c: 4347: ;
  7048                           
  7049                           ;tasks.c: 4349: if( uxSchedulerSuspended == ( UB
                                 aseType_t ) ( ( BaseType_t ) 0 ) )
  7050                           
  7051                           	line	4349
  7052  00FF40  00E2080A           	cp0.w	_uxSchedulerSuspended
  7053  00FF42  003A0002           	bra	nz,u1351
  7054  00FF44  0004FF4C           	goto	u1350
              00000000           
  7055  00FF48                     u1351:
  7056  00FF48  0004FF8C           	goto	lab982
              00000000           
  7057  00FF4C                     u1350:
  7058                           ;tasks.c: 4350: {
  7059                           
  7060                           ;tasks.c: 4351: ( void ) uxListRemove( &( pxTCB-
                                 >xGenericListItem ) );
  7061                           
  7062                           	line	4351
  7063  00FF4C  0097B82F           	mov.w	[sp+((0+f20486+0)-0)],w0
  7064  00FF4E  00B00020           	add.w	#2,w0
  7065  00FF50  0002C81C           	call	(_uxListRemove)	;0 bytes adjustment
              00000000           
  7066                           ;tasks.c: 4352: ; { if( ( ( pxTCB )->uxPriority 
                                 ) > uxTopReadyPriority ) { uxTopReadyPriority = 
                                 ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( 
                                 &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ),
                                  &( ( pxTCB )->xGenericListItem ) );
  7067                           
  7068                           	line	4352
  7069  00FF54  00804076           	mov	_uxTopReadyPriority,w6
  7070  00FF56  0097BBAF           	mov.w	[sp+((0+f20486+0)-0)],w7
  7071  00FF58  00B00167           	add.w	#22,w7
  7072  00FF5A  00780297           	mov.w	[w7],w5
  7073  00FF5C  00E12806           	cp.w	w5, w6
  7074  00FF5E  00360002           	bra	leu,u1361
  7075  00FF60  0004FF68           	goto	u1360
              00000000           
  7076  00FF64                     u1361:
  7077  00FF64  0004FF70           	goto	lab983
              00000000           
  7078  00FF68                     u1360:
  7079  00FF68  0097BBAF           	mov.w	[sp+((0+f20486+0)-0)],w7
  7080  00FF6A  00B00167           	add.w	#22,w7
  7081  00FF6C  00780317           	mov.w	[w7],w6
  7082  00FF6E  00884076           	mov	w6,_uxTopReadyPriority
  7083  00FF70                     lab983:
  7084  00FF70  0097B92F           	mov.w	[sp+((0+f20486+0)-0)],w2
  7085  00FF72  00B00022           	add.w	#2,w2
  7086  00FF74  00208406           	mov	#_pxReadyTasksLists,w6
  7087  00FF76  002000A4           	mov.w	#0Ah,w4
  7088  00FF78  0097BBAF           	mov.w	[sp+((0+f20486+0)-0)],w7
  7089  00FF7A  00B00167           	add.w	#22,w7
  7090  00FF7C  00780297           	mov.w	[w7],w5
  7091  00FF7E  00780005           	mov.w	w5,w0
  7092  00FF80  00B80004           	mul.uu	w0,w4,w0
  7093  00FF82  00400006           	add.w	w0,w6,w0
  7094  00FF84  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  7095                           ;tasks.c: 4353: }
  7096                           
  7097                           	line	4353
  7098  00FF88  0004FF98           	goto	lab984
              00000000           
  7099                           	line	4354
  7100  00FF8C                     lab982:
  7101                           ;tasks.c: 4354: else
  7102                           
  7103                           ;tasks.c: 4355: {
  7104                           
  7105                           ;tasks.c: 4358: vListInsertEnd( &( xPendingReady
                                 List ), &( pxTCB->xEventListItem ) );
  7106                           
  7107                           	line	4358
  7108  00FF8C  0097B92F           	mov.w	[sp+((0+f20486+0)-0)],w2
  7109  00FF8E  00B000C2           	add.w	#12,w2
  7110  00FF90  002082C6           	mov.w	#_xPendingReadyList,w6
  7111  00FF92  00780006           	mov.w	w6,w0
  7112  00FF94  0002C70E           	call	(_vListInsertEnd)	;0 bytes adjustment
              00000000           
  7113                           	line	4359
  7114  00FF98                     lab984:
  7115                           ;tasks.c: 4359: }
  7116                           
  7117                           ;tasks.c: 4361: if( pxTCB->uxPriority > pxCurren
                                 tTCB->uxPriority )
  7118                           
  7119                           	line	4361
  7120  00FF98  00208006           	mov.w	#_pxCurrentTCB,w6
  7121  00FF9A  00780316           	mov.w	[w6],w6
  7122  00FF9C  00B00166           	add.w	#22,w6
  7123  00FF9E  00780396           	mov.w	[w6],w7
  7124  00FFA0  0097BAAF           	mov.w	[sp+((0+f20486+0)-0)],w5
  7125  00FFA2  00B00165           	add.w	#22,w5
  7126  00FFA4  00780315           	mov.w	[w5],w6
  7127  00FFA6  00E13007           	cp.w	w6, w7
  7128  00FFA8  00360002           	bra	leu,u1371
  7129  00FFAA  0004FFB2           	goto	u1370
              00000000           
  7130  00FFAE                     u1371:
  7131  00FFAE  0004FFD0           	goto	lab985
              00000000           
  7132  00FFB2                     u1370:
  7133                           ;tasks.c: 4362: {
  7134                           
  7135                           ;tasks.c: 4365: if( pxHigherPriorityTaskWoken !=
                                  (0) )
  7136                           
  7137                           	line	4365
  7138  00FFB2  002FFFA6           	mov.w	#((0+f20486+6)-0),w6
  7139  00FFB4  00478306           	add.w	sp,w6,w6
  7140  00FFB6  00E00016           	cp0.w	[w6]
  7141  00FFB8  00320002           	bra	z,u1381
  7142  00FFBA  0004FFC2           	goto	u1380
              00000000           
  7143  00FFBE                     u1381:
  7144  00FFBE  0004FFCC           	goto	lab986
              00000000           
  7145  00FFC2                     u1380:
  7146                           ;tasks.c: 4366: {
  7147                           
  7148                           ;tasks.c: 4367: *pxHigherPriorityTaskWoken = ( (
                                  BaseType_t ) 1 );
  7149                           
  7150                           	line	4367
  7151  00FFC2  002FFFA6           	mov.w	#((0+f20486+6)-0),w6
  7152  00FFC4  00478306           	add.w	sp,w6,w6
  7153  00FFC6  00780316           	mov.w	[w6],w6
  7154  00FFC8  00200017           	mov.w	#01h,w7
  7155  00FFCA  00780B07           	mov.w	w7,[w6]
  7156                           	line	4368
  7157  00FFCC                     lab986:
  7158                           ;tasks.c: 4368: }
  7159                           
  7160                           ;tasks.c: 4369: }
  7161                           
  7162                           	line	4369
  7163  00FFCC  0004FFD0           	goto	lab987
              00000000           
  7164                           	line	4370
  7165  00FFD0                     lab985:
  7166                           ;tasks.c: 4370: else
  7167                           
  7168                           ;tasks.c: 4371: {
  7169                           
  7170                           ;tasks.c: 4372: ;
  7171                           
  7172                           	line	4373
  7173  00FFD0                     lab987:
  7174                           	line	4374
  7175  00FFD0                     lab981:
  7176                           ;tasks.c: 4373: }
  7177                           
  7178                           ;tasks.c: 4374: }
  7179                           
  7180                           ;tasks.c: 4375: }
  7181                           
  7182                           ;tasks.c: 4376: ( void ) uxSavedInterruptStatus;
  7183                           
  7184                           ;tasks.c: 4377: }
  7185                           
  7186                           	line	4377
  7187  00FFD0                     lab980:
  7188                           	global	_vTaskNotifyGiveFromISR
  7189                           
  7190  00FFD0  00B100CF           	sub.w	#12,sp
  7191  00FFD2  00060000           	return
  7192                           	line	4306
  7193                           
  7194  00FFD4                     f20481:
  7195                           
  7196  00FFD4  00B000CF           	add.w	#12,sp
  7197  00FFD6  0004FEF8           	goto	f20480
              00000000           
  7198  000000                     f20486	equ	-12		;stack offset for auto's
  7199  000000                     f20483	equ	-16		;stack offset for parameters
  7200                           	line	0
  7201                           	global	 __end_of_vTaskNotifyGiveFromISR
  7202  00FFDA                     __end_of_vTaskNotifyGiveFromISR:
  7203                           	psect	mconst,class=MCONST,space=1,reloc=2,pad=2
  7204                           	psect	mconst
  7205  008104                     u19:
  7206                           ; strings
  7207  008104                     	ds	5
  7208                           	psect	const,class=CONST,delta=1,reloc=4,width=2
                                 ,pad=4
  7209                           	psect	const
  7210                           ; strings
  7211  000208  49                 	db	73	;'I'
  7212  000209  44 00 00           	db	68	;'D'
  7213  00020C  4C                 	db	76	;'L'
  7214  00020D  45 00 00           	db	69	;'E'
  7215  000210  00                 	db	0
  7216  000000                     _ACCAH	equ	36
  7217  000000                     _ACCAL	equ	34
  7218  000000                     _ACCAU	equ	38
  7219  000000                     _ACCAUbits	equ	38
  7220  000000                     _ACCBH	equ	42
  7221  000000                     _ACCBL	equ	40
  7222  000000                     _ACCBU	equ	44
  7223  000000                     _ACCBUbits	equ	44
  7224  000000                     _ADCBUF0	equ	640
  7225  000000                     _ADCBUF0bits	equ	640
  7226  000000                     _ADCBUF1	equ	642
  7227  000000                     _ADCBUF1bits	equ	642
  7228  000000                     _ADCBUF2	equ	644
  7229  000000                     _ADCBUF2bits	equ	644
  7230  000000                     _ADCBUF3	equ	646
  7231  000000                     _ADCBUF3bits	equ	646
  7232  000000                     _ADCBUF4	equ	648
  7233  000000                     _ADCBUF4bits	equ	648
  7234  000000                     _ADCBUF5	equ	650
  7235  000000                     _ADCBUF5bits	equ	650
  7236  000000                     _ADCBUF6	equ	652
  7237  000000                     _ADCBUF6bits	equ	652
  7238  000000                     _ADCBUF7	equ	654
  7239  000000                     _ADCBUF7bits	equ	654
  7240  000000                     _ADCBUF8	equ	656
  7241  000000                     _ADCBUF8bits	equ	656
  7242  000000                     _ADCBUF9	equ	658
  7243  000000                     _ADCBUF9bits	equ	658
  7244  000000                     _ADCBUFA	equ	660
  7245  000000                     _ADCBUFAbits	equ	660
  7246  000000                     _ADCBUFB	equ	662
  7247  000000                     _ADCBUFBbits	equ	662
  7248  000000                     _ADCBUFC	equ	664
  7249  000000                     _ADCBUFCbits	equ	664
  7250  000000                     _ADCBUFD	equ	666
  7251  000000                     _ADCBUFDbits	equ	666
  7252  000000                     _ADCBUFE	equ	668
  7253  000000                     _ADCBUFEbits	equ	668
  7254  000000                     _ADCBUFF	equ	670
  7255  000000                     _ADCBUFFbits	equ	670
  7256  000000                     _ADCHS	equ	678
  7257  000000                     _ADCHSbits	equ	678
  7258  000000                     _ADCON1	equ	672
  7259  000000                     _ADCON1bits	equ	672
  7260  000000                     _ADCON2	equ	674
  7261  000000                     _ADCON2bits	equ	674
  7262  000000                     _ADCON3	equ	676
  7263  000000                     _ADCON3bits	equ	676
  7264  000000                     _ADCSSL	equ	682
  7265  000000                     _ADCSSLbits	equ	682
  7266  000000                     _ADPCFG	equ	680
  7267  000000                     _ADPCFGbits	equ	680
  7268  000000                     _BSRAM	equ	1872
  7269  000000                     _BSRAMbits	equ	1872
  7270  000000                     _C1CFG1	equ	914
  7271  000000                     _C1CFG1bits	equ	914
  7272  000000                     _C1CFG2	equ	916
  7273  000000                     _C1CFG2bits	equ	916
  7274  000000                     _C1CTRL	equ	912
  7275  000000                     _C1CTRLbits	equ	912
  7276  000000                     _C1EC	equ	922
  7277  000000                     _C1ECbits	equ	922
  7278  000000                     _C1INTE	equ	920
  7279  000000                     _C1INTEbits	equ	920
  7280  000000                     _C1INTF	equ	918
  7281  000000                     _C1INTFbits	equ	918
  7282  000000                     _C1RX0B1	equ	902
  7283  000000                     _C1RX0B1bits	equ	902
  7284  000000                     _C1RX0B2	equ	904
  7285  000000                     _C1RX0B2bits	equ	904
  7286  000000                     _C1RX0B3	equ	906
  7287  000000                     _C1RX0B3bits	equ	906
  7288  000000                     _C1RX0B4	equ	908
  7289  000000                     _C1RX0B4bits	equ	908
  7290  000000                     _C1RX0CON	equ	910
  7291  000000                     _C1RX0CONbits	equ	910
  7292  000000                     _C1RX0DLC	equ	900
  7293  000000                     _C1RX0DLCbits	equ	900
  7294  000000                     _C1RX0EID	equ	898
  7295  000000                     _C1RX0EIDbits	equ	898
  7296  000000                     _C1RX0SID	equ	896
  7297  000000                     _C1RX0SIDbits	equ	896
  7298  000000                     _C1RX1B1	equ	886
  7299  000000                     _C1RX1B1bits	equ	886
  7300  000000                     _C1RX1B2	equ	888
  7301  000000                     _C1RX1B2bits	equ	888
  7302  000000                     _C1RX1B3	equ	890
  7303  000000                     _C1RX1B3bits	equ	890
  7304  000000                     _C1RX1B4	equ	892
  7305  000000                     _C1RX1B4bits	equ	892
  7306  000000                     _C1RX1CON	equ	894
  7307  000000                     _C1RX1CONbits	equ	894
  7308  000000                     _C1RX1DLC	equ	884
  7309  000000                     _C1RX1DLCbits	equ	884
  7310  000000                     _C1RX1EID	equ	882
  7311  000000                     _C1RX1EIDbits	equ	882
  7312  000000                     _C1RX1SID	equ	880
  7313  000000                     _C1RX1SIDbits	equ	880
  7314  000000                     _C1RXF0EIDH	equ	770
  7315  000000                     _C1RXF0EIDHbits	equ	770
  7316  000000                     _C1RXF0EIDL	equ	772
  7317  000000                     _C1RXF0EIDLbits	equ	772
  7318  000000                     _C1RXF0SID	equ	768
  7319  000000                     _C1RXF0SIDbits	equ	768
  7320  000000                     _C1RXF1EIDH	equ	778
  7321  000000                     _C1RXF1EIDHbits	equ	778
  7322  000000                     _C1RXF1EIDL	equ	780
  7323  000000                     _C1RXF1EIDLbits	equ	780
  7324  000000                     _C1RXF1SID	equ	776
  7325  000000                     _C1RXF1SIDbits	equ	776
  7326  000000                     _C1RXF2EIDH	equ	786
  7327  000000                     _C1RXF2EIDHbits	equ	786
  7328  000000                     _C1RXF2EIDL	equ	788
  7329  000000                     _C1RXF2EIDLbits	equ	788
  7330  000000                     _C1RXF2SID	equ	784
  7331  000000                     _C1RXF2SIDbits	equ	784
  7332  000000                     _C1RXF3EIDH	equ	794
  7333  000000                     _C1RXF3EIDHbits	equ	794
  7334  000000                     _C1RXF3EIDL	equ	796
  7335  000000                     _C1RXF3EIDLbits	equ	796
  7336  000000                     _C1RXF3SID	equ	792
  7337  000000                     _C1RXF3SIDbits	equ	792
  7338  000000                     _C1RXF4EIDH	equ	802
  7339  000000                     _C1RXF4EIDHbits	equ	802
  7340  000000                     _C1RXF4EIDL	equ	804
  7341  000000                     _C1RXF4EIDLbits	equ	804
  7342  000000                     _C1RXF4SID	equ	800
  7343  000000                     _C1RXF4SIDbits	equ	800
  7344  000000                     _C1RXF5EIDH	equ	810
  7345  000000                     _C1RXF5EIDHbits	equ	810
  7346  000000                     _C1RXF5EIDL	equ	812
  7347  000000                     _C1RXF5EIDLbits	equ	812
  7348  000000                     _C1RXF5SID	equ	808
  7349  000000                     _C1RXF5SIDbits	equ	808
  7350  000000                     _C1RXM0EIDH	equ	818
  7351  000000                     _C1RXM0EIDHbits	equ	818
  7352  000000                     _C1RXM0EIDL	equ	820
  7353  000000                     _C1RXM0EIDLbits	equ	820
  7354  000000                     _C1RXM0SID	equ	816
  7355  000000                     _C1RXM0SIDbits	equ	816
  7356  000000                     _C1RXM1EIDH	equ	826
  7357  000000                     _C1RXM1EIDHbits	equ	826
  7358  000000                     _C1RXM1EIDL	equ	828
  7359  000000                     _C1RXM1EIDLbits	equ	828
  7360  000000                     _C1RXM1SID	equ	824
  7361  000000                     _C1RXM1SIDbits	equ	824
  7362  000000                     _C1TX0B1	equ	870
  7363  000000                     _C1TX0B1bits	equ	870
  7364  000000                     _C1TX0B2	equ	872
  7365  000000                     _C1TX0B2bits	equ	872
  7366  000000                     _C1TX0B3	equ	874
  7367  000000                     _C1TX0B3bits	equ	874
  7368  000000                     _C1TX0B4	equ	876
  7369  000000                     _C1TX0B4bits	equ	876
  7370  000000                     _C1TX0CON	equ	878
  7371  000000                     _C1TX0CONbits	equ	878
  7372  000000                     _C1TX0DLC	equ	868
  7373  000000                     _C1TX0DLCbits	equ	868
  7374  000000                     _C1TX0EID	equ	866
  7375  000000                     _C1TX0EIDbits	equ	866
  7376  000000                     _C1TX0SID	equ	864
  7377  000000                     _C1TX0SIDbits	equ	864
  7378  000000                     _C1TX1B1	equ	854
  7379  000000                     _C1TX1B1bits	equ	854
  7380  000000                     _C1TX1B2	equ	856
  7381  000000                     _C1TX1B2bits	equ	856
  7382  000000                     _C1TX1B3	equ	858
  7383  000000                     _C1TX1B3bits	equ	858
  7384  000000                     _C1TX1B4	equ	860
  7385  000000                     _C1TX1B4bits	equ	860
  7386  000000                     _C1TX1CON	equ	862
  7387  000000                     _C1TX1CONbits	equ	862
  7388  000000                     _C1TX1DLC	equ	852
  7389  000000                     _C1TX1DLCbits	equ	852
  7390  000000                     _C1TX1EID	equ	850
  7391  000000                     _C1TX1EIDbits	equ	850
  7392  000000                     _C1TX1SID	equ	848
  7393  000000                     _C1TX1SIDbits	equ	848
  7394  000000                     _C1TX2B1	equ	838
  7395  000000                     _C1TX2B1bits	equ	838
  7396  000000                     _C1TX2B2	equ	840
  7397  000000                     _C1TX2B2bits	equ	840
  7398  000000                     _C1TX2B3	equ	842
  7399  000000                     _C1TX2B3bits	equ	842
  7400  000000                     _C1TX2B4	equ	844
  7401  000000                     _C1TX2B4bits	equ	844
  7402  000000                     _C1TX2CON	equ	846
  7403  000000                     _C1TX2CONbits	equ	846
  7404  000000                     _C1TX2DLC	equ	836
  7405  000000                     _C1TX2DLCbits	equ	836
  7406  000000                     _C1TX2EID	equ	834
  7407  000000                     _C1TX2EIDbits	equ	834
  7408  000000                     _C1TX2SID	equ	832
  7409  000000                     _C1TX2SIDbits	equ	832
  7410  000000                     _C2CFG1	equ	1106
  7411  000000                     _C2CFG1bits	equ	1106
  7412  000000                     _C2CFG2	equ	1108
  7413  000000                     _C2CFG2bits	equ	1108
  7414  000000                     _C2CTRL	equ	1104
  7415  000000                     _C2CTRLbits	equ	1104
  7416  000000                     _C2EC	equ	1114
  7417  000000                     _C2ECbits	equ	1114
  7418  000000                     _C2INTE	equ	1112
  7419  000000                     _C2INTEbits	equ	1112
  7420  000000                     _C2INTF	equ	1110
  7421  000000                     _C2INTFbits	equ	1110
  7422  000000                     _C2RX0B1	equ	1094
  7423  000000                     _C2RX0B1bits	equ	1094
  7424  000000                     _C2RX0B2	equ	1096
  7425  000000                     _C2RX0B2bits	equ	1096
  7426  000000                     _C2RX0B3	equ	1098
  7427  000000                     _C2RX0B3bits	equ	1098
  7428  000000                     _C2RX0B4	equ	1100
  7429  000000                     _C2RX0B4bits	equ	1100
  7430  000000                     _C2RX0CON	equ	1102
  7431  000000                     _C2RX0CONbits	equ	1102
  7432  000000                     _C2RX0DLC	equ	1092
  7433  000000                     _C2RX0DLCbits	equ	1092
  7434  000000                     _C2RX0EID	equ	1090
  7435  000000                     _C2RX0EIDbits	equ	1090
  7436  000000                     _C2RX0SID	equ	1088
  7437  000000                     _C2RX0SIDbits	equ	1088
  7438  000000                     _C2RX1B1	equ	1078
  7439  000000                     _C2RX1B1bits	equ	1078
  7440  000000                     _C2RX1B2	equ	1080
  7441  000000                     _C2RX1B2bits	equ	1080
  7442  000000                     _C2RX1B3	equ	1082
  7443  000000                     _C2RX1B3bits	equ	1082
  7444  000000                     _C2RX1B4	equ	1084
  7445  000000                     _C2RX1B4bits	equ	1084
  7446  000000                     _C2RX1CON	equ	1086
  7447  000000                     _C2RX1CONbits	equ	1086
  7448  000000                     _C2RX1DLC	equ	1076
  7449  000000                     _C2RX1DLCbits	equ	1076
  7450  000000                     _C2RX1EID	equ	1074
  7451  000000                     _C2RX1EIDbits	equ	1074
  7452  000000                     _C2RX1SID	equ	1072
  7453  000000                     _C2RX1SIDbits	equ	1072
  7454  000000                     _C2RXF0EIDH	equ	962
  7455  000000                     _C2RXF0EIDHbits	equ	962
  7456  000000                     _C2RXF0EIDL	equ	964
  7457  000000                     _C2RXF0EIDLbits	equ	964
  7458  000000                     _C2RXF0SID	equ	960
  7459  000000                     _C2RXF0SIDbits	equ	960
  7460  000000                     _C2RXF1EIDH	equ	970
  7461  000000                     _C2RXF1EIDHbits	equ	970
  7462  000000                     _C2RXF1EIDL	equ	972
  7463  000000                     _C2RXF1EIDLbits	equ	972
  7464  000000                     _C2RXF1SID	equ	968
  7465  000000                     _C2RXF1SIDbits	equ	968
  7466  000000                     _C2RXF2EIDH	equ	978
  7467  000000                     _C2RXF2EIDHbits	equ	978
  7468  000000                     _C2RXF2EIDL	equ	980
  7469  000000                     _C2RXF2EIDLbits	equ	980
  7470  000000                     _C2RXF2SID	equ	976
  7471  000000                     _C2RXF2SIDbits	equ	976
  7472  000000                     _C2RXF3EIDH	equ	986
  7473  000000                     _C2RXF3EIDHbits	equ	986
  7474  000000                     _C2RXF3EIDL	equ	988
  7475  000000                     _C2RXF3EIDLbits	equ	988
  7476  000000                     _C2RXF3SID	equ	984
  7477  000000                     _C2RXF3SIDbits	equ	984
  7478  000000                     _C2RXF4EIDH	equ	994
  7479  000000                     _C2RXF4EIDHbits	equ	994
  7480  000000                     _C2RXF4EIDL	equ	996
  7481  000000                     _C2RXF4EIDLbits	equ	996
  7482  000000                     _C2RXF4SID	equ	992
  7483  000000                     _C2RXF4SIDbits	equ	992
  7484  000000                     _C2RXF5EIDH	equ	1002
  7485  000000                     _C2RXF5EIDHbits	equ	1002
  7486  000000                     _C2RXF5EIDL	equ	1004
  7487  000000                     _C2RXF5EIDLbits	equ	1004
  7488  000000                     _C2RXF5SID	equ	1000
  7489  000000                     _C2RXF5SIDbits	equ	1000
  7490  000000                     _C2RXM0EIDH	equ	1010
  7491  000000                     _C2RXM0EIDHbits	equ	1010
  7492  000000                     _C2RXM0EIDL	equ	1012
  7493  000000                     _C2RXM0EIDLbits	equ	1012
  7494  000000                     _C2RXM0SID	equ	1008
  7495  000000                     _C2RXM0SIDbits	equ	1008
  7496  000000                     _C2RXM1EIDH	equ	1018
  7497  000000                     _C2RXM1EIDHbits	equ	1018
  7498  000000                     _C2RXM1EIDL	equ	1020
  7499  000000                     _C2RXM1EIDLbits	equ	1020
  7500  000000                     _C2RXM1SID	equ	1016
  7501  000000                     _C2RXM1SIDbits	equ	1016
  7502  000000                     _C2TX0B1	equ	1062
  7503  000000                     _C2TX0B1bits	equ	1062
  7504  000000                     _C2TX0B2	equ	1064
  7505  000000                     _C2TX0B2bits	equ	1064
  7506  000000                     _C2TX0B3	equ	1066
  7507  000000                     _C2TX0B3bits	equ	1066
  7508  000000                     _C2TX0B4	equ	1068
  7509  000000                     _C2TX0B4bits	equ	1068
  7510  000000                     _C2TX0CON	equ	1070
  7511  000000                     _C2TX0CONbits	equ	1070
  7512  000000                     _C2TX0DLC	equ	1060
  7513  000000                     _C2TX0DLCbits	equ	1060
  7514  000000                     _C2TX0EID	equ	1058
  7515  000000                     _C2TX0EIDbits	equ	1058
  7516  000000                     _C2TX0SID	equ	1056
  7517  000000                     _C2TX0SIDbits	equ	1056
  7518  000000                     _C2TX1B1	equ	1046
  7519  000000                     _C2TX1B1bits	equ	1046
  7520  000000                     _C2TX1B2	equ	1048
  7521  000000                     _C2TX1B2bits	equ	1048
  7522  000000                     _C2TX1B3	equ	1050
  7523  000000                     _C2TX1B3bits	equ	1050
  7524  000000                     _C2TX1B4	equ	1052
  7525  000000                     _C2TX1B4bits	equ	1052
  7526  000000                     _C2TX1CON	equ	1054
  7527  000000                     _C2TX1CONbits	equ	1054
  7528  000000                     _C2TX1DLC	equ	1044
  7529  000000                     _C2TX1DLCbits	equ	1044
  7530  000000                     _C2TX1EID	equ	1042
  7531  000000                     _C2TX1EIDbits	equ	1042
  7532  000000                     _C2TX1SID	equ	1040
  7533  000000                     _C2TX1SIDbits	equ	1040
  7534  000000                     _C2TX2B1	equ	1030
  7535  000000                     _C2TX2B1bits	equ	1030
  7536  000000                     _C2TX2B2	equ	1032
  7537  000000                     _C2TX2B2bits	equ	1032
  7538  000000                     _C2TX2B3	equ	1034
  7539  000000                     _C2TX2B3bits	equ	1034
  7540  000000                     _C2TX2B4	equ	1036
  7541  000000                     _C2TX2B4bits	equ	1036
  7542  000000                     _C2TX2CON	equ	1038
  7543  000000                     _C2TX2CONbits	equ	1038
  7544  000000                     _C2TX2DLC	equ	1028
  7545  000000                     _C2TX2DLCbits	equ	1028
  7546  000000                     _C2TX2EID	equ	1026
  7547  000000                     _C2TX2EIDbits	equ	1026
  7548  000000                     _C2TX2SID	equ	1024
  7549  000000                     _C2TX2SIDbits	equ	1024
  7550  000000                     _CNEN1	equ	192
  7551  000000                     _CNEN1bits	equ	192
  7552  000000                     _CNEN2	equ	194
  7553  000000                     _CNEN2bits	equ	194
  7554  000000                     _CNPU1	equ	196
  7555  000000                     _CNPU1bits	equ	196
  7556  000000                     _CNPU2	equ	198
  7557  000000                     _CNPU2bits	equ	198
  7558  000000                     _CORCON	equ	68
  7559  000000                     _CORCONbits	equ	68
  7560  000000                     _DCOUNT	equ	56
  7561  000000                     _DCOUNTbits	equ	56
  7562  000000                     _DFLTCON	equ	292
  7563  000000                     _DFLTCONbits	equ	292
  7564  000000                     _DISICNT	equ	82
  7565  000000                     _DISICNTbits	equ	82
  7566  000000                     _DOENDH	equ	64
  7567  000000                     _DOENDHbits	equ	64
  7568  000000                     _DOENDL	equ	62
  7569  000000                     _DOSTARTH	equ	60
  7570  000000                     _DOSTARTHbits	equ	60
  7571  000000                     _DOSTARTL	equ	58
  7572  000000                     _DTCON1	equ	460
  7573  000000                     _DTCON1bits	equ	460
  7574  000000                     _DTCON2	equ	462
  7575  000000                     _DTCON2bits	equ	462
  7576  000000                     _FLTACON	equ	464
  7577  000000                     _FLTACONbits	equ	464
  7578  000000                     _FLTBCON	equ	466
  7579  000000                     _FLTBCONbits	equ	466
  7580  000000                     _I2CADD	equ	522
  7581  000000                     _I2CADDbits	equ	522
  7582  000000                     _I2CBRG	equ	516
  7583  000000                     _I2CBRGbits	equ	516
  7584  000000                     _I2CCON	equ	518
  7585  000000                     _I2CCONbits	equ	518
  7586  000000                     _I2CRCV	equ	512
  7587  000000                     _I2CRCVbits	equ	512
  7588  000000                     _I2CSTAT	equ	520
  7589  000000                     _I2CSTATbits	equ	520
  7590  000000                     _I2CTRN	equ	514
  7591  000000                     _I2CTRNbits	equ	514
  7592  000000                     _IC1BUF	equ	320
  7593  000000                     _IC1CON	equ	322
  7594  000000                     _IC1CONbits	equ	322
  7595  000000                     _IC2BUF	equ	324
  7596  000000                     _IC2CON	equ	326
  7597  000000                     _IC2CONbits	equ	326
  7598  000000                     _IC3BUF	equ	328
  7599  000000                     _IC3CON	equ	330
  7600  000000                     _IC3CONbits	equ	330
  7601  000000                     _IC4BUF	equ	332
  7602  000000                     _IC4CON	equ	334
  7603  000000                     _IC4CONbits	equ	334
  7604  000000                     _IC5BUF	equ	336
  7605  000000                     _IC5CON	equ	338
  7606  000000                     _IC5CONbits	equ	338
  7607  000000                     _IC6BUF	equ	340
  7608  000000                     _IC6CON	equ	342
  7609  000000                     _IC6CONbits	equ	342
  7610  000000                     _IC7BUF	equ	344
  7611  000000                     _IC7CON	equ	346
  7612  000000                     _IC7CONbits	equ	346
  7613  000000                     _IC8BUF	equ	348
  7614  000000                     _IC8CON	equ	350
  7615  000000                     _IC8CONbits	equ	350
  7616  000000                     _IEC0	equ	140
  7617  000000                     _IEC0bits	equ	140
  7618  000000                     _IEC1	equ	142
  7619  000000                     _IEC1bits	equ	142
  7620  000000                     _IEC2	equ	144
  7621  000000                     _IEC2bits	equ	144
  7622  000000                     _IFS0	equ	132
  7623  000000                     _IFS0bits	equ	132
  7624  000000                     _IFS1	equ	134
  7625  000000                     _IFS1bits	equ	134
  7626  000000                     _IFS2	equ	136
  7627  000000                     _IFS2bits	equ	136
  7628  000000                     _INTCON1	equ	128
  7629  000000                     _INTCON1bits	equ	128
  7630  000000                     _INTCON2	equ	130
  7631  000000                     _INTCON2bits	equ	130
  7632  000000                     _INTTREG	equ	176
  7633  000000                     _INTTREGbits	equ	176
  7634  000000                     _IPC0	equ	148
  7635  000000                     _IPC0bits	equ	148
  7636  000000                     _IPC1	equ	150
  7637  000000                     _IPC10	equ	168
  7638  000000                     _IPC10bits	equ	168
  7639  000000                     _IPC11	equ	170
  7640  000000                     _IPC11bits	equ	170
  7641  000000                     _IPC1bits	equ	150
  7642  000000                     _IPC2	equ	152
  7643  000000                     _IPC2bits	equ	152
  7644  000000                     _IPC3	equ	154
  7645  000000                     _IPC3bits	equ	154
  7646  000000                     _IPC4	equ	156
  7647  000000                     _IPC4bits	equ	156
  7648  000000                     _IPC5	equ	158
  7649  000000                     _IPC5bits	equ	158
  7650  000000                     _IPC6	equ	160
  7651  000000                     _IPC6bits	equ	160
  7652  000000                     _IPC7	equ	162
  7653  000000                     _IPC7bits	equ	162
  7654  000000                     _IPC8	equ	164
  7655  000000                     _IPC8bits	equ	164
  7656  000000                     _IPC9	equ	166
  7657  000000                     _IPC9bits	equ	166
  7658  000000                     _LATA	equ	708
  7659  000000                     _LATAbits	equ	708
  7660  000000                     _LATB	equ	714
  7661  000000                     _LATBbits	equ	714
  7662  000000                     _LATC	equ	720
  7663  000000                     _LATCbits	equ	720
  7664  000000                     _LATD	equ	726
  7665  000000                     _LATDbits	equ	726
  7666  000000                     _LATE	equ	732
  7667  000000                     _LATEbits	equ	732
  7668  000000                     _LATF	equ	738
  7669  000000                     _LATFbits	equ	738
  7670  000000                     _LATG	equ	744
  7671  000000                     _LATGbits	equ	744
  7672  000000                     _MAXCNT	equ	296
  7673  000000                     _MODCON	equ	70
  7674  000000                     _MODCONbits	equ	70
  7675  000000                     _NVMADR	equ	1890
  7676  000000                     _NVMADRU	equ	1892
  7677  000000                     _NVMADRUbits	equ	1892
  7678  000000                     _NVMCON	equ	1888
  7679  000000                     _NVMCONbits	equ	1888
  7680  000000                     _NVMKEY	equ	1894
  7681  000000                     _NVMKEYbits	equ	1894
  7682  000000                     _OC1CON	equ	388
  7683  000000                     _OC1CONbits	equ	388
  7684  000000                     _OC1R	equ	386
  7685  000000                     _OC1RS	equ	384
  7686  000000                     _OC2CON	equ	394
  7687  000000                     _OC2CONbits	equ	394
  7688  000000                     _OC2R	equ	392
  7689  000000                     _OC2RS	equ	390
  7690  000000                     _OC3CON	equ	400
  7691  000000                     _OC3CONbits	equ	400
  7692  000000                     _OC3R	equ	398
  7693  000000                     _OC3RS	equ	396
  7694  000000                     _OC4CON	equ	406
  7695  000000                     _OC4CONbits	equ	406
  7696  000000                     _OC4R	equ	404
  7697  000000                     _OC4RS	equ	402
  7698  000000                     _OC5CON	equ	412
  7699  000000                     _OC5CONbits	equ	412
  7700  000000                     _OC5R	equ	410
  7701  000000                     _OC5RS	equ	408
  7702  000000                     _OC6CON	equ	418
  7703  000000                     _OC6CONbits	equ	418
  7704  000000                     _OC6R	equ	416
  7705  000000                     _OC6RS	equ	414
  7706  000000                     _OC7CON	equ	424
  7707  000000                     _OC7CONbits	equ	424
  7708  000000                     _OC7R	equ	422
  7709  000000                     _OC7RS	equ	420
  7710  000000                     _OC8CON	equ	430
  7711  000000                     _OC8CONbits	equ	430
  7712  000000                     _OC8R	equ	428
  7713  000000                     _OC8RS	equ	426
  7714  000000                     _OSCCON	equ	1858
  7715  000000                     _OSCCONbits	equ	1858
  7716  000000                     _OSCTUN	equ	1860
  7717  000000                     _OSCTUNbits	equ	1860
  7718  000000                     _OVDCON	equ	468
  7719  000000                     _OVDCONbits	equ	468
  7720  000000                     _PCH	equ	48
  7721  000000                     _PCHbits	equ	48
  7722  000000                     _PCL	equ	46
  7723  000000                     _PDC1	equ	470
  7724  000000                     _PDC2	equ	472
  7725  000000                     _PDC3	equ	474
  7726  000000                     _PDC4	equ	476
  7727  000000                     _PMD1	equ	1904
  7728  000000                     _PMD1bits	equ	1904
  7729  000000                     _PMD2	equ	1906
  7730  000000                     _PMD2bits	equ	1906
  7731  000000                     _PORTA	equ	706
  7732  000000                     _PORTAbits	equ	706
  7733  000000                     _PORTB	equ	712
  7734  000000                     _PORTBbits	equ	712
  7735  000000                     _PORTC	equ	718
  7736  000000                     _PORTCbits	equ	718
  7737  000000                     _PORTD	equ	724
  7738  000000                     _PORTDbits	equ	724
  7739  000000                     _PORTE	equ	730
  7740  000000                     _PORTEbits	equ	730
  7741  000000                     _PORTF	equ	736
  7742  000000                     _PORTFbits	equ	736
  7743  000000                     _PORTG	equ	742
  7744  000000                     _PORTGbits	equ	742
  7745  000000                     _POSCNT	equ	294
  7746  000000                     _PR1	equ	258
  7747  000000                     _PR2	equ	268
  7748  000000                     _PR3	equ	270
  7749  000000                     _PR4	equ	282
  7750  000000                     _PR5	equ	284
  7751  000000                     _PSVPAG	equ	52
  7752  000000                     _PSVPAGbits	equ	52
  7753  000000                     _PTCON	equ	448
  7754  000000                     _PTCONbits	equ	448
  7755  000000                     _PTMR	equ	450
  7756  000000                     _PTMRbits	equ	450
  7757  000000                     _PTPER	equ	452
  7758  000000                     _PTPERbits	equ	452
  7759  000000                     _PWMCON1	equ	456
  7760  000000                     _PWMCON1bits	equ	456
  7761  000000                     _PWMCON2	equ	458
  7762  000000                     _PWMCON2bits	equ	458
  7763  000000                     _QEICON	equ	290
  7764  000000                     _QEICONbits	equ	290
  7765  000000                     _RCON	equ	1856
  7766  000000                     _RCONbits	equ	1856
  7767  000000                     _RCOUNT	equ	54
  7768  000000                     _RCOUNTbits	equ	54
  7769  000000                     _SEVTCMP	equ	454
  7770  000000                     _SEVTCMPbits	equ	454
  7771  000000                     _SPI1BUF	equ	548
  7772  000000                     _SPI1CON	equ	546
  7773  000000                     _SPI1CONbits	equ	546
  7774  000000                     _SPI1STAT	equ	544
  7775  000000                     _SPI1STATbits	equ	544
  7776  000000                     _SPI2BUF	equ	554
  7777  000000                     _SPI2CON	equ	552
  7778  000000                     _SPI2CONbits	equ	552
  7779  000000                     _SPI2STAT	equ	550
  7780  000000                     _SPI2STATbits	equ	550
  7781  000000                     _SPLIM	equ	32
  7782  000000                     _SR	equ	66
  7783  000000                     _SRbits	equ	66
  7784  000000                     _SSRAM	equ	1874
  7785  000000                     _SSRAMbits	equ	1874
  7786  000000                     _T1CON	equ	260
  7787  000000                     _T1CONbits	equ	260
  7788  000000                     _T2CON	equ	272
  7789  000000                     _T2CONbits	equ	272
  7790  000000                     _T3CON	equ	274
  7791  000000                     _T3CONbits	equ	274
  7792  000000                     _T4CON	equ	286
  7793  000000                     _T4CONbits	equ	286
  7794  000000                     _T5CON	equ	288
  7795  000000                     _T5CONbits	equ	288
  7796  000000                     _TBLPAG	equ	50
  7797  000000                     _TBLPAGbits	equ	50
  7798  000000                     _TMR1	equ	256
  7799  000000                     _TMR2	equ	262
  7800  000000                     _TMR3	equ	266
  7801  000000                     _TMR3HLD	equ	264
  7802  000000                     _TMR4	equ	276
  7803  000000                     _TMR5	equ	280
  7804  000000                     _TMR5HLD	equ	278
  7805  000000                     _TRISA	equ	704
  7806  000000                     _TRISAbits	equ	704
  7807  000000                     _TRISB	equ	710
  7808  000000                     _TRISBbits	equ	710
  7809  000000                     _TRISC	equ	716
  7810  000000                     _TRISCbits	equ	716
  7811  000000                     _TRISD	equ	722
  7812  000000                     _TRISDbits	equ	722
  7813  000000                     _TRISE	equ	728
  7814  000000                     _TRISEbits	equ	728
  7815  000000                     _TRISF	equ	734
  7816  000000                     _TRISFbits	equ	734
  7817  000000                     _TRISG	equ	740
  7818  000000                     _TRISGbits	equ	740
  7819  000000                     _U1BRG	equ	532
  7820  000000                     _U1MODE	equ	524
  7821  000000                     _U1MODEbits	equ	524
  7822  000000                     _U1RXREG	equ	530
  7823  000000                     _U1RXREGbits	equ	530
  7824  000000                     _U1STA	equ	526
  7825  000000                     _U1STAbits	equ	526
  7826  000000                     _U1TXREG	equ	528
  7827  000000                     _U1TXREGbits	equ	528
  7828  000000                     _U2BRG	equ	542
  7829  000000                     _U2MODE	equ	534
  7830  000000                     _U2MODEbits	equ	534
  7831  000000                     _U2RXREG	equ	540
  7832  000000                     _U2RXREGbits	equ	540
  7833  000000                     _U2STA	equ	536
  7834  000000                     _U2STAbits	equ	536
  7835  000000                     _U2TXREG	equ	538
  7836  000000                     _U2TXREGbits	equ	538
  7837  000000                     _WREG0	equ	0
  7838  000000                     _WREG1	equ	2
  7839  000000                     _WREG10	equ	20
  7840  000000                     _WREG11	equ	22
  7841  000000                     _WREG12	equ	24
  7842  000000                     _WREG13	equ	26
  7843  000000                     _WREG14	equ	28
  7844  000000                     _WREG15	equ	30
  7845  000000                     _WREG2	equ	4
  7846  000000                     _WREG3	equ	6
  7847  000000                     _WREG4	equ	8
  7848  000000                     _WREG5	equ	10
  7849  000000                     _WREG6	equ	12
  7850  000000                     _WREG7	equ	14
  7851  000000                     _WREG8	equ	16
  7852  000000                     _WREG9	equ	18
  7853  000000                     _XBREV	equ	80
  7854  000000                     _XBREVbits	equ	80
  7855  000000                     _XMODEND	equ	74
  7856  000000                     _XMODSRT	equ	72
  7857  000000                     _YMODEND	equ	78
  7858  000000                     _YMODSRT	equ	76
  7859                           	psect	nearbss,class=NEARXDATA,space=1,reloc=2,p
                                 ad=2
  7860                           	psect	nearbss
  7861                           	global	_pxCurrentTCB
  7862                           	line	4377
  7863  000800                     align 2
  7864  000800                     _pxCurrentTCB:
  7865  000800                     	ds	2
  7866                           	global	_pxDelayedTaskList
  7867  000802                     align 2
  7868  000802                     _pxDelayedTaskList:
  7869  000802                     	ds	2
  7870                           	global	_pxOverflowDelayedTaskList
  7871  000804                     align 2
  7872  000804                     _pxOverflowDelayedTaskList:
  7873  000804                     	ds	2
  7874+                          	global	_uxCurrentNumberOfTasks
  7875+ 000806                     align 2
  7876+ 000806                     _uxCurrentNumberOfTasks:
  7877+ 000806                     	ds	2
  7878+                          	global	_uxPendedTicks
  7879+ 000808                     align 2
  7880+ 000808                     _uxPendedTicks:
  7881+ 000808                     	ds	2
  7882+                          	global	_uxSchedulerSuspended
  7883+ 00080A                     align 2
  7884+ 00080A                     _uxSchedulerSuspended:
  7885+ 00080A                     	ds	2
  7886+                          	global	_uxTaskNumber
  7887+ 00080C                     align 2
  7888+ 00080C                     _uxTaskNumber:
  7889+ 00080C                     	ds	2
  7890+                          	global	_uxTopReadyPriority
  7891+ 00080E                     align 2
  7892+ 00080E                     _uxTopReadyPriority:
  7893+ 00080E                     	ds	2
  7894+                          	global	_xNumOfOverflows
  7895+ 000810                     align 2
  7896+ 000810                     _xNumOfOverflows:
  7897+ 000810                     	ds	2
  7898+                          	global	_xSchedulerRunning
  7899+ 000812                     align 2
  7900+ 000812                     _xSchedulerRunning:
  7901+ 000812                     	ds	2
  7902+                          	global	_xTickCount
  7903+ 000814                     align 2
  7904+ 000814                     _xTickCount:
  7905+ 000814                     	ds	2
  7906+                          	global	_xYieldPending
  7907+ 000816                     align 2
  7908+ 000816                     _xYieldPending:
  7909+ 000816                     	ds	2
  7910+                          	global	_xDelayedTaskList1
  7911+ 000818                     align 2
  7912+ 000818                     _xDelayedTaskList1:
  7913+ 000818                     	ds	10
  7914+                          	global	_xDelayedTaskList2
  7915+ 000822                     align 2
  7916+ 000822                     _xDelayedTaskList2:
  7917+ 000822                     	ds	10
  7918+                          	global	_xPendingReadyList
  7919+ 00082C                     align 2
  7920+ 00082C                     _xPendingReadyList:
  7921+ 00082C                     	ds	10
  7922+                          	global	_xSuspendedTaskList
  7923+ 000836                     align 2
  7924+ 000836                     _xSuspendedTaskList:
  7925+ 000836                     	ds	10
  7926+                          	global	_pxReadyTasksLists
  7927+ 000840                     align 2
  7928+ 000840                     _pxReadyTasksLists:
  7929+ 000840                     	ds	40
  7930+ 000000                     _A10M	equ	4154
  7931+ 000000                     _ABAT	equ	7308
  7932+ 000000                     _ABAUD	equ	4197
  7933+ 000000                     _ACCSAT	equ	548
  7934+ 000000                     _ACKDT	equ	4149
  7935+ 000000                     _ACKEN	equ	4148
  7936+ 000000                     _ACKSTAT	equ	4175
  7937+ 000000                     _ADCMD	equ	15232
  7938+ 000000                     _ADCS0	equ	5408
  7939+ 000000                     _ADCS1	equ	5409
  7940+ 000000                     _ADCS2	equ	5410
  7941+ 000000                     _ADCS3	equ	5411
  7942+ 000000                     _ADCS4	equ	5412
  7943+ 000000                     _ADCS5	equ	5413
  7944+ 000000                     _ADD10	equ	4168
  7945+ 000000                     _ADDEN	equ	4213
  7946+ 000000                     _ADDRERR	equ	1027
  7947+ 000000                     _ADIE	equ	1131
  7948+ 000000                     _ADIF	equ	1067
  7949+ 000000                     _ADIP0	equ	1228
  7950+ 000000                     _ADIP1	equ	1229
  7951+ 000000                     _ADIP2	equ	1230
  7952+ 000000                     _ADON	equ	5391
  7953+ 000000                     _ADRC	equ	5415
  7954+ 000000                     _ADSIDL	equ	5389
  7955+ 000000                     _ALTIO	equ	4202
  7956+ 000000                     _ALTIVT	equ	1055
  7957+ 000000                     _ALTS	equ	5392
  7958+ 000000                     _ASAM	equ	5378
  7959+ 000000                     _BCL	equ	4170
  7960+ 000000                     _BGST	equ	14861
  7961+ 000000                     _BOR	equ	14849
  7962+ 000000                     _BREN	equ	655
  7963+ 000000                     _BRP0	equ	7312
  7964+ 000000                     _BRP1	equ	7313
  7965+ 000000                     _BRP2	equ	7314
  7966+ 000000                     _BRP3	equ	7315
  7967+ 000000                     _BRP4	equ	7316
  7968+ 000000                     _BRP5	equ	7317
  7969+ 000000                     _BUFM	equ	5393
  7970+ 000000                     _BUFS	equ	5399
  7971+ 000000                     _BWM0	equ	568
  7972+ 000000                     _BWM1	equ	569
  7973+ 000000                     _BWM2	equ	570
  7974+ 000000                     _BWM3	equ	571
  7975+ 000000                     _C	equ	528
  7976+ 000000                     _C1IE	equ	1147
  7977+ 000000                     _C1IF	equ	1083
  7978+ 000000                     _C1IP0	equ	1292
  7979+ 000000                     _C1IP1	equ	1293
  7980+ 000000                     _C1IP2	equ	1294
  7981+ 000000                     _C1MD	equ	15233
  7982+ 000000                     _C2IE	equ	1158
  7983+ 000000                     _C2IF	equ	1094
  7984+ 000000                     _C2IP0	equ	1336
  7985+ 000000                     _C2IP1	equ	1337
  7986+ 000000                     _C2IP2	equ	1338
  7987+ 000000                     _C2MD	equ	15234
  7988+ 000000                     _CANCAP	equ	7311
  7989+ 000000                     _CANCKS	equ	7307
  7990+ 000000                     _CANFRZ	equ	7310
  7991+ 000000                     _CANSIDL	equ	7309
  7992+ 000000                     _CEID	equ	2344
  7993+ 000000                     _CF	equ	14867
  7994+ 000000                     _CH0NA	equ	5428
  7995+ 000000                     _CH0NB	equ	5436
  7996+ 000000                     _CH0SA0	equ	5424
  7997+ 000000                     _CH0SA1	equ	5425
  7998+ 000000                     _CH0SA2	equ	5426
  7999+ 000000                     _CH0SA3	equ	5427
  8000+ 000000                     _CH0SB0	equ	5432
  8001+ 000000                     _CH0SB1	equ	5433
  8002+ 000000                     _CH0SB2	equ	5434
  8003+ 000000                     _CH0SB3	equ	5435
  8004+ 000000                     _CH123NA0	equ	5430
  8005+ 000000                     _CH123NA1	equ	5431
  8006+ 000000                     _CH123NB0	equ	5438
  8007+ 000000                     _CH123NB1	equ	5439
  8008+ 000000                     _CH123SA	equ	5429
  8009+ 000000                     _CH123SB	equ	5437
  8010+ 000000                     _CHPS0	equ	5400
  8011+ 000000                     _CHPS1	equ	5401
  8012+ 000000                     _CKE	equ	4376
  8013+ 000000                     _CKP	equ	4374
  8014+ 000000                     _CN0IE	equ	1536
  8015+ 000000                     _CN0PUE	equ	1568
  8016+ 000000                     _CN10IE	equ	1546
  8017+ 000000                     _CN10PUE	equ	1578
  8018+ 000000                     _CN11IE	equ	1547
  8019+ 000000                     _CN11PUE	equ	1579
  8020+ 000000                     _CN12IE	equ	1548
  8021+ 000000                     _CN12PUE	equ	1580
  8022+ 000000                     _CN13IE	equ	1549
  8023+ 000000                     _CN13PUE	equ	1581
  8024+ 000000                     _CN14IE	equ	1550
  8025+ 000000                     _CN14PUE	equ	1582
  8026+ 000000                     _CN15IE	equ	1551
  8027+ 000000                     _CN15PUE	equ	1583
  8028+ 000000                     _CN16IE	equ	1552
  8029+ 000000                     _CN16PUE	equ	1584
  8030+ 000000                     _CN17IE	equ	1553
  8031+ 000000                     _CN17PUE	equ	1585
  8032+ 000000                     _CN18IE	equ	1554
  8033+ 000000                     _CN18PUE	equ	1586
  8034+ 000000                     _CN19IE	equ	1555
  8035+ 000000                     _CN19PUE	equ	1587
  8036+ 000000                     _CN1IE	equ	1537
  8037+ 000000                     _CN1PUE	equ	1569
  8038+ 000000                     _CN20IE	equ	1556
  8039+ 000000                     _CN20PUE	equ	1588
  8040+ 000000                     _CN21IE	equ	1557
  8041+ 000000                     _CN21PUE	equ	1589
  8042+ 000000                     _CN2IE	equ	1538
  8043+ 000000                     _CN2PUE	equ	1570
  8044+ 000000                     _CN3IE	equ	1539
  8045+ 000000                     _CN3PUE	equ	1571
  8046+ 000000                     _CN4IE	equ	1540
  8047+ 000000                     _CN4PUE	equ	1572
  8048+ 000000                     _CN5IE	equ	1541
  8049+ 000000                     _CN5PUE	equ	1573
  8050+ 000000                     _CN6IE	equ	1542
  8051+ 000000                     _CN6PUE	equ	1574
  8052+ 000000                     _CN7IE	equ	1543
  8053+ 000000                     _CN7PUE	equ	1575
  8054+ 000000                     _CN8IE	equ	1544
  8055+ 000000                     _CN8PUE	equ	1576
  8056+ 000000                     _CN9IE	equ	1545
  8057+ 000000                     _CN9PUE	equ	1577
  8058+ 000000                     _CNIE	equ	1135
  8059+ 000000                     _CNIF	equ	1071
  8060+ 000000                     _CNIP0	equ	1244
  8061+ 000000                     _CNIP1	equ	1245
  8062+ 000000                     _CNIP2	equ	1246
  8063+ 000000                     _CNTERR	equ	2335
  8064+ 000000                     _COSC0	equ	14876
  8065+ 000000                     _COSC1	equ	14877
  8066+ 000000                     _COSC2	equ	14878
  8067+ 000000                     _COVTE	equ	1032
  8068+ 000000                     _CSCNA	equ	5402
  8069+ 000000                     _CSSL0	equ	5456
  8070+ 000000                     _CSSL1	equ	5457
  8071+ 000000                     _CSSL10	equ	5466
  8072+ 000000                     _CSSL11	equ	5467
  8073+ 000000                     _CSSL12	equ	5468
  8074+ 000000                     _CSSL13	equ	5469
  8075+ 000000                     _CSSL14	equ	5470
  8076+ 000000                     _CSSL15	equ	5471
  8077+ 000000                     _CSSL2	equ	5458
  8078+ 000000                     _CSSL3	equ	5459
  8079+ 000000                     _CSSL4	equ	5460
  8080+ 000000                     _CSSL5	equ	5461
  8081+ 000000                     _CSSL6	equ	5462
  8082+ 000000                     _CSSL7	equ	5463
  8083+ 000000                     _CSSL8	equ	5464
  8084+ 000000                     _CSSL9	equ	5465
  8085+ 000000                     _DA	equ	537
  8086+ 000000                     _DC	equ	536
  8087+ 000000                     _DISI	equ	1054
  8088+ 000000                     _DISSDO	equ	4379
  8089+ 000000                     _DISSLW	equ	4153
  8090+ 000000                     _DL0	equ	552
  8091+ 000000                     _DL1	equ	553
  8092+ 000000                     _DL2	equ	554
  8093+ 000000                     _DLC0	equ	6691
  8094+ 000000                     _DLC1	equ	6692
  8095+ 000000                     _DLC2	equ	6693
  8096+ 000000                     _DLC3	equ	6694
  8097+ 000000                     _DONE	equ	5376
  8098+ 000000                     _DTA0	equ	3680
  8099+ 000000                     _DTA1	equ	3681
  8100+ 000000                     _DTA2	equ	3682
  8101+ 000000                     _DTA3	equ	3683
  8102+ 000000                     _DTA4	equ	3684
  8103+ 000000                     _DTA5	equ	3685
  8104+ 000000                     _DTAPS0	equ	3686
  8105+ 000000                     _DTAPS1	equ	3687
  8106+ 000000                     _DTB0	equ	3688
  8107+ 000000                     _DTB1	equ	3689
  8108+ 000000                     _DTB2	equ	3690
  8109+ 000000                     _DTB3	equ	3691
  8110+ 000000                     _DTB4	equ	3692
  8111+ 000000                     _DTB5	equ	3693
  8112+ 000000                     _DTBPS0	equ	3694
  8113+ 000000                     _DTBPS1	equ	3695
  8114+ 000000                     _DTS1A	equ	3697
  8115+ 000000                     _DTS1I	equ	3696
  8116+ 000000                     _DTS2A	equ	3699
  8117+ 000000                     _DTS2I	equ	3698
  8118+ 000000                     _DTS3A	equ	3701
  8119+ 000000                     _DTS3I	equ	3700
  8120+ 000000                     _DTS4A	equ	3703
  8121+ 000000                     _DTS4I	equ	3702
  8122+ 000000                     _D_A	equ	4165
  8123+ 000000                     _D_nA	equ	4165
  8124+ 000000                     _EDT	equ	555
  8125+ 000000                     _EID0	equ	6186
  8126+ 000000                     _EID1	equ	6187
  8127+ 000000                     _EID10	equ	6164
  8128+ 000000                     _EID11	equ	6165
  8129+ 000000                     _EID12	equ	6166
  8130+ 000000                     _EID13	equ	6167
  8131+ 000000                     _EID14	equ	6168
  8132+ 000000                     _EID15	equ	6169
  8133+ 000000                     _EID16	equ	6170
  8134+ 000000                     _EID17	equ	6171
  8135+ 000000                     _EID2	equ	6188
  8136+ 000000                     _EID3	equ	6189
  8137+ 000000                     _EID4	equ	6190
  8138+ 000000                     _EID5	equ	6191
  8139+ 000000                     _EID6	equ	6160
  8140+ 000000                     _EID7	equ	6161
  8141+ 000000                     _EID8	equ	6162
  8142+ 000000                     _EID9	equ	6163
  8143+ 000000                     _ERRIE	equ	7365
  8144+ 000000                     _ERRIF	equ	7349
  8145+ 000000                     _EWARN	equ	7352
  8146+ 000000                     _EXIDE	equ	6144
  8147+ 000000                     _EXTR	equ	14855
  8148+ 000000                     _FAEN1	equ	3712
  8149+ 000000                     _FAEN2	equ	3713
  8150+ 000000                     _FAEN3	equ	3714
  8151+ 000000                     _FAEN4	equ	3715
  8152+ 000000                     _FAOV1H	equ	3721
  8153+ 000000                     _FAOV1L	equ	3720
  8154+ 000000                     _FAOV2H	equ	3723
  8155+ 000000                     _FAOV2L	equ	3722
  8156+ 000000                     _FAOV3H	equ	3725
  8157+ 000000                     _FAOV3L	equ	3724
  8158+ 000000                     _FAOV4H	equ	3727
  8159+ 000000                     _FAOV4L	equ	3726
  8160+ 000000                     _FBEN1	equ	3728
  8161+ 000000                     _FBEN2	equ	3729
  8162+ 000000                     _FBEN3	equ	3730
  8163+ 000000                     _FBEN4	equ	3731
  8164+ 000000                     _FBOV1H	equ	3737
  8165+ 000000                     _FBOV1L	equ	3736
  8166+ 000000                     _FBOV2H	equ	3739
  8167+ 000000                     _FBOV2L	equ	3738
  8168+ 000000                     _FBOV3H	equ	3741
  8169+ 000000                     _FBOV3L	equ	3740
  8170+ 000000                     _FBOV4H	equ	3743
  8171+ 000000                     _FBOV4L	equ	3742
  8172+ 000000                     _FERR	equ	4210
  8173+ 000000                     _FILHIT	equ	7280
  8174+ 000000                     _FILHIT0	equ	7152
  8175+ 000000                     _FILHIT1	equ	7153
  8176+ 000000                     _FILHIT2	equ	7154
  8177+ 000000                     _FLTAIE	equ	1163
  8178+ 000000                     _FLTAIF	equ	1099
  8179+ 000000                     _FLTAIP0	equ	1356
  8180+ 000000                     _FLTAIP1	equ	1357
  8181+ 000000                     _FLTAIP2	equ	1358
  8182+ 000000                     _FLTAM	equ	3719
  8183+ 000000                     _FLTBIE	equ	1164
  8184+ 000000                     _FLTBIF	equ	1100
  8185+ 000000                     _FLTBIP0	equ	1360
  8186+ 000000                     _FLTBIP1	equ	1361
  8187+ 000000                     _FLTBIP2	equ	1362
  8188+ 000000                     _FLTBM	equ	3735
  8189+ 000000                     _FORM0	equ	5384
  8190+ 000000                     _FORM1	equ	5385
  8191+ 000000                     _FRMEN	equ	4382
  8192+ 000000                     _GCEN	equ	4151
  8193+ 000000                     _GCSTAT	equ	4169
  8194+ 000000                     _I2CEN	equ	4159
  8195+ 000000                     _I2CMD	equ	15239
  8196+ 000000                     _I2COV	equ	4166
  8197+ 000000                     _I2CSIDL	equ	4157
  8198+ 000000                     _IC1IE	equ	1121
  8199+ 000000                     _IC1IF	equ	1057
  8200+ 000000                     _IC1IP0	equ	1188
  8201+ 000000                     _IC1IP1	equ	1189
  8202+ 000000                     _IC1IP2	equ	1190
  8203+ 000000                     _IC1MD	equ	15256
  8204+ 000000                     _IC2IE	equ	1124
  8205+ 000000                     _IC2IF	equ	1060
  8206+ 000000                     _IC2IP0	equ	1200
  8207+ 000000                     _IC2IP1	equ	1201
  8208+ 000000                     _IC2IP2	equ	1202
  8209+ 000000                     _IC2MD	equ	15257
  8210+ 000000                     _IC3IE	equ	1148
  8211+ 000000                     _IC3IF	equ	1084
  8212+ 000000                     _IC3IP0	equ	1296
  8213+ 000000                     _IC3IP1	equ	1297
  8214+ 000000                     _IC3IP2	equ	1298
  8215+ 000000                     _IC3MD	equ	15258
  8216+ 000000                     _IC4IE	equ	1149
  8217+ 000000                     _IC4IF	equ	1085
  8218+ 000000                     _IC4IP0	equ	1300
  8219+ 000000                     _IC4IP1	equ	1301
  8220+ 000000                     _IC4IP2	equ	1302
  8221+ 000000                     _IC4MD	equ	15259
  8222+ 000000                     _IC5IE	equ	1150
  8223+ 000000                     _IC5IF	equ	1086
  8224+ 000000                     _IC5IP0	equ	1304
  8225+ 000000                     _IC5IP1	equ	1305
  8226+ 000000                     _IC5IP2	equ	1306
  8227+ 000000                     _IC5MD	equ	15260
  8228+ 000000                     _IC6IE	equ	1151
  8229+ 000000                     _IC6IF	equ	1087
  8230+ 000000                     _IC6IP0	equ	1308
  8231+ 000000                     _IC6IP1	equ	1309
  8232+ 000000                     _IC6IP2	equ	1310
  8233+ 000000                     _IC6MD	equ	15261
  8234+ 000000                     _IC7IE	equ	1137
  8235+ 000000                     _IC7IF	equ	1073
  8236+ 000000                     _IC7IP0	equ	1252
  8237+ 000000                     _IC7IP1	equ	1253
  8238+ 000000                     _IC7IP2	equ	1254
  8239+ 000000                     _IC7MD	equ	15262
  8240+ 000000                     _IC8IE	equ	1138
  8241+ 000000                     _IC8IF	equ	1074
  8242+ 000000                     _IC8IP0	equ	1256
  8243+ 000000                     _IC8IP1	equ	1257
  8244+ 000000                     _IC8IP2	equ	1258
  8245+ 000000                     _IC8MD	equ	15263
  8246+ 000000                     _ICBNE	equ	2579
  8247+ 000000                     _ICI0	equ	2581
  8248+ 000000                     _ICI1	equ	2582
  8249+ 000000                     _ICM0	equ	2576
  8250+ 000000                     _ICM1	equ	2577
  8251+ 000000                     _ICM2	equ	2578
  8252+ 000000                     _ICOD0	equ	7297
  8253+ 000000                     _ICOD1	equ	7298
  8254+ 000000                     _ICOD2	equ	7299
  8255+ 000000                     _ICOV	equ	2580
  8256+ 000000                     _ICSIDL	equ	2589
  8257+ 000000                     _ICTMR	equ	2583
  8258+ 000000                     _IDLE	equ	14850
  8259+ 000000                     _IDLE_MODE	equ	15249
  8260+ 000000                     _IF	equ	544
  8261+ 000000                     _ILR0	equ	1416
  8262+ 000000                     _ILR1	equ	1417
  8263+ 000000                     _ILR2	equ	1418
  8264+ 000000                     _ILR3	equ	1419
  8265+ 000000                     _IMV0	equ	2345
  8266+ 000000                     _IMV1	equ	2346
  8267+ 000000                     _INDCK0	equ	2336
  8268+ 000000                     _INDCK1	equ	2337
  8269+ 000000                     _INDCK2	equ	2338
  8270+ 000000                     _INDOUT	equ	2339
  8271+ 000000                     _INDX	equ	2332
  8272+ 000000                     _INT0EP	equ	1040
  8273+ 000000                     _INT0IE	equ	1120
  8274+ 000000                     _INT0IF	equ	1056
  8275+ 000000                     _INT0IP0	equ	1184
  8276+ 000000                     _INT0IP1	equ	1185
  8277+ 000000                     _INT0IP2	equ	1186
  8278+ 000000                     _INT1EP	equ	1041
  8279+ 000000                     _INT1IE	equ	1136
  8280+ 000000                     _INT1IF	equ	1072
  8281+ 000000                     _INT1IP0	equ	1248
  8282+ 000000                     _INT1IP1	equ	1249
  8283+ 000000                     _INT1IP2	equ	1250
  8284+ 000000                     _INT2EP	equ	1042
  8285+ 000000                     _INT2IE	equ	1143
  8286+ 000000                     _INT2IF	equ	1079
  8287+ 000000                     _INT2IP0	equ	1276
  8288+ 000000                     _INT2IP1	equ	1277
  8289+ 000000                     _INT2IP2	equ	1278
  8290+ 000000                     _INT3EP	equ	1043
  8291+ 000000                     _INT3IE	equ	1156
  8292+ 000000                     _INT3IF	equ	1092
  8293+ 000000                     _INT3IP0	equ	1328
  8294+ 000000                     _INT3IP1	equ	1329
  8295+ 000000                     _INT3IP2	equ	1330
  8296+ 000000                     _INT4EP	equ	1044
  8297+ 000000                     _INT4IE	equ	1157
  8298+ 000000                     _INT4IF	equ	1093
  8299+ 000000                     _INT4IP0	equ	1332
  8300+ 000000                     _INT4IP1	equ	1333
  8301+ 000000                     _INT4IP2	equ	1334
  8302+ 000000                     _IOPUWR	equ	14862
  8303+ 000000                     _IPL0	equ	533
  8304+ 000000                     _IPL1	equ	534
  8305+ 000000                     _IPL2	equ	535
  8306+ 000000                     _IPL3	equ	547
  8307+ 000000                     _IPMIEN	equ	4155
  8308+ 000000                     _IRQtoCPU	equ	1423
  8309+ 000000                     _IRXIE	equ	7367
  8310+ 000000                     _IRXIF	equ	7351
  8311+ 000000                     _IR_BSR	equ	14977
  8312+ 000000                     _IR_SSR	equ	14993
  8313+ 000000                     _IUE	equ	3666
  8314+ 000000                     _IWCOL	equ	4167
  8315+ 000000                     _IW_BSR	equ	14978
  8316+ 000000                     _IW_SSR	equ	14994
  8317+ 000000                     _JTOFF	equ	7281
  8318+ 000000                     _LATA10	equ	5674
  8319+ 000000                     _LATA14	equ	5678
  8320+ 000000                     _LATA15	equ	5679
  8321+ 000000                     _LATA9	equ	5673
  8322+ 000000                     _LATB0	equ	5712
  8323+ 000000                     _LATB1	equ	5713
  8324+ 000000                     _LATB10	equ	5722
  8325+ 000000                     _LATB11	equ	5723
  8326+ 000000                     _LATB12	equ	5724
  8327+ 000000                     _LATB13	equ	5725
  8328+ 000000                     _LATB14	equ	5726
  8329+ 000000                     _LATB15	equ	5727
  8330+ 000000                     _LATB2	equ	5714
  8331+ 000000                     _LATB3	equ	5715
  8332+ 000000                     _LATB4	equ	5716
  8333+ 000000                     _LATB5	equ	5717
  8334+ 000000                     _LATB6	equ	5718
  8335+ 000000                     _LATB7	equ	5719
  8336+ 000000                     _LATB8	equ	5720
  8337+ 000000                     _LATB9	equ	5721
  8338+ 000000                     _LATC1	equ	5761
  8339+ 000000                     _LATC13	equ	5773
  8340+ 000000                     _LATC14	equ	5774
  8341+ 000000                     _LATC15	equ	5775
  8342+ 000000                     _LATC3	equ	5763
  8343+ 000000                     _LATD0	equ	5808
  8344+ 000000                     _LATD1	equ	5809
  8345+ 000000                     _LATD10	equ	5818
  8346+ 000000                     _LATD11	equ	5819
  8347+ 000000                     _LATD12	equ	5820
  8348+ 000000                     _LATD13	equ	5821
  8349+ 000000                     _LATD14	equ	5822
  8350+ 000000                     _LATD15	equ	5823
  8351+ 000000                     _LATD2	equ	5810
  8352+ 000000                     _LATD3	equ	5811
  8353+ 000000                     _LATD4	equ	5812
  8354+ 000000                     _LATD5	equ	5813
  8355+ 000000                     _LATD6	equ	5814
  8356+ 000000                     _LATD7	equ	5815
  8357+ 000000                     _LATD8	equ	5816
  8358+ 000000                     _LATD9	equ	5817
  8359+ 000000                     _LATE0	equ	5856
  8360+ 000000                     _LATE1	equ	5857
  8361+ 000000                     _LATE2	equ	5858
  8362+ 000000                     _LATE3	equ	5859
  8363+ 000000                     _LATE4	equ	5860
  8364+ 000000                     _LATE5	equ	5861
  8365+ 000000                     _LATE6	equ	5862
  8366+ 000000                     _LATE7	equ	5863
  8367+ 000000                     _LATE8	equ	5864
  8368+ 000000                     _LATE9	equ	5865
  8369+ 000000                     _LATF0	equ	5904
  8370+ 000000                     _LATF1	equ	5905
  8371+ 000000                     _LATF2	equ	5906
  8372+ 000000                     _LATF3	equ	5907
  8373+ 000000                     _LATF4	equ	5908
  8374+ 000000                     _LATF5	equ	5909
  8375+ 000000                     _LATF6	equ	5910
  8376+ 000000                     _LATF7	equ	5911
  8377+ 000000                     _LATF8	equ	5912
  8378+ 000000                     _LATG0	equ	5952
  8379+ 000000                     _LATG1	equ	5953
  8380+ 000000                     _LATG2	equ	5954
  8381+ 000000                     _LATG3	equ	5955
  8382+ 000000                     _LATG6	equ	5958
  8383+ 000000                     _LATG7	equ	5959
  8384+ 000000                     _LATG8	equ	5960
  8385+ 000000                     _LATG9	equ	5961
  8386+ 000000                     _LOCK	equ	14869
  8387+ 000000                     _LPBACK	equ	4198
  8388+ 000000                     _LPOSCEN	equ	14865
  8389+ 000000                     _MATHERR	equ	1028
  8390+ 000000                     _MI2CIE	equ	1134
  8391+ 000000                     _MI2CIF	equ	1070
  8392+ 000000                     _MI2CIP0	equ	1240
  8393+ 000000                     _MI2CIP1	equ	1241
  8394+ 000000                     _MI2CIP2	equ	1242
  8395+ 000000                     _MIDE	equ	6528
  8396+ 000000                     _MODE16	equ	4378
  8397+ 000000                     _MSTEN	equ	4373
  8398+ 000000                     _N	equ	531
  8399+ 000000                     _NOSC0	equ	14872
  8400+ 000000                     _NOSC1	equ	14873
  8401+ 000000                     _NOSC2	equ	14874
  8402+ 000000                     _NSTDIS	equ	1039
  8403+ 000000                     _NVMIE	equ	1132
  8404+ 000000                     _NVMIF	equ	1068
  8405+ 000000                     _NVMIP0	equ	1232
  8406+ 000000                     _NVMIP1	equ	1233
  8407+ 000000                     _NVMIP2	equ	1234
  8408+ 000000                     _OA	equ	543
  8409+ 000000                     _OAB	equ	539
  8410+ 000000                     _OB	equ	542
  8411+ 000000                     _OC1IE	equ	1122
  8412+ 000000                     _OC1IF	equ	1058
  8413+ 000000                     _OC1IP0	equ	1192
  8414+ 000000                     _OC1IP1	equ	1193
  8415+ 000000                     _OC1IP2	equ	1194
  8416+ 000000                     _OC1MD	equ	15248
  8417+ 000000                     _OC2IE	equ	1125
  8418+ 000000                     _OC2IF	equ	1061
  8419+ 000000                     _OC2IP0	equ	1204
  8420+ 000000                     _OC2IP1	equ	1205
  8421+ 000000                     _OC2IP2	equ	1206
  8422+ 000000                     _OC2MD	equ	15249
  8423+ 000000                     _OC3IE	equ	1139
  8424+ 000000                     _OC3IF	equ	1075
  8425+ 000000                     _OC3IP0	equ	1260
  8426+ 000000                     _OC3IP1	equ	1261
  8427+ 000000                     _OC3IP2	equ	1262
  8428+ 000000                     _OC3MD	equ	15250
  8429+ 000000                     _OC4IE	equ	1140
  8430+ 000000                     _OC4IF	equ	1076
  8431+ 000000                     _OC4IP0	equ	1264
  8432+ 000000                     _OC4IP1	equ	1265
  8433+ 000000                     _OC4IP2	equ	1266
  8434+ 000000                     _OC4MD	equ	15251
  8435+ 000000                     _OC5IE	equ	1152
  8436+ 000000                     _OC5IF	equ	1088
  8437+ 000000                     _OC5IP0	equ	1312
  8438+ 000000                     _OC5IP1	equ	1313
  8439+ 000000                     _OC5IP2	equ	1314
  8440+ 000000                     _OC5MD	equ	15252
  8441+ 000000                     _OC6IE	equ	1153
  8442+ 000000                     _OC6IF	equ	1089
  8443+ 000000                     _OC6IP0	equ	1316
  8444+ 000000                     _OC6IP1	equ	1317
  8445+ 000000                     _OC6IP2	equ	1318
  8446+ 000000                     _OC6MD	equ	15253
  8447+ 000000                     _OC7IE	equ	1154
  8448+ 000000                     _OC7IF	equ	1090
  8449+ 000000                     _OC7IP0	equ	1320
  8450+ 000000                     _OC7IP1	equ	1321
  8451+ 000000                     _OC7IP2	equ	1322
  8452+ 000000                     _OC7MD	equ	15254
  8453+ 000000                     _OC8IE	equ	1155
  8454+ 000000                     _OC8IF	equ	1091
  8455+ 000000                     _OC8IP0	equ	1324
  8456+ 000000                     _OC8IP1	equ	1325
  8457+ 000000                     _OC8IP2	equ	1326
  8458+ 000000                     _OC8MD	equ	15255
  8459+ 000000                     _OCFLT	equ	3108
  8460+ 000000                     _OCM0	equ	3104
  8461+ 000000                     _OCM1	equ	3105
  8462+ 000000                     _OCM2	equ	3106
  8463+ 000000                     _OCSIDL	equ	3117
  8464+ 000000                     _OCTSEL	equ	3107
  8465+ 000000                     _OERR	equ	4209
  8466+ 000000                     _OFFCAL	equ	5404
  8467+ 000000                     _OPMODE0	equ	7301
  8468+ 000000                     _OPMODE1	equ	7302
  8469+ 000000                     _OPMODE2	equ	7303
  8470+ 000000                     _OSCFAIL	equ	1025
  8471+ 000000                     _OSWEN	equ	14864
  8472+ 000000                     _OSYNC	equ	3665
  8473+ 000000                     _OV	equ	530
  8474+ 000000                     _OVATE	equ	1034
  8475+ 000000                     _OVBTE	equ	1033
  8476+ 000000                     _P	equ	4164
  8477+ 000000                     _PCDOUT	equ	2326
  8478+ 000000                     _PCFG0	equ	5440
  8479+ 000000                     _PCFG1	equ	5441
  8480+ 000000                     _PCFG10	equ	5450
  8481+ 000000                     _PCFG11	equ	5451
  8482+ 000000                     _PCFG12	equ	5452
  8483+ 000000                     _PCFG13	equ	5453
  8484+ 000000                     _PCFG14	equ	5454
  8485+ 000000                     _PCFG15	equ	5455
  8486+ 000000                     _PCFG2	equ	5442
  8487+ 000000                     _PCFG3	equ	5443
  8488+ 000000                     _PCFG4	equ	5444
  8489+ 000000                     _PCFG5	equ	5445
  8490+ 000000                     _PCFG6	equ	5446
  8491+ 000000                     _PCFG7	equ	5447
  8492+ 000000                     _PCFG8	equ	5448
  8493+ 000000                     _PCFG9	equ	5449
  8494+ 000000                     _PDSEL0	equ	4193
  8495+ 000000                     _PDSEL1	equ	4194
  8496+ 000000                     _PEN	equ	4146
  8497+ 000000                     _PEN1H	equ	3652
  8498+ 000000                     _PEN1L	equ	3648
  8499+ 000000                     _PEN2H	equ	3653
  8500+ 000000                     _PEN2L	equ	3649
  8501+ 000000                     _PEN3H	equ	3654
  8502+ 000000                     _PEN3L	equ	3650
  8503+ 000000                     _PEN4H	equ	3655
  8504+ 000000                     _PEN4L	equ	3651
  8505+ 000000                     _PERR	equ	4211
  8506+ 000000                     _POR	equ	14848
  8507+ 000000                     _POSRES	equ	2322
  8508+ 000000                     _POST0	equ	14870
  8509+ 000000                     _POST1	equ	14871
  8510+ 000000                     _POUT1H	equ	3745
  8511+ 000000                     _POUT1L	equ	3744
  8512+ 000000                     _POUT2H	equ	3747
  8513+ 000000                     _POUT2L	equ	3746
  8514+ 000000                     _POUT3H	equ	3749
  8515+ 000000                     _POUT3L	equ	3748
  8516+ 000000                     _POUT4H	equ	3751
  8517+ 000000                     _POUT4L	equ	3750
  8518+ 000000                     _POVD1H	equ	3753
  8519+ 000000                     _POVD1L	equ	3752
  8520+ 000000                     _POVD2H	equ	3755
  8521+ 000000                     _POVD2L	equ	3754
  8522+ 000000                     _POVD3H	equ	3757
  8523+ 000000                     _POVD3L	equ	3756
  8524+ 000000                     _POVD4H	equ	3759
  8525+ 000000                     _POVD4L	equ	3758
  8526+ 000000                     _PPRE0	equ	4368
  8527+ 000000                     _PPRE1	equ	4369
  8528+ 000000                     _PROGOP0	equ	15104
  8529+ 000000                     _PROGOP1	equ	15105
  8530+ 000000                     _PROGOP2	equ	15106
  8531+ 000000                     _PROGOP3	equ	15107
  8532+ 000000                     _PROGOP4	equ	15108
  8533+ 000000                     _PROGOP5	equ	15109
  8534+ 000000                     _PROGOP6	equ	15110
  8535+ 000000                     _PRSEG0	equ	7328
  8536+ 000000                     _PRSEG1	equ	7329
  8537+ 000000                     _PRSEG2	equ	7330
  8538+ 000000                     _PSV	equ	546
  8539+ 000000                     _PTCKPS0	equ	3586
  8540+ 000000                     _PTCKPS1	equ	3587
  8541+ 000000                     _PTDIR	equ	3615
  8542+ 000000                     _PTEN	equ	3599
  8543+ 000000                     _PTMOD0	equ	3584
  8544+ 000000                     _PTMOD1	equ	3585
  8545+ 000000                     _PTMOD2	equ	3657
  8546+ 000000                     _PTMOD3	equ	3658
  8547+ 000000                     _PTMOD4	equ	3659
  8548+ 000000                     _PTMR0	equ	3600
  8549+ 000000                     _PTMR1	equ	3601
  8550+ 000000                     _PTMR10	equ	3610
  8551+ 000000                     _PTMR11	equ	3611
  8552+ 000000                     _PTMR12	equ	3612
  8553+ 000000                     _PTMR13	equ	3613
  8554+ 000000                     _PTMR14	equ	3614
  8555+ 000000                     _PTMR2	equ	3602
  8556+ 000000                     _PTMR3	equ	3603
  8557+ 000000                     _PTMR4	equ	3604
  8558+ 000000                     _PTMR5	equ	3605
  8559+ 000000                     _PTMR6	equ	3606
  8560+ 000000                     _PTMR7	equ	3607
  8561+ 000000                     _PTMR8	equ	3608
  8562+ 000000                     _PTMR9	equ	3609
  8563+ 000000                     _PTOPS0	equ	3588
  8564+ 000000                     _PTOPS1	equ	3589
  8565+ 000000                     _PTOPS2	equ	3590
  8566+ 000000                     _PTOPS3	equ	3591
  8567+ 000000                     _PTSIDL	equ	3597
  8568+ 000000                     _PWMIE	equ	1159
  8569+ 000000                     _PWMIF	equ	1095
  8570+ 000000                     _PWMIP0	equ	1340
  8571+ 000000                     _PWMIP1	equ	1341
  8572+ 000000                     _PWMIP2	equ	1342
  8573+ 000000                     _PWMMD	equ	15241
  8574+ 000000                     _QECK0	equ	2340
  8575+ 000000                     _QECK1	equ	2341
  8576+ 000000                     _QECK2	equ	2342
  8577+ 000000                     _QEIIE	equ	1160
  8578+ 000000                     _QEIIF	equ	1096
  8579+ 000000                     _QEIIP0	equ	1344
  8580+ 000000                     _QEIIP1	equ	1345
  8581+ 000000                     _QEIIP2	equ	1346
  8582+ 000000                     _QEIM0	equ	2328
  8583+ 000000                     _QEIM1	equ	2329
  8584+ 000000                     _QEIM2	equ	2330
  8585+ 000000                     _QEIMD	equ	15242
  8586+ 000000                     _QEISIDL	equ	2333
  8587+ 000000                     _QEOUT	equ	2343
  8588+ 000000                     _RA	equ	532
  8589+ 000000                     _RA10	equ	5658
  8590+ 000000                     _RA14	equ	5662
  8591+ 000000                     _RA15	equ	5663
  8592+ 000000                     _RA9	equ	5657
  8593+ 000000                     _RB0	equ	5696
  8594+ 000000                     _RB1	equ	5697
  8595+ 000000                     _RB10	equ	5706
  8596+ 000000                     _RB11	equ	5707
  8597+ 000000                     _RB12	equ	5708
  8598+ 000000                     _RB13	equ	5709
  8599+ 000000                     _RB14	equ	5710
  8600+ 000000                     _RB15	equ	5711
  8601+ 000000                     _RB2	equ	5698
  8602+ 000000                     _RB3	equ	5699
  8603+ 000000                     _RB4	equ	5700
  8604+ 000000                     _RB5	equ	5701
  8605+ 000000                     _RB6	equ	5702
  8606+ 000000                     _RB7	equ	5703
  8607+ 000000                     _RB8	equ	5704
  8608+ 000000                     _RB9	equ	5705
  8609+ 000000                     _RBF	equ	4161
  8610+ 000000                     _RC1	equ	5745
  8611+ 000000                     _RC13	equ	5757
  8612+ 000000                     _RC14	equ	5758
  8613+ 000000                     _RC15	equ	5759
  8614+ 000000                     _RC3	equ	5747
  8615+ 000000                     _RCEN	equ	4147
  8616+ 000000                     _RD0	equ	5792
  8617+ 000000                     _RD1	equ	5793
  8618+ 000000                     _RD10	equ	5802
  8619+ 000000                     _RD11	equ	5803
  8620+ 000000                     _RD12	equ	5804
  8621+ 000000                     _RD13	equ	5805
  8622+ 000000                     _RD14	equ	5806
  8623+ 000000                     _RD15	equ	5807
  8624+ 000000                     _RD2	equ	5794
  8625+ 000000                     _RD3	equ	5795
  8626+ 000000                     _RD4	equ	5796
  8627+ 000000                     _RD5	equ	5797
  8628+ 000000                     _RD6	equ	5798
  8629+ 000000                     _RD7	equ	5799
  8630+ 000000                     _RD8	equ	5800
  8631+ 000000                     _RD9	equ	5801
  8632+ 000000                     _RE0	equ	5840
  8633+ 000000                     _RE1	equ	5841
  8634+ 000000                     _RE2	equ	5842
  8635+ 000000                     _RE3	equ	5843
  8636+ 000000                     _RE4	equ	5844
  8637+ 000000                     _RE5	equ	5845
  8638+ 000000                     _RE6	equ	5846
  8639+ 000000                     _RE7	equ	5847
  8640+ 000000                     _RE8	equ	5848
  8641+ 000000                     _RE9	equ	5849
  8642+ 000000                     _REC0	equ	7376
  8643+ 000000                     _REC1	equ	7377
  8644+ 000000                     _REC2	equ	7378
  8645+ 000000                     _REC3	equ	7379
  8646+ 000000                     _REC4	equ	7380
  8647+ 000000                     _REC5	equ	7381
  8648+ 000000                     _REC6	equ	7382
  8649+ 000000                     _REC7	equ	7383
  8650+ 000000                     _REQOP0	equ	7304
  8651+ 000000                     _REQOP1	equ	7305
  8652+ 000000                     _REQOP2	equ	7306
  8653+ 000000                     _RF0	equ	5888
  8654+ 000000                     _RF1	equ	5889
  8655+ 000000                     _RF2	equ	5890
  8656+ 000000                     _RF3	equ	5891
  8657+ 000000                     _RF4	equ	5892
  8658+ 000000                     _RF5	equ	5893
  8659+ 000000                     _RF6	equ	5894
  8660+ 000000                     _RF7	equ	5895
  8661+ 000000                     _RF8	equ	5896
  8662+ 000000                     _RG0	equ	5936
  8663+ 000000                     _RG1	equ	5937
  8664+ 000000                     _RG2	equ	5938
  8665+ 000000                     _RG3	equ	5939
  8666+ 000000                     _RG6	equ	5942
  8667+ 000000                     _RG7	equ	5943
  8668+ 000000                     _RG8	equ	5944
  8669+ 000000                     _RG9	equ	5945
  8670+ 000000                     _RIDLE	equ	4212
  8671+ 000000                     _RL_BSR	equ	14976
  8672+ 000000                     _RL_SSR	equ	14992
  8673+ 000000                     _RND	equ	545
  8674+ 000000                     _RSEN	equ	4145
  8675+ 000000                     _RXB0DBEN	equ	7282
  8676+ 000000                     _RXB0IE	equ	7360
  8677+ 000000                     _RXB0IF	equ	7344
  8678+ 000000                     _RXB0OVFL	equ	7359
  8679+ 000000                     _RXB1IE	equ	7361
  8680+ 000000                     _RXB1IF	equ	7345
  8681+ 000000                     _RXB1OVFL	equ	7358
  8682+ 000000                     _RXBP	equ	7355
  8683+ 000000                     _RXFUL	equ	7159
  8684+ 000000                     _RXRB0	equ	7076
  8685+ 000000                     _RXRB1	equ	7080
  8686+ 000000                     _RXRTR	equ	7081
  8687+ 000000                     _RXRTRRO	equ	7155
  8688  000000                     _RXWARN	equ	7353
  8689  000000                     _R_W	equ	4162
  8690  000000                     _R_nW	equ	4162
  8691  000000                     _S	equ	4163
  8692  000000                     _SA	equ	541
  8693  000000                     _SAB	equ	538
  8694  000000                     _SAM	equ	7334
  8695  000000                     _SAMC0	equ	5416
  8696  000000                     _SAMC1	equ	5417
  8697  000000                     _SAMC2	equ	5418
  8698  000000                     _SAMC3	equ	5419
  8699  000000                     _SAMC4	equ	5420
  8700  000000                     _SAMP	equ	5377
  8701  000000                     _SATA	equ	551
  8702  000000                     _SATB	equ	550
  8703  000000                     _SATDW	equ	549
  8704  000000                     _SB	equ	540
  8705  000000                     _SCLREL	equ	4156
  8706  000000                     _SEG1PH0	equ	7331
  8707  000000                     _SEG1PH1	equ	7332
  8708  000000                     _SEG1PH2	equ	7333
  8709  000000                     _SEG2PH0	equ	7336
  8710  000000                     _SEG2PH1	equ	7337
  8711  000000                     _SEG2PH2	equ	7338
  8712  000000                     _SEG2PHTS	equ	7335
  8713  000000                     _SEN	equ	4144
  8714  000000                     _SEVOPS0	equ	3672
  8715  000000                     _SEVOPS1	equ	3673
  8716  000000                     _SEVOPS2	equ	3674
  8717  000000                     _SEVOPS3	equ	3675
  8718  000000                     _SEVTCMP0	equ	3632
  8719  000000                     _SEVTCMP1	equ	3633
  8720  000000                     _SEVTCMP10	equ	3642
  8721  000000                     _SEVTCMP11	equ	3643
  8722  000000                     _SEVTCMP12	equ	3644
  8723  000000                     _SEVTCMP13	equ	3645
  8724  000000                     _SEVTCMP14	equ	3646
  8725  000000                     _SEVTCMP2	equ	3634
  8726  000000                     _SEVTCMP3	equ	3635
  8727  000000                     _SEVTCMP4	equ	3636
  8728  000000                     _SEVTCMP5	equ	3637
  8729  000000                     _SEVTCMP6	equ	3638
  8730  000000                     _SEVTCMP7	equ	3639
  8731  000000                     _SEVTCMP8	equ	3640
  8732  000000                     _SEVTCMP9	equ	3641
  8733  000000                     _SEVTDIR	equ	3647
  8734  000000                     _SI2CIE	equ	1133
  8735  000000                     _SI2CIF	equ	1069
  8736  000000                     _SI2CIP0	equ	1236
  8737  000000                     _SI2CIP1	equ	1237
  8738  000000                     _SI2CIP2	equ	1238
  8739  000000                     _SID0	equ	6146
  8740  000000                     _SID1	equ	6147
  8741  000000                     _SID10	equ	6156
  8742  000000                     _SID2	equ	6148
  8743  000000                     _SID3	equ	6149
  8744  000000                     _SID4	equ	6150
  8745  000000                     _SID5	equ	6151
  8746  000000                     _SID6	equ	6152
  8747  000000                     _SID7	equ	6153
  8748  000000                     _SID8	equ	6154
  8749  000000                     _SID9	equ	6155
  8750  000000                     _SIMSAM	equ	5379
  8751  000000                     _SJW0	equ	7318
  8752  000000                     _SJW1	equ	7319
  8753  000000                     _SLEEP	equ	14851
  8754  000000                     _SLEEP_MODE	equ	15248
  8755  000000                     _SMEN	equ	4152
  8756  000000                     _SMP	equ	4377
  8757  000000                     _SMPI0	equ	5394
  8758  000000                     _SMPI1	equ	5395
  8759  000000                     _SMPI2	equ	5396
  8760  000000                     _SMPI3	equ	5397
  8761  000000                     _SPI1IE	equ	1128
  8762  000000                     _SPI1IF	equ	1064
  8763  000000                     _SPI1IP0	equ	1216
  8764  000000                     _SPI1IP1	equ	1217
  8765  000000                     _SPI1IP2	equ	1218
  8766  000000                     _SPI1MD	equ	15235
  8767  000000                     _SPI2IE	equ	1146
  8768  000000                     _SPI2IF	equ	1082
  8769  000000                     _SPI2IP0	equ	1288
  8770  000000                     _SPI2IP1	equ	1289
  8771  000000                     _SPI2IP2	equ	1290
  8772  000000                     _SPI2MD	equ	15236
  8773  000000                     _SPIEN	equ	4367
  8774  000000                     _SPIFSD	equ	4381
  8775  000000                     _SPIRBF	equ	4352
  8776  000000                     _SPIROV	equ	4358
  8777  000000                     _SPISIDL	equ	4365
  8778  000000                     _SPITBF	equ	4353
  8779  000000                     _SPRE0	equ	4370
  8780  000000                     _SPRE1	equ	4371
  8781  000000                     _SPRE2	equ	4372
  8782  000000                     _SRR	equ	6657
  8783  000000                     _SSEN	equ	4375
  8784  000000                     _SSRC0	equ	5381
  8785  000000                     _SSRC1	equ	5382
  8786  000000                     _SSRC2	equ	5383
  8787  000000                     _STKERR	equ	1026
  8788  000000                     _STREN	equ	4150
  8789  000000                     _STSEL	equ	4192
  8790  000000                     _SWDTEN	equ	14853
  8791  000000                     _SWPAB	equ	2327
  8792  000000                     _SWR	equ	14854
  8793  000000                     _T1IE	equ	1123
  8794  000000                     _T1IF	equ	1059
  8795  000000                     _T1IP0	equ	1196
  8796  000000                     _T1IP1	equ	1197
  8797  000000                     _T1IP2	equ	1198
  8798  000000                     _T1MD	equ	15243
  8799  000000                     _T2IE	equ	1126
  8800  000000                     _T2IF	equ	1062
  8801  000000                     _T2IP0	equ	1208
  8802  000000                     _T2IP1	equ	1209
  8803  000000                     _T2IP2	equ	1210
  8804  000000                     _T2MD	equ	15244
  8805  000000                     _T32	equ	2179
  8806  000000                     _T3IE	equ	1127
  8807  000000                     _T3IF	equ	1063
  8808  000000                     _T3IP0	equ	1212
  8809  000000                     _T3IP1	equ	1213
  8810  000000                     _T3IP2	equ	1214
  8811  000000                     _T3MD	equ	15245
  8812  000000                     _T4IE	equ	1141
  8813  000000                     _T4IF	equ	1077
  8814  000000                     _T4IP0	equ	1268
  8815  000000                     _T4IP1	equ	1269
  8816  000000                     _T4IP2	equ	1270
  8817  000000                     _T4MD	equ	15246
  8818  000000                     _T5IE	equ	1142
  8819  000000                     _T5IF	equ	1078
  8820  000000                     _T5IP0	equ	1272
  8821  000000                     _T5IP1	equ	1273
  8822  000000                     _T5IP2	equ	1274
  8823  000000                     _T5MD	equ	15247
  8824  000000                     _TBF	equ	4160
  8825  000000                     _TCKPS0	equ	2084
  8826  000000                     _TCKPS1	equ	2085
  8827  000000                     _TCS	equ	2081
  8828  000000                     _TEC0	equ	7384
  8829  000000                     _TEC1	equ	7385
  8830  000000                     _TEC2	equ	7386
  8831  000000                     _TEC3	equ	7387
  8832  000000                     _TEC4	equ	7388
  8833  000000                     _TEC5	equ	7389
  8834  000000                     _TEC6	equ	7390
  8835  000000                     _TEC7	equ	7391
  8836  000000                     _TGATE	equ	2086
  8837  000000                     _TMODE	equ	1422
  8838  000000                     _TON	equ	2095
  8839  000000                     _TQCKPS0	equ	2323
  8840  000000                     _TQCKPS1	equ	2324
  8841  000000                     _TQCS	equ	2321
  8842  000000                     _TQGATE	equ	2325
  8843  000000                     _TRAPR	equ	14863
  8844  000000                     _TRISA10	equ	5642
  8845  000000                     _TRISA14	equ	5646
  8846  000000                     _TRISA15	equ	5647
  8847  000000                     _TRISA9	equ	5641
  8848  000000                     _TRISB0	equ	5680
  8849  000000                     _TRISB1	equ	5681
  8850  000000                     _TRISB10	equ	5690
  8851  000000                     _TRISB11	equ	5691
  8852  000000                     _TRISB12	equ	5692
  8853  000000                     _TRISB13	equ	5693
  8854  000000                     _TRISB14	equ	5694
  8855  000000                     _TRISB15	equ	5695
  8856  000000                     _TRISB2	equ	5682
  8857  000000                     _TRISB3	equ	5683
  8858  000000                     _TRISB4	equ	5684
  8859  000000                     _TRISB5	equ	5685
  8860  000000                     _TRISB6	equ	5686
  8861  000000                     _TRISB7	equ	5687
  8862  000000                     _TRISB8	equ	5688
  8863  000000                     _TRISB9	equ	5689
  8864  000000                     _TRISC1	equ	5729
  8865  000000                     _TRISC13	equ	5741
  8866  000000                     _TRISC14	equ	5742
  8867  000000                     _TRISC15	equ	5743
  8868  000000                     _TRISC3	equ	5731
  8869  000000                     _TRISD0	equ	5776
  8870  000000                     _TRISD1	equ	5777
  8871  000000                     _TRISD10	equ	5786
  8872  000000                     _TRISD11	equ	5787
  8873  000000                     _TRISD12	equ	5788
  8874  000000                     _TRISD13	equ	5789
  8875  000000                     _TRISD14	equ	5790
  8876  000000                     _TRISD15	equ	5791
  8877  000000                     _TRISD2	equ	5778
  8878  000000                     _TRISD3	equ	5779
  8879  000000                     _TRISD4	equ	5780
  8880  000000                     _TRISD5	equ	5781
  8881  000000                     _TRISD6	equ	5782
  8882  000000                     _TRISD7	equ	5783
  8883  000000                     _TRISD8	equ	5784
  8884  000000                     _TRISD9	equ	5785
  8885  000000                     _TRISE0	equ	5824
  8886  000000                     _TRISE1	equ	5825
  8887  000000                     _TRISE2	equ	5826
  8888  000000                     _TRISE3	equ	5827
  8889  000000                     _TRISE4	equ	5828
  8890  000000                     _TRISE5	equ	5829
  8891  000000                     _TRISE6	equ	5830
  8892  000000                     _TRISE7	equ	5831
  8893  000000                     _TRISE8	equ	5832
  8894  000000                     _TRISE9	equ	5833
  8895  000000                     _TRISF0	equ	5872
  8896  000000                     _TRISF1	equ	5873
  8897  000000                     _TRISF2	equ	5874
  8898  000000                     _TRISF3	equ	5875
  8899  000000                     _TRISF4	equ	5876
  8900  000000                     _TRISF5	equ	5877
  8901  000000                     _TRISF6	equ	5878
  8902  000000                     _TRISF7	equ	5879
  8903  000000                     _TRISF8	equ	5880
  8904  000000                     _TRISG0	equ	5920
  8905  000000                     _TRISG1	equ	5921
  8906  000000                     _TRISG2	equ	5922
  8907  000000                     _TRISG3	equ	5923
  8908  000000                     _TRISG6	equ	5926
  8909  000000                     _TRISG7	equ	5927
  8910  000000                     _TRISG8	equ	5928
  8911  000000                     _TRISG9	equ	5929
  8912  000000                     _TRMT	equ	4216
  8913  000000                     _TRSTAT	equ	4174
  8914  000000                     _TSIDL	equ	2093
  8915  000000                     _TSYNC	equ	2082
  8916  000000                     _TUN0	equ	14880
  8917  000000                     _TUN1	equ	14881
  8918  000000                     _TUN2	equ	14882
  8919  000000                     _TUN3	equ	14883
  8920  000000                     _TUN4	equ	14884
  8921  000000                     _TUN5	equ	14885
  8922  000000                     _TWRI	equ	15112
  8923  000000                     _TX2B2D40	equ	6736
  8924  000000                     _TX2B2D41	equ	6737
  8925  000000                     _TX2B2D42	equ	6738
  8926  000000                     _TX2B2D43	equ	6739
  8927  000000                     _TX2B2D44	equ	6740
  8928  000000                     _TX2B2D45	equ	6741
  8929  000000                     _TX2B2D46	equ	6742
  8930  000000                     _TX2B2D47	equ	6743
  8931  000000                     _TX2B2D60	equ	6752
  8932  000000                     _TX2B2D61	equ	6753
  8933  000000                     _TX2B2D62	equ	6754
  8934  000000                     _TX2B2D63	equ	6755
  8935  000000                     _TX2B2D64	equ	6756
  8936  000000                     _TX2B2D65	equ	6757
  8937  000000                     _TX2B2D66	equ	6758
  8938  000000                     _TX2B2D67	equ	6759
  8939  000000                     _TX2B2D70	equ	6760
  8940  000000                     _TX2B2D71	equ	6761
  8941  000000                     _TX2B2D72	equ	6762
  8942  000000                     _TX2B2D73	equ	6763
  8943  000000                     _TX2B2D74	equ	6764
  8944  000000                     _TX2B2D75	equ	6765
  8945  000000                     _TX2B2D76	equ	6766
  8946  000000                     _TX2B2D77	equ	6767
  8947  000000                     _TXABT	equ	6774
  8948  000000                     _TXB0D00	equ	6960
  8949  000000                     _TXB0D01	equ	6961
  8950  000000                     _TXB0D02	equ	6962
  8951  000000                     _TXB0D03	equ	6963
  8952  000000                     _TXB0D04	equ	6964
  8953  000000                     _TXB0D05	equ	6965
  8954  000000                     _TXB0D06	equ	6966
  8955  000000                     _TXB0D07	equ	6967
  8956  000000                     _TXB0D10	equ	6968
  8957  000000                     _TXB0D11	equ	6969
  8958  000000                     _TXB0D12	equ	6970
  8959  000000                     _TXB0D13	equ	6971
  8960  000000                     _TXB0D14	equ	6972
  8961  000000                     _TXB0D15	equ	6973
  8962  000000                     _TXB0D16	equ	6974
  8963  000000                     _TXB0D17	equ	6975
  8964  000000                     _TXB0D20	equ	6976
  8965  000000                     _TXB0D21	equ	6977
  8966  000000                     _TXB0D22	equ	6978
  8967  000000                     _TXB0D23	equ	6979
  8968  000000                     _TXB0D24	equ	6980
  8969  000000                     _TXB0D25	equ	6981
  8970  000000                     _TXB0D26	equ	6982
  8971  000000                     _TXB0D27	equ	6983
  8972  000000                     _TXB0D30	equ	6984
  8973  000000                     _TXB0D31	equ	6985
  8974  000000                     _TXB0D32	equ	6986
  8975  000000                     _TXB0D33	equ	6987
  8976  000000                     _TXB0D34	equ	6988
  8977  000000                     _TXB0D35	equ	6989
  8978  000000                     _TXB0D36	equ	6990
  8979  000000                     _TXB0D37	equ	6991
  8980  000000                     _TXB0D40	equ	6992
  8981  000000                     _TXB0D41	equ	6993
  8982  000000                     _TXB0D42	equ	6994
  8983  000000                     _TXB0D43	equ	6995
  8984  000000                     _TXB0D44	equ	6996
  8985  000000                     _TXB0D45	equ	6997
  8986  000000                     _TXB0D46	equ	6998
  8987  000000                     _TXB0D47	equ	6999
  8988  000000                     _TXB0D50	equ	7000
  8989  000000                     _TXB0D51	equ	7001
  8990  000000                     _TXB0D52	equ	7002
  8991  000000                     _TXB0D53	equ	7003
  8992  000000                     _TXB0D54	equ	7004
  8993  000000                     _TXB0D55	equ	7005
  8994  000000                     _TXB0D56	equ	7006
  8995  000000                     _TXB0D57	equ	7007
  8996  000000                     _TXB0D60	equ	7008
  8997  000000                     _TXB0D61	equ	7009
  8998  000000                     _TXB0D62	equ	7010
  8999  000000                     _TXB0D63	equ	7011
  9000  000000                     _TXB0D64	equ	7012
  9001  000000                     _TXB0D65	equ	7013
  9002  000000                     _TXB0D66	equ	7014
  9003  000000                     _TXB0D67	equ	7015
  9004  000000                     _TXB0D70	equ	7016
  9005  000000                     _TXB0D71	equ	7017
  9006  000000                     _TXB0D72	equ	7018
  9007  000000                     _TXB0D73	equ	7019
  9008  000000                     _TXB0D74	equ	7020
  9009  000000                     _TXB0D75	equ	7021
  9010  000000                     _TXB0D76	equ	7022
  9011  000000                     _TXB0D77	equ	7023
  9012  000000                     _TXB0IE	equ	7362
  9013  000000                     _TXB0IF	equ	7346
  9014  000000                     _TXB1D00	equ	6832
  9015  000000                     _TXB1D01	equ	6833
  9016  000000                     _TXB1D02	equ	6834
  9017  000000                     _TXB1D03	equ	6835
  9018  000000                     _TXB1D04	equ	6836
  9019  000000                     _TXB1D05	equ	6837
  9020  000000                     _TXB1D06	equ	6838
  9021  000000                     _TXB1D07	equ	6839
  9022  000000                     _TXB1D10	equ	6840
  9023  000000                     _TXB1D11	equ	6841
  9024  000000                     _TXB1D12	equ	6842
  9025  000000                     _TXB1D13	equ	6843
  9026  000000                     _TXB1D14	equ	6844
  9027  000000                     _TXB1D15	equ	6845
  9028  000000                     _TXB1D16	equ	6846
  9029  000000                     _TXB1D17	equ	6847
  9030  000000                     _TXB1D20	equ	6848
  9031  000000                     _TXB1D21	equ	6849
  9032  000000                     _TXB1D22	equ	6850
  9033  000000                     _TXB1D23	equ	6851
  9034  000000                     _TXB1D24	equ	6852
  9035  000000                     _TXB1D25	equ	6853
  9036  000000                     _TXB1D26	equ	6854
  9037  000000                     _TXB1D27	equ	6855
  9038  000000                     _TXB1D30	equ	6856
  9039  000000                     _TXB1D31	equ	6857
  9040  000000                     _TXB1D32	equ	6858
  9041  000000                     _TXB1D33	equ	6859
  9042  000000                     _TXB1D34	equ	6860
  9043  000000                     _TXB1D35	equ	6861
  9044  000000                     _TXB1D36	equ	6862
  9045  000000                     _TXB1D37	equ	6863
  9046  000000                     _TXB1D40	equ	6864
  9047  000000                     _TXB1D41	equ	6865
  9048  000000                     _TXB1D42	equ	6866
  9049  000000                     _TXB1D43	equ	6867
  9050  000000                     _TXB1D44	equ	6868
  9051  000000                     _TXB1D45	equ	6869
  9052  000000                     _TXB1D46	equ	6870
  9053  000000                     _TXB1D47	equ	6871
  9054  000000                     _TXB1D50	equ	6872
  9055  000000                     _TXB1D51	equ	6873
  9056  000000                     _TXB1D52	equ	6874
  9057  000000                     _TXB1D53	equ	6875
  9058  000000                     _TXB1D54	equ	6876
  9059  000000                     _TXB1D55	equ	6877
  9060  000000                     _TXB1D56	equ	6878
  9061  000000                     _TXB1D57	equ	6879
  9062  000000                     _TXB1D60	equ	6880
  9063  000000                     _TXB1D61	equ	6881
  9064  000000                     _TXB1D62	equ	6882
  9065  000000                     _TXB1D63	equ	6883
  9066  000000                     _TXB1D64	equ	6884
  9067  000000                     _TXB1D65	equ	6885
  9068  000000                     _TXB1D66	equ	6886
  9069  000000                     _TXB1D67	equ	6887
  9070  000000                     _TXB1D70	equ	6888
  9071  000000                     _TXB1D71	equ	6889
  9072  000000                     _TXB1D72	equ	6890
  9073  000000                     _TXB1D73	equ	6891
  9074  000000                     _TXB1D74	equ	6892
  9075  000000                     _TXB1D75	equ	6893
  9076  000000                     _TXB1D76	equ	6894
  9077  000000                     _TXB1D77	equ	6895
  9078  000000                     _TXB1IE	equ	7363
  9079  000000                     _TXB1IF	equ	7347
  9080  000000                     _TXB2D00	equ	6704
  9081  000000                     _TXB2D01	equ	6705
  9082  000000                     _TXB2D02	equ	6706
  9083  000000                     _TXB2D03	equ	6707
  9084  000000                     _TXB2D04	equ	6708
  9085  000000                     _TXB2D05	equ	6709
  9086  000000                     _TXB2D06	equ	6710
  9087  000000                     _TXB2D07	equ	6711
  9088  000000                     _TXB2D10	equ	6712
  9089  000000                     _TXB2D11	equ	6713
  9090  000000                     _TXB2D12	equ	6714
  9091  000000                     _TXB2D13	equ	6715
  9092  000000                     _TXB2D14	equ	6716
  9093  000000                     _TXB2D15	equ	6717
  9094  000000                     _TXB2D16	equ	6718
  9095  000000                     _TXB2D17	equ	6719
  9096  000000                     _TXB2D20	equ	6720
  9097  000000                     _TXB2D21	equ	6721
  9098  000000                     _TXB2D22	equ	6722
  9099  000000                     _TXB2D23	equ	6723
  9100  000000                     _TXB2D24	equ	6724
  9101  000000                     _TXB2D25	equ	6725
  9102  000000                     _TXB2D26	equ	6726
  9103  000000                     _TXB2D27	equ	6727
  9104  000000                     _TXB2D30	equ	6728
  9105  000000                     _TXB2D31	equ	6729
  9106  000000                     _TXB2D32	equ	6730
  9107  000000                     _TXB2D33	equ	6731
  9108  000000                     _TXB2D34	equ	6732
  9109  000000                     _TXB2D35	equ	6733
  9110  000000                     _TXB2D36	equ	6734
  9111  000000                     _TXB2D37	equ	6735
  9112  000000                     _TXB2D40	equ	8272
  9113  000000                     _TXB2D41	equ	8273
  9114  000000                     _TXB2D42	equ	8274
  9115  000000                     _TXB2D43	equ	8275
  9116  000000                     _TXB2D44	equ	8276
  9117  000000                     _TXB2D45	equ	8277
  9118  000000                     _TXB2D46	equ	8278
  9119  000000                     _TXB2D47	equ	8279
  9120  000000                     _TXB2D50	equ	6744
  9121  000000                     _TXB2D51	equ	6745
  9122  000000                     _TXB2D52	equ	6746
  9123  000000                     _TXB2D53	equ	6747
  9124  000000                     _TXB2D54	equ	6748
  9125  000000                     _TXB2D55	equ	6749
  9126  000000                     _TXB2D56	equ	6750
  9127  000000                     _TXB2D57	equ	6751
  9128  000000                     _TXB2D60	equ	8288
  9129  000000                     _TXB2D61	equ	8289
  9130  000000                     _TXB2D62	equ	8290
  9131  000000                     _TXB2D63	equ	8291
  9132  000000                     _TXB2D64	equ	8292
  9133  000000                     _TXB2D65	equ	8293
  9134  000000                     _TXB2D66	equ	8294
  9135  000000                     _TXB2D67	equ	8295
  9136  000000                     _TXB2D70	equ	8296
  9137  000000                     _TXB2D71	equ	8297
  9138  000000                     _TXB2D72	equ	8298
  9139  000000                     _TXB2D73	equ	8299
  9140  000000                     _TXB2D74	equ	8300
  9141  000000                     _TXB2D75	equ	8301
  9142  000000                     _TXB2D76	equ	8302
  9143  000000                     _TXB2D77	equ	8303
  9144  000000                     _TXB2IE	equ	7364
  9145  000000                     _TXB2IF	equ	7348
  9146  000000                     _TXBO	equ	7357
  9147  000000                     _TXBP	equ	7356
  9148  000000                     _TXERR	equ	6772
  9149  000000                     _TXIDE	equ	6656
  9150  000000                     _TXLARB	equ	6773
  9151  000000                     _TXPRI0	equ	6768
  9152  000000                     _TXPRI1	equ	6769
  9153  000000                     _TXRB0	equ	6695
  9154  000000                     _TXRB1	equ	6696
  9155  000000                     _TXREQ	equ	6771
  9156  000000                     _TXRTR	equ	6697
  9157  000000                     _TXWARN	equ	7354
  9158  000000                     _U1MD	equ	15237
  9159  000000                     _U1RXIE	equ	1129
  9160  000000                     _U1RXIF	equ	1065
  9161  000000                     _U1RXIP0	equ	1220
  9162  000000                     _U1RXIP1	equ	1221
  9163  000000                     _U1RXIP2	equ	1222
  9164  000000                     _U1TXIE	equ	1130
  9165  000000                     _U1TXIF	equ	1066
  9166  000000                     _U1TXIP0	equ	1224
  9167  000000                     _U1TXIP1	equ	1225
  9168  000000                     _U1TXIP2	equ	1226
  9169  000000                     _U2MD	equ	15238
  9170  000000                     _U2RXIE	equ	1144
  9171  000000                     _U2RXIF	equ	1080
  9172  000000                     _U2RXIP0	equ	1280
  9173  000000                     _U2RXIP1	equ	1281
  9174  000000                     _U2RXIP2	equ	1282
  9175  000000                     _U2TXIE	equ	1145
  9176  000000                     _U2TXIF	equ	1081
  9177  000000                     _U2TXIP0	equ	1284
  9178  000000                     _U2TXIP1	equ	1285
  9179  000000                     _U2TXIP2	equ	1286
  9180  000000                     _UARTEN	equ	4207
  9181  000000                     _UDIS	equ	3664
  9182  000000                     _UPDN	equ	2331
  9183  000000                     _UPDN_SRC	equ	2320
  9184  000000                     _URXDA	equ	4208
  9185  000000                     _URXISEL0	equ	4214
  9186  000000                     _URXISEL1	equ	4215
  9187  000000                     _URXREG0	equ	4240
  9188  000000                     _URXREG1	equ	4241
  9189  000000                     _URXREG2	equ	4242
  9190  000000                     _URXREG3	equ	4243
  9191  000000                     _URXREG4	equ	4244
  9192  000000                     _URXREG5	equ	4245
  9193  000000                     _URXREG6	equ	4246
  9194  000000                     _URXREG7	equ	4247
  9195  000000                     _URXREG8	equ	4248
  9196  000000                     _US	equ	556
  9197  000000                     _USIDL	equ	4205
  9198  000000                     _UTXBF	equ	4217
  9199  000000                     _UTXBRK	equ	4219
  9200  000000                     _UTXEN	equ	4218
  9201  000000                     _UTXISEL	equ	4223
  9202  000000                     _UTXREG0	equ	4224
  9203  000000                     _UTXREG1	equ	4225
  9204  000000                     _UTXREG2	equ	4226
  9205  000000                     _UTXREG3	equ	4227
  9206  000000                     _UTXREG4	equ	4228
  9207  000000                     _UTXREG5	equ	4229
  9208  000000                     _UTXREG6	equ	4230
  9209  000000                     _UTXREG7	equ	4231
  9210  000000                     _UTXREG8	equ	4232
  9211  000000                     _VCFG0	equ	5405
  9212  000000                     _VCFG1	equ	5406
  9213  000000                     _VCFG2	equ	5407
  9214  000000                     _VECNUM0	equ	1408
  9215  000000                     _VECNUM1	equ	1409
  9216  000000                     _VECNUM2	equ	1410
  9217  000000                     _VECNUM3	equ	1411
  9218  000000                     _VECNUM4	equ	1412
  9219  000000                     _VECNUM5	equ	1413
  9220  000000                     _VHOLD	equ	1421
  9221  000000                     _WAKE	equ	4199
  9222  000000                     _WAKFIL	equ	7342
  9223  000000                     _WAKIE	equ	7366
  9224  000000                     _WAKIF	equ	7350
  9225  000000                     _WDTO	equ	14852
  9226  000000                     _WR	equ	15119
  9227  000000                     _WREN	equ	15118
  9228  000000                     _WRERR	equ	15117
  9229  000000                     _XB0	equ	640
  9230  000000                     _XB1	equ	641
  9231  000000                     _XB10	equ	650
  9232  000000                     _XB11	equ	651
  9233  000000                     _XB12	equ	652
  9234  000000                     _XB13	equ	653
  9235  000000                     _XB14	equ	654
  9236  000000                     _XB2	equ	642
  9237  000000                     _XB3	equ	643
  9238  000000                     _XB4	equ	644
  9239  000000                     _XB5	equ	645
  9240  000000                     _XB6	equ	646
  9241  000000                     _XB7	equ	647
  9242  000000                     _XB8	equ	648
  9243  000000                     _XB9	equ	649
  9244  000000                     _XMODEN	equ	575
  9245  000000                     _XWM0	equ	560
  9246  000000                     _XWM1	equ	561
  9247  000000                     _XWM2	equ	562
  9248  000000                     _XWM3	equ	563
  9249  000000                     _YMODEN	equ	574
  9250  000000                     _YWM0	equ	564
  9251  000000                     _YWM1	equ	565
  9252  000000                     _YWM2	equ	566
  9253  000000                     _YWM3	equ	567
  9254  000000                     _Z	equ	529


HI-TECH Software dsPIC Macro Assembler V9.62 build 7866                    Page 2
Symbol Table                                           Tue Jan 05 21:44:32 2016

                 __end_of_vTaskMissedYield 00F62C  
                                       u10 00E6AA  
                                       u11 00E6A6  
                                       u20 00E702  
                                       u21 00E6FE  
                                       u30 00E722  
                                       u31 00E71E  
                                       u40 00E738  
                                       u41 00E734  
                                       u50 00E750  
                                       u19 008104  
                                       u51 00E74C  
                                       u60 00E76A  
                                       u61 00E766  
                                       u70 00E790  
                                       u71 00E78C  
                                       u80 00E7D6  
                                       u81 00E7D2  
                                       u90 00E7E2  
                                       u91 00E7DE  
                        _vPortEndScheduler 00C9C8  
              __end_of_vTaskStartScheduler 00EEEE  
                          _vTaskSuspendAll 00EF04  
                       _uxTopReadyPriority 00080E  
                                      u100 00E7FC  
                                      u101 00E7F8  
                                      u110 00E86E  
                                      u111 00E86A  
                                      u200 00E946  
                                      u120 00E880  
                                      u201 00E942  
                                      u121 00E898  
                                      u210 00E97A  
                                      u130 00E894  
                                      u211 00E976  
                                      u131 00E898  
                                      u300 00EA9E  
                                      u220 00E9A6  
                                      u140 00E8A0  
                                      u301 00EA9A  
                                      u221 00E9A2  
                                      u141 00E89C  
                                      u310 00EAC4  
                                      u230 00E9CE  
                                      u150 00E8D6  
                                      u311 00EAC0  
                                      u231 00E9CA  
                                      u151 00E8C2  
                                      u400 00EC04  
                                      u320 00EAFE  
                                      u240 00EA0C  
                                      u160 00E8D6  
                                      u401 00EC00  
                                      u321 00EAFA  
                                      u241 00EA08  
                                      u161 00E8DA  
                                      u410 00EC32  
                                      u330 00EB36  
                                      u250 00EA28  
                                      u170 00E8E2  
                                      u411 00EC2E  
                                      u331 00EB32  
                                      u251 00EA36  
                                      u171 00E8DE  
                                      u500 00ED3A  
                                      u420 00EC3E  
                                      u340 00EB4A  
                                      u180 00E908  
                                      u501 00ED36  
                                      u421 00EC3A  
                                      u341 00EB46  
                                      u181 00E904  
                                      u510 00ED50  
                                      u430 00EC56  
                                      u350 00EB62  
                                      u270 00EA5A  
                                      u190 00E91E  
                                      u511 00ED4C  
                                      u431 00EC52  
                                      u351 00EB5E  
                                      u271 00EA56  
                                      u263 00EA2E  
                                      u191 00E91A  
                                      u600 00EF2E  
                                      u520 00ED6C  
                                      u440 00EC70  
                                      u360 00EB94  
                                      u280 00EA72  
                                      u264 00EA3A  
                                      u601 00EF2A  
                                      u521 00ED68  
                                      u441 00EC6C  
                                      u361 00EB90  
                                      u281 00EA6E  
                                      u610 00EF3A  
                                      u530 00EDA6  
                                      u450 00ECB8  
                                      u370 00EBC4  
                                      u290 00EA84  
                                      u611 00EF36  
                                      u531 00EDA2  
                                      u451 00ECB4  
                                      u371 00EBD2  
                                      u291 00EA80  
                                      u700 00F0C2  
                                      u620 00EF72  
                                      u540 00EDF6  
                                      u460 00ECCE  
                                      u701 00F0BE  
                                      u621 00EF6E  
                                      u541 00EDF2  
                                      u461 00ECCA  
                                      u710 00F0F4  
                                      u630 00EFAC  
                                      u550 00EE02  
                                      u470 00ECDE  
                                      u390 00EBF0  
                                      u711 00F0F0  
                                      u631 00EFA8  
                                      u551 00EDFE  
                                      u471 00ECDA  
                                      u391 00EBEC  
                                      u383 00EBCA  
                                      u800 00F268  
                                      u720 00F102  
                                      u640 00EFC0  
                                      u560 00EE1C  
                                      u480 00ED20  
                                      u384 00EBD6  
                                      u801 00F264  
                                      u721 00F0FE  
                                      u641 00EFBC  
                                      u561 00EE18  
                                      u481 00ED32  
                                      u810 00F2A2  
                                      u730 00F140  
                                      u650 00EFCC  
                                      u570 00EE44  
                                      u490 00ED2E  
                                      u811 00F29E  
                                      u731 00F13C  
                                      u651 00EFC8  
                                      u571 00EE40  
                                      u491 00ED32  
                                      u900 00F50A  
                                      u820 00F2FC  
                                      u740 00F168  
                                      u660 00EFE0  
                                      u580 00EEC0  
                                      u901 00F506  
                                      u821 00F2F8  
                                      u741 00F164  
                                      u661 00EFDC  
                                      u581 00EEBC  
                                      u910 00F578  
                                      u830 00F310  
                                      u750 00F188  
                                      u670 00EFF6  
                                      u590 00EEDC  
                                      u911 00F574  
                                      u831 00F30C  
                                      u751 00F184  
                                      u671 00EFF2  
                                      u591 00EED8  
                                      u920 00F594  
                                      u840 00F388  
                                      u760 00F1C2  
                                      u680 00F008  
                                      u921 00F5AC  
                                      u841 00F384  
                                      u761 00F1BE  
                                      u681 00F004  
                                      u930 00F5A8  
                                      u850 00F39C  
                                      u770 00F1F4  
                                      u690 00F0A8  
                                      u931 00F5AC  
                                      u851 00F398  
                                      u771 00F1F0  
                                      u691 00F0A4  
                                      u940 00F5B4  
                                      u860 00F3FC  
                                      u780 00F212  
                                      u941 00F5B0  
                                      u861 00F3F8  
                                      u781 00F20E  
                                      u950 00F5DA  
                                      u870 00F418  
                                      u790 00F240  
                                      u951 00F5D6  
                                      u871 00F414  
                                      u791 00F23C  
                                      u960 00F64A  
                                      u880 00F462  
                                      u961 00F646  
                                      u881 00F45E  
                                      u970 00F69C  
                                      u890 00F4D0  
                                      u971 00F698  
                                      u891 00F4CC  
                                      u980 00F6D2  
                                      u981 00F6CE  
                                      u990 00F6F4  
                                      u991 00F6F0  
                   _prvAllocateTCBAndStack 00F88C  
                     _uxSchedulerSuspended 00080A  
                          _vListInitialise 00C6C8  
                        _vTaskEndScheduler 00EEEE  
                        _pxDelayedTaskList 000802  
                             _pxCurrentTCB 000800  
                __end_of_xTaskGetTickCount 00F058  
         __end_of_xTaskRemoveFromEventList 00F48C  
                 _xTaskRemoveFromEventList 00F3D0  
                                     u1000 00F712  
                                     u1001 00F70E  
                                     u1010 00F7B0  
                                     u1011 00F7AC  
                                     u1100 00F934  
                                     u1020 00F7E2  
                                     u1101 00F930  
                                     u1021 00F7DE  
                                     u1110 00F9BE  
                                     u1030 00F842  
                                     u1111 00F9BA  
                                     u1031 00F83E  
                                     u1200 00FB44  
                                     u1120 00F9D6  
                                     u1040 00F876  
                                     u1201 00FB40  
                                     u1121 00F9D2  
                                     u1041 00F872  
                                     u1210 00FB92  
                                     u1130 00F9EC  
                                     u1050 00F8B8  
                                     u1211 00FB8E  
                                     u1131 00F9E8  
                                     u1115 00F9B4  
                                     u1051 00F8B4  
                                     u1300 00FE5E  
                                     u1220 00FBB8  
                                     u1140 00FA00  
                                     u1060 00F8C4  
                                     u1301 00FE5A  
                                     u1221 00FBB4  
                                     u1141 00F9FC  
                                     u1061 00F8D6  
                                     u1310 00FE7A  
                                     u1230 00FC3E  
                                     u1150 00FA64  
                                     u1311 00FE76  
                                     u1231 00FC3A  
                                     u1151 00FA60  
                                     u1320 00FEC4  
                                     u1240 00FCAA  
                                     u1160 00FA74  
                                     u1080 00F8F2  
                                     u1321 00FEC0  
                                     u1241 00FCA6  
                                     u1161 00FA70  
                                     u1081 00F8EE  
                                     u1073 00F8CA  
                                     u1330 00FED4  
                                     u1250 00FCFC  
                                     u1170 00FAEA  
                                     u1090 00F910  
                                     u1074 00F8DA  
                                     u1331 00FED0  
                                     u1251 00FCF8  
                                     u1171 00FAE6  
                                     u1155 00FA5A  
                                     u1091 00F90C  
                                     u1340 00FF40  
                                     u1260 00FD18  
                                     u1180 00FB1A  
                                     u1341 00FF3C  
                                     u1261 00FD14  
                                     u1181 00FB16  
                                     u1350 00FF4C  
                                     u1270 00FD52  
                                     u1190 00FB30  
                                     u1351 00FF48  
                                     u1271 00FD4E  
                                     u1191 00FB2C  
                                     u1360 00FF68  
                                     u1280 00FE00  
                                     u1361 00FF64  
                                     u1281 00FDFC  
                                     u1370 00FFB2  
                                     u1290 00FE52  
                                     u1371 00FFAE  
                                     u1291 00FE4E  
                                     u1380 00FFC2  
                                     u1381 00FFBE  
                        _xSchedulerRunning 000812  
                _uxTaskResetEventItemValue 00F95E  
                        _vPortExitCritical 00CA22  
                  __end_of_xTaskNotifyWait 00FC02  
               __end_of_xTaskIncrementTick 00F230  
      __end_of_prvResetNextTaskUnblockTime 00F95E  
              _prvResetNextTaskUnblockTime 00F922  
         __end_of_xTaskGetTickCountFromISR 00F07E  
           __end_of_vTaskNotifyGiveFromISR 00FFDA  
                     _xTaskCheckForTimeOut 00F54A  
                 _xTaskGetTickCountFromISR 00F058  
                       _vTaskSwitchContext 00F230  
                          _vTaskDelayUntil 00E822  
                              _prvIdleTask 00F62C  
                             _pvPortMalloc 00C5F0  
                      __end_of_prvIdleTask 00F664  
                     _vTaskSetTimeOutState 00F534  
        __end_of_prvInitialiseTCBVariables 00F790  
                _pxOverflowDelayedTaskList 000804  
                                    f20010 00E95C  
                                    f20011 00E9DA  
                                    f20020 00E9E4  
                                    f20021 00EBA4  
                                    f20030 00EBAE  
                                    f20031 00EC84  
                                    f20200 00F094  
                                    f20120 00EEF2  
                                    f20016 FFFFFFF8  
                                    f20201 00F22A  
                                    f20121 00EF00  
                                    f20210 00F234  
                                    f20026 FFFFFFF2  
                                    f20211 00F2C4  
                                    f20300 00F630  
                                    f20220 00F2CE  
                                    f20140 00EF08  
                                    f20060 00EC8E  
                                    f20036 FFFFFFFA  
                                    f20301 00F65E  
                                    f20221 00F33E  
                                    f20141 00EF0C  
                                    f20061 00ECFE  
                                    f20206 FFFFFFF4  
                                    f20150 00EF14  
                                    f20070 00ED08  
                                    f20151 00F02C  
                                    f20071 00EDBE  
                                    f20240 00F348  
                                    f20216 FFFFFFFC  
                                    f20080 00EDC8  
                                    f20241 00F3CA  
                                    f20081 00EE84  
                                    f20330 00F668  
                                    f20306 FFFFFFFC  
                                    f20250 00F3D4  
                                    f20226 FFFFFFF8  
                                    f20170 00F036  
                                    f20090 00EE8E  
                                    f20066 FFFFFFF8  
                                    f20331 00F78A  
                                    f20251 00F486  
                                    f20171 00F052  
                                    f20091 00EEE8  
                                    f20420 00F926  
                                    f20260 00F490  
                                    f20180 00F05C  
                                    f20156 FFFFFFFA  
                                    f20076 FFFFFFFA  
                                    f20421 00F958  
                                    f20261 00F52E  
                                    f20181 00F078  
                                    f20430 00F962  
                                    f20350 00F794  
                                    f20270 00F538  
                                    f20246 FFFFFFF6  
                                    f20190 00F082  
                                    f20086 FFFFFFF6  
                                    f20431 00F98A  
                                    f20351 00F80E  
                                    f20271 00F546  
                                    f20191 00F08C  
                                    f20440 00F994  
                                    f20336 FFFFFFF4  
                                    f20280 00F54E  
                                    f20256 FFFFFFF8  
                                    f20176 FFFFFFFC  
                                    f20096 FFFFFFFC  
                                    f20441 00FAB4  
                                    f20281 00F618  
                                    f20450 00FABE  
                                    f20426 FFFFFFFC  
                                    f20370 00F818  
                                    f20290 00F622  
                                    f20266 FFFFFFF6  
                                    f20186 FFFFFFFA  
                                    f20451 00FBFC  
                                    f20371 00F81A  
                                    f20291 00F628  
                                    f20460 00FC06  
                                    f20436 FFFFFFFC  
                                    f20380 00F822  
                                    f20356 FFFFFFFC  
                                    f20461 00FD6E  
                                    f20381 00F886  
                                    f20470 00FD78  
                                    f20446 FFFFFFF4  
                                    f20390 00F890  
                                    f20286 FFFFFFF6  
                                    f20471 00FEEE  
                                    f20391 00F91C  
                                    f20480 00FEF8  
                                    f20456 FFFFFFEE  
                                    f20481 00FFD4  
                                    f20466 FFFFFFEE  
                                    f20386 FFFFFFFC  
                                    f20476 FFFFFFEC  
                                    f20396 FFFFFFF8  
                                    f20486 FFFFFFF4  
                                    f19870 00E674  
                                    f19871 00E81C  
                                    f19960 00E826  
                                    f19961 00E952  
                                    f19873 FFFFFFEC  
                                    f19876 FFFFFFF0  
                                    f19966 FFFFFFF2  
                       _xTaskGenericCreate 00E670  
                 __end_of_ulTaskNotifyTake 00FABA  
                    _vTaskPlaceOnEventList 00F2CA  
                             _vTaskSuspend 00EBAA  
                   _vTaskNotifyGiveFromISR 00FEF4  
                                    lab710 00E710  
                                    lab711 00E744  
                                    lab800 00EE4C  
                                    lab720 00E7C8  
                                    lab712 00E740  
                                    lab801 00EE74  
                                    lab721 00E808  
                                    lab713 00E740  
                                    lab810 00F028  
                                    lab802 00EE78  
                                    lab730 00E8EE  
                                    lab722 00E808  
                                    lab714 00E77A  
                                    lab811 00F01C  
                                    lab803 00EEE4  
                                    lab731 00E8EE  
                                    lab707 00E810  
                                    lab723 00E804  
                                    lab715 00E77A  
                                    lab900 00F6DA  
                                    lab820 00EFEA  
                                    lab812 00F018  
                                    lab804 00EEE4  
                                    lab740 00E9BE  
                                    lab732 00E8EE  
                                    lab724 00E804  
                                    lab716 00E776  
                                    lab708 00E7C0  
                                    lab901 00F6DA  
                                    lab821 00EFD0  
                                    lab813 00EFB4  
                                    lab805 00EEE0  
                                    lab741 00E9AA  
                                    lab733 00E92C  
                                    lab725 00E808  
                                    lab717 00E776  
                                    lab709 00E710  
                       _xTaskGenericNotify 00FC02  
                                    lab910 00F854  
                                    lab902 00F71E  
                                    lab830 00F074  
                                    lab822 00EFF6  
                                    lab814 00EF3E  
                                    lab806 00EEE0  
                                    lab750 00EAB2  
                                    lab742 00E9AA  
                                    lab726 00E94E  
                                    lab734 00E922  
                                    lab718 00E77A  
                                    lab911 00F882  
                                    lab903 00F71E  
                                    lab831 00F08A  
                                    lab823 00EFE8  
                                    lab815 00EFC0  
                                    lab807 00EEE4  
                                    lab751 00EAAE  
                                    lab743 00E9BE  
                                    lab735 00E922  
                                    lab727 00E8B0  
                                    lab719 00E798  
                                    lab920 00F954  
                                    lab912 00F882  
                                    lab904 00F80A  
                                    lab832 00F226  
                                    lab840 00F10E  
                                    lab824 00EFE8  
                                    lab816 00EF7A  
                                    lab808 00EEFE  
                                    lab760 00EB86  
                                    lab752 00EAAA  
                                    lab744 00E9D6  
                                    lab736 00E92C  
                                    lab728 00E8AC  
                                    lab921 00F986  
                                    lab913 00F882  
                                    lab905 00F7B4  
                                    lab841 00F1CE  
                                    lab833 00F204  
                                    lab825 00EFFA  
                                    lab817 00EFB4  
                                    lab809 00EF0A  
                                    lab761 00EB4E  
                                    lab753 00EAAA  
                                    lab745 00E9D6  
                                    lab737 00E94E  
                                    lab729 00E8AC  
                                    lab922 00FAB0  
                                    lab930 00FA36  
                                    lab914 00F918  
                                    lab906 00F7E2  
                                    lab850 00F200  
                                    lab842 00F150  
                                    lab834 00F0E0  
                                    lab826 00F018  
                                    lab818 00EFB4  
                                    lab770 00EC10  
                                    lab746 00EBA0  
                                    lab762 00EB4E  
                                    lab754 00EAAE  
                                    lab738 00E94E  
                                    lab931 00FA9A  
                                    lab923 00FA36  
                                    lab915 00F900  
                                    lab851 00F206  
                                    lab843 00F150  
                                    lab835 00F0E0  
                                    lab827 00F018  
                                    lab819 00EFFA  
                                    lab771 00EC10  
                                    lab763 00EB6A  
                                    lab755 00EAD0  
                                    lab747 00EA18  
                                    lab739 00E9D6  
                                    lab940 00FB56  
                                    lab932 00FA86  
                                    lab924 00FA32  
                                    lab916 00F900  
                                    lab908 00F818  
                                    lab860 00F2B4  
                                    lab852 00F21E  
                                    lab844 00F174  
                                    lab836 00F1D2  
                                    lab828 00F01C  
                                    lab780 00ECFA  
                                    lab772 00EC64  
                                    lab764 00EB86  
                                    lab756 00EAD0  
                                    lab748 00EA18  
                                    lab941 00FB6E  
                                    lab933 00FA96  
                                    lab925 00F9F0  
                                    lab917 00F910  
                                    lab909 00F882  
                                    lab861 00F33A  
                                    lab853 00F21E  
                                    lab845 00F174  
                                    lab837 00F0F4  
                                    lab829 00F04E  
                                    lab781 00ECF2  
                                    lab773 00EC46  
                                    lab765 00EB9C  
                                    lab757 00EAD0  
                                    lab749 00EB9C  
                                    lab950 00FCCE  
                                    lab942 00FB76  
                                    lab934 00FA9A  
                                    lab926 00F9F0  
                                    lab918 00F954  
                                    lab870 00F3C6  
                                    lab862 00F300  
                                    lab854 00F2C0  
                                    lab846 00F190  
                                    lab838 00F1D2  
                                    lab790 00ED74  
                                    lab782 00ECEE  
                                    lab774 00EC60  
                                    lab766 00EB9C  
                                    lab758 00EB14  
                                    lab951 00FC66  
                                    lab935 00FBF8  
                                    lab943 00FB7A  
                                    lab927 00FA12  
                                    lab919 00F93C  
                                    lab871 00F482  
                                    lab863 00F300  
                                    lab855 00F248  
                                    lab847 00F1CE  
                                    lab791 00EDAE  
                                    lab783 00ECEA  
                                    lab767 00EC80  
                                    lab775 00EC5C  
                                    lab759 00EB14  
                                    lab960 00FD5A  
                                    lab952 00FC7C  
                                    lab944 00FBA4  
                                    lab936 00FB7A  
                                    lab928 00FA2A  
                                    lab880 00F522  
                                    lab872 00F43C  
                                    lab864 00F322  
                                    lab856 00F2C0  
                                    lab848 00F1CE  
                                    lab792 00EDAE  
                                    lab784 00ECEA  
                                    lab776 00EC60  
                                    lab768 00EBF4  
                                    lab961 00FD5A  
                                    lab953 00FC8C  
                                    lab945 00FBC4  
                                    lab937 00FB76  
                                    lab929 00FA32  
                                    lab881 00F544  
                                    lab873 00F420  
                                    lab865 00F33A  
                                    lab857 00F250  
                                    lab849 00F200  
                                    lab793 00EDB2  
                                    lab785 00ECEE  
                                    lab777 00EC80  
                                    lab769 00EBF4  
                                    lab970 00FE10  
                                    lab962 00FD5E  
                                    lab954 00FC9C  
                                    lab946 00FBE4  
                                    lab938 00FB34  
                                    lab890 00F65A  
                                    lab882 00F614  
                                    lab874 00F448  
                                    lab866 00F3C6  
                                    lab858 00F24E  
                                    lab794 00EDBA  
                                    lab786 00ECF2  
                                    lab778 00EC80  
                                    lab963 00FEEA  
                                    lab971 00FE18  
                                    lab947 00FD6A  
                                    lab955 00FCBA  
                                    lab939 00FB34  
                                    lab891 00F636  
                                    lab883 00F584  
                                    lab875 00F472  
                                    lab867 00F38C  
                                    lab859 00F268  
                                    lab795 00EE80  
                                    lab787 00EDBA  
                                    lab779 00EC80  
                                    lab980 00FFD0  
                                    lab972 00FE1C  
                                    lab964 00FE44  
                                    lab956 00FCC2  
                                    lab948 00FC4E  
                                    lab892 00F65A  
                                    lab884 00F608  
                                    lab876 00F47A  
                                    lab868 00F38C  
                                    lab796 00EE78  
                                    lab788 00EDBA  
                                    lab981 00FFD0  
                                    lab973 00FEE2  
                                    lab965 00FE24  
                                    lab957 00FCC6  
                                    lab949 00FCEE  
                                    lab885 00F5C0  
                                    lab877 00F52A  
                                    lab869 00F3AE  
                                    lab797 00EE68  
                                    lab789 00EDB2  
                                    lab982 00FF8C  
                                    lab974 00FE9E  
                                    lab966 00FDBC  
                                    lab958 00FD5E  
                                    lab894 00F652  
                                    lab886 00F608  
                                    lab878 00F4D8  
                                    lab798 00EE28  
                                    lab983 00FF70  
                                    lab975 00FE82  
                                    lab967 00FDD2  
                                    lab959 00FD20  
                                    lab895 00F652  
                                    lab887 00F600  
                                    lab879 00F51A  
                                    lab799 00EE28  
                                    lab984 00FF98  
                                    lab976 00FEAA  
                                    lab968 00FDE2  
                                    lab896 00F780  
                                    lab888 00F608  
                                    lab985 00FFD0  
                                    lab977 00FEE2  
                                    lab969 00FDF2  
                                    lab897 00F6A0  
                                    lab889 00F626  
                                    lab986 00FFCC  
                                    lab978 00FEDE  
                                    lab898 00F6F4  
                                    lab987 00FFD0  
                                    lab979 00FEE2  
                         _vTaskMissedYield 00F61E  
                  __end_of_vTaskSuspendAll 00EF10  
               __end_of_xTaskNotifyFromISR 00FEF4  
               __end_of_xTaskResumeFromISR 00EE8A  
                 __end_of_vTaskPrioritySet 00EBAA  
                     __end_of_vTaskSuspend 00EC8A  
                           _xTaskResumeAll 00EF10  
             __end_of_xTaskCheckForTimeOut 00F61E  
                   _uxCurrentNumberOfTasks 000806  
                                _vPortFree 00C69C  
                     _vApplicationIdleHook 00C5E0  
                      _xPortStartScheduler 00C97A  
           __end_of_prvTaskIsTaskSuspended 00ED04  
             __end_of_vTaskSetTimeOutState 00F54A  
           __end_of_uxTaskGetNumberOfTasks 00F090  
                        _xTaskGetTickCount 00F032  
                        _xPendingReadyList 00082C  
                              _vListInsert 00C75A  
                           _vListInsertEnd 00C70E  
                  __end_of_vTaskDelayUntil 00E958  
           __end_of_prvInitialiseTaskLists 00F814  
                   __end_of_xTaskResumeAll 00F032  
                        _xDelayedTaskList1 000818  
                        _xDelayedTaskList2 000822  
                          _xNumOfOverflows 000810  
                _prvInitialiseTCBVariables 00F664  
                   _prvTaskIsTaskSuspended 00EC8A  
                            _uxPendedTicks 000808  
                       _xTaskIncrementTick 00F090  
                       _xSuspendedTaskList 000836  
                   _uxTaskGetNumberOfTasks 00F07E  
                              _vTaskResume 00ED04  
                      __end_of_vTaskResume 00EDC4  
                        _pxReadyTasksLists 000840  
                       _vPortEnterCritical 00CA10  
__end_of_xTaskRemoveFromUnorderedEventList 00F534  
        _xTaskRemoveFromUnorderedEventList 00F48C  
                         _ulTaskNotifyTake 00F990  
                __end_of_vTaskEndScheduler 00EF04  
                     _xNextTaskUnblockTime 000CAC  
                   _prvInitialiseTaskLists 00F790  
                         _vTaskPrioritySet 00E9E0  
               __end_of_vTaskSwitchContext 00F2CA  
            __end_of_vTaskPlaceOnEventList 00F344  
                               _vTaskDelay 00E958  
                       __end_of_vTaskDelay 00E9E0  
        __end_of_uxTaskResetEventItemValue 00F990  
                             _uxListRemove 00C81C  
                       _xTaskNotifyFromISR 00FD74  
                      _vListInitialiseItem 00C6FC  
                          _xTaskNotifyWait 00FABA  
                       _xTaskResumeFromISR 00EDC4  
   __end_of_prvAddCurrentTaskToDelayedList 00F88C  
           _prvAddCurrentTaskToDelayedList 00F81E  
                               _xTickCount 000814  
                               _vPortYield 00C410  
               __end_of_xTaskGenericCreate 00E822  
   __end_of_vTaskPlaceOnUnorderedEventList 00F3D0  
           _vTaskPlaceOnUnorderedEventList 00F344  
           __end_of_prvAllocateTCBAndStack 00F922  
                             _uxTaskNumber 00080C  
  __end_of_prvCheckTasksWaitingTermination 00F81E  
          _prvCheckTasksWaitingTermination 00F814  
                    _pxPortInitialiseStack 00C8A4  
               __end_of_xTaskGenericNotify 00FD74  
                      _vTaskStartScheduler 00EE8A  
                            _xYieldPending 000816  
