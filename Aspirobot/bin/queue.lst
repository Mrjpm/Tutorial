

HI-TECH Software dsPIC Macro Assembler V9.62 build 7866                    Page 1
                                                       Tue Jan 05 21:22:06 2016

HI-TECH Software Standard Code Generator build 7866
     1  000000                     opt subtitle "HI-TECH Software Standard Code Gen
                                 erator build 7866"
     2                           
     3  000000                     pcl	equ	46
     4  000000                     pch	equ	48
     5  000000                     sr	equ	66
     6  000000                     carry	equ	0
     7  000000                     zerobit	equ	1
     8                           	global	_xQueueGenericReset
     9                           	signat	_xQueueGenericReset,8250
    10                           	psect	text,class=CODE,delta=2,reloc=4
    11                           	psect	text
    12                           	file	"C:\Microchip\Dev\Aspirobot\FreeRTOS\Sourc
                                 es\queue.c"
    13                           	line	261
    14  00D5EC                     _xQueueGenericReset:
    15  00D5EC  0004D6D2           	goto	f19741
              00000000           
    16  00D5F0                     f19740:
    17                           
    18                           ;queue.c: 260: BaseType_t xQueueGenericReset( Qu
                                 eueHandle_t xQueue, BaseType_t xNewQueue )
    19                           
    20                           ;queue.c: 261: {
    21                           
    22                           ;queue.c: 262: Queue_t * const pxQueue = ( Queue
                                 _t * ) xQueue;
    23                           
    24                           	line	262
    25  00D5F0  002FFF86           	mov.w	#((0+f19746+0)-0),w6
    26  00D5F2  00478306           	add.w	sp,w6,w6
    27  00D5F4  00780B00           	mov.w	w0,[w6]
    28                           ;queue.c: 264: ;
    29                           
    30                           ;queue.c: 266: vPortEnterCritical();
    31                           
    32                           	global	_vPortEnterCritical
    33                           	signat	_vPortEnterCritical,26
    34                           ;_xNewQueue stored from w2
    35                           	line	266
    36  00D5F6  002FFFA6           	mov.w	#((0+f19746+2)-0),w6
    37  00D5F8  00478306           	add.w	sp,w6,w6
    38  00D5FA  00780B02           	mov.w	w2,[w6]
    39                           ;_xQueue stored from w0
    40  00D5FC  002FFFC6           	mov.w	#((0+f19746+4)-0),w6
    41  00D5FE  00478306           	add.w	sp,w6,w6
    42  00D600  00780B00           	mov.w	w0,[w6]
    43  00D602  0002CA10           	call	(_vPortEnterCritical)
              00000000           
    44                           ;queue.c: 267: {
    45                           
    46                           ;queue.c: 268: pxQueue->pcTail = pxQueue->pcHead
                                  + ( pxQueue->uxLength * pxQueue->uxItemSize );
    47                           
    48                           	line	268
    49  00D606  0097BBCF           	mov.w	[sp+((0+f19746+0)-0)],w7
    50  00D608  00780317           	mov.w	[w7],w6
    51  00D60A  0097BBCF           	mov.w	[sp+((0+f19746+0)-0)],w7
    52  00D60C  00B00207           	add.w	#32,w7
    53  00D60E  00780297           	mov.w	[w7],w5
    54  00D610  00780105           	mov.w	w5,w2
    55  00D612  0097BBCF           	mov.w	[sp+((0+f19746+0)-0)],w7
    56  00D614  00B001E7           	add.w	#30,w7
    57  00D616  00780217           	mov.w	[w7],w4
    58  00D618  00B82202           	mul.uu	w4,w2,w4
    59  00D61A  00420206           	add.w	w4,w6,w4
    60  00D61C  002FFF86           	mov.w	#((0+f19746+0)-0),w6
    61  00D61E  00478306           	add.w	sp,w6,w6
    62  00D620  00780396           	mov	[w6],w7
    63  00D622  00980394           	mov.w	w4,[w7+2]
    64                           ;queue.c: 269: pxQueue->uxMessagesWaiting = ( UB
                                 aseType_t ) 0U;
    65                           
    66                           	line	269
    67  00D624  00200006           	mov.w	#0,w6
    68  00D626  002FFF87           	mov.w	#((0+f19746+0)-0),w7
    69  00D628  00478387           	add.w	sp,w7,w7
    70  00D62A  00780297           	mov	[w7],w5
    71  00D62C  00980AE6           	mov.w	w6,[w5+28]
    72                           ;queue.c: 270: pxQueue->pcWriteTo = pxQueue->pcH
                                 ead;
    73                           
    74                           	line	270
    75  00D62E  0097BBCF           	mov.w	[sp+((0+f19746+0)-0)],w7
    76  00D630  00780317           	mov.w	[w7],w6
    77  00D632  002FFF87           	mov.w	#((0+f19746+0)-0),w7
    78  00D634  00478387           	add.w	sp,w7,w7
    79  00D636  00780297           	mov	[w7],w5
    80  00D638  009802A6           	mov.w	w6,[w5+4]
    81                           ;queue.c: 271: pxQueue->u.pcReadFrom = pxQueue->
                                 pcHead + ( ( pxQueue->uxLength - ( UBaseType_t )
                                  1U ) * pxQueue->uxItemSize );
    82                           
    83                           	line	271
    84  00D63A  0097BBCF           	mov.w	[sp+((0+f19746+0)-0)],w7
    85  00D63C  00780317           	mov.w	[w7],w6
    86  00D63E  0097BBCF           	mov.w	[sp+((0+f19746+0)-0)],w7
    87  00D640  00B00207           	add.w	#32,w7
    88  00D642  00780217           	mov.w	[w7],w4
    89  00D644  002FFFF7           	mov.w	#-1,w7
    90  00D646  0097BACF           	mov.w	[sp+((0+f19746+0)-0)],w5
    91  00D648  00B001E5           	add.w	#30,w5
    92  00D64A  00780195           	mov.w	[w5],w3
    93  00D64C  00418187           	add.w	w3,w7,w3
    94  00D64E  00780103           	mov.w	w3,w2
    95  00D650  00B81104           	mul.uu	w2,w4,w2
    96  00D652  00410106           	add.w	w2,w6,w2
    97  00D654  002FFF86           	mov.w	#((0+f19746+0)-0),w6
    98  00D656  00478306           	add.w	sp,w6,w6
    99  00D658  00780396           	mov	[w6],w7
   100  00D65A  009803B2           	mov.w	w2,[w7+6]
   101                           ;queue.c: 272: pxQueue->xRxLock = ( ( BaseType_t
                                  ) -1 );
   102                           
   103                           	line	272
   104  00D65C  002FFFF6           	mov.w	#-1,w6
   105  00D65E  002FFF87           	mov.w	#((0+f19746+0)-0),w7
   106  00D660  00478387           	add.w	sp,w7,w7
   107  00D662  00780297           	mov	[w7],w5
   108  00D664  00981296           	mov.w	w6,[w5+34]
   109                           ;queue.c: 273: pxQueue->xTxLock = ( ( BaseType_t
                                  ) -1 );
   110                           
   111                           	line	273
   112  00D666  002FFFF6           	mov.w	#-1,w6
   113  00D668  002FFF87           	mov.w	#((0+f19746+0)-0),w7
   114  00D66A  00478387           	add.w	sp,w7,w7
   115  00D66C  00780297           	mov	[w7],w5
   116  00D66E  009812A6           	mov.w	w6,[w5+36]
   117                           ;queue.c: 275: if( xNewQueue == ( ( BaseType_t )
                                  0 ) )
   118                           
   119                           	line	275
   120  00D670  002FFFA6           	mov.w	#((0+f19746+2)-0),w6
   121  00D672  00478306           	add.w	sp,w6,w6
   122  00D674  00E00016           	cp0.w	[w6]
   123  00D676  003A0002           	bra	nz,u11
   124  00D678  0004D680           	goto	u10
              00000000           
   125  00D67C                     u11:
   126  00D67C  0004D6B4           	goto	lab710
              00000000           
   127  00D680                     u10:
   128                           ;queue.c: 276: {
   129                           
   130                           ;queue.c: 282: if( ( ( BaseType_t ) ( ( &( pxQue
                                 ue->xTasksWaitingToSend ) )->uxNumberOfItems == 
                                 ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
   131                           
   132                           	line	282
   133  00D680  0097BB4F           	mov.w	[sp+((0+f19746+0)-0)],w6
   134  00D682  00B00086           	add.w	#8,w6
   135  00D684  00E00016           	cp0.w	[w6]
   136  00D686  00320002           	bra	z,u21
   137  00D688  0004D690           	goto	u20
              00000000           
   138  00D68C                     u21:
   139  00D68C  0004D6B0           	goto	lab711
              00000000           
   140  00D690                     u20:
   141                           ;queue.c: 283: {
   142                           
   143                           ;queue.c: 284: if( xTaskRemoveFromEventList( &( 
                                 pxQueue->xTasksWaitingToSend ) ) == ( ( BaseType
                                 _t ) 1 ) )
   144                           
   145                           	global	_xTaskRemoveFromEventList
   146                           	signat	_xTaskRemoveFromEventList,4154
   147                           	line	284
   148  00D690  0097B84F           	mov.w	[sp+((0+f19746+0)-0)],w0
   149  00D692  00B00080           	add.w	#8,w0
   150  00D694  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
   151  00D698  00E10061           	cp.w	w0, #1
   152  00D69A  003A0002           	bra	nz,u31
   153  00D69C  0004D6A4           	goto	u30
              00000000           
   154  00D6A0                     u31:
   155  00D6A0  0004D6AC           	goto	lab712
              00000000           
   156  00D6A4                     u30:
   157                           ;queue.c: 285: {
   158                           
   159                           ;queue.c: 286: vPortYield();
   160                           
   161                           	global	_vPortYield
   162                           	signat	_vPortYield,26
   163                           	line	286
   164  00D6A4  0002C410           	call	(_vPortYield)
              00000000           
   165                           ;queue.c: 287: }
   166                           
   167                           	line	287
   168  00D6A8  0004D6AC           	goto	lab713
              00000000           
   169                           	line	288
   170  00D6AC                     lab712:
   171                           ;queue.c: 288: else
   172                           
   173                           ;queue.c: 289: {
   174                           
   175                           ;queue.c: 290: ;
   176                           
   177                           	line	291
   178  00D6AC                     lab713:
   179                           ;queue.c: 291: }
   180                           
   181                           ;queue.c: 292: }
   182                           
   183                           	line	292
   184  00D6AC  0004D6B0           	goto	lab714
              00000000           
   185                           	line	293
   186  00D6B0                     lab711:
   187                           ;queue.c: 293: else
   188                           
   189                           ;queue.c: 294: {
   190                           
   191                           ;queue.c: 295: ;
   192                           
   193                           	line	296
   194  00D6B0                     lab714:
   195                           ;queue.c: 296: }
   196                           
   197                           ;queue.c: 297: }
   198                           
   199                           	line	297
   200  00D6B0  0004D6C4           	goto	lab715
              00000000           
   201                           	line	298
   202  00D6B4                     lab710:
   203                           ;queue.c: 298: else
   204                           
   205                           ;queue.c: 299: {
   206                           
   207                           ;queue.c: 301: vListInitialise( &( pxQueue->xTas
                                 ksWaitingToSend ) );
   208                           
   209                           	global	_vListInitialise
   210                           	signat	_vListInitialise,4154
   211                           	line	301
   212  00D6B4  0097B84F           	mov.w	[sp+((0+f19746+0)-0)],w0
   213  00D6B6  00B00080           	add.w	#8,w0
   214  00D6B8  0002C6C8           	call	(_vListInitialise)	;0 bytes adjustment
              00000000           
   215                           ;queue.c: 302: vListInitialise( &( pxQueue->xTas
                                 ksWaitingToReceive ) );
   216                           
   217                           	line	302
   218  00D6BC  0097B84F           	mov.w	[sp+((0+f19746+0)-0)],w0
   219  00D6BE  00B00120           	add.w	#18,w0
   220  00D6C0  0002C6C8           	call	(_vListInitialise)	;0 bytes adjustment
              00000000           
   221                           	line	303
   222  00D6C4                     lab715:
   223                           ;queue.c: 303: }
   224                           
   225                           ;queue.c: 304: }
   226                           
   227                           ;queue.c: 305: vPortExitCritical();
   228                           
   229                           	global	_vPortExitCritical
   230                           	signat	_vPortExitCritical,26
   231                           	line	305
   232  00D6C4  0002CA22           	call	(_vPortExitCritical)
              00000000           
   233                           ;queue.c: 309: return ( ( ( BaseType_t ) 1 ) );
   234                           
   235                           	line	309
   236  00D6C8  00200010           	mov.w	#1,w0	;return #1 in w0
   237  00D6CA  0004D6CE           	goto	lab709
              00000000           
   238                           ;queue.c: 310: }
   239                           
   240                           	line	310
   241  00D6CE                     lab709:
   242                           	global	_xQueueGenericReset
   243                           
   244  00D6CE  00B1008F           	sub.w	#8,sp
   245  00D6D0  00060000           	return
   246                           	line	261
   247                           
   248  00D6D2                     f19741:
   249                           
   250  00D6D2  00B0008F           	add.w	#8,sp
   251  00D6D4  0004D5F0           	goto	f19740
              00000000           
   252  000000                     f19746	equ	-8		;stack offset for auto's
   253  000000                     f19743	equ	-12		;stack offset for parameters
   254                           	line	0
   255                           	global	 __end_of_xQueueGenericReset
   256  00D6D8                     __end_of_xQueueGenericReset:
   257                           	global	_xQueueGenericCreate
   258                           	signat	_xQueueGenericCreate,12346
   259                           	line	314
   260  00D6D8                     _xQueueGenericCreate:
   261  00D6D8  0004D7B4           	goto	f19801
              00000000           
   262  00D6DC                     f19800:
   263                           
   264                           ;queue.c: 313: QueueHandle_t xQueueGenericCreate
                                 ( const UBaseType_t uxQueueLength, const UBaseTy
                                 pe_t uxItemSize, const uint8_t ucQueueType )
   265                           
   266                           ;queue.c: 314: {
   267                           
   268                           ;queue.c: 315: Queue_t *pxNewQueue;
   269                           
   270                           ;queue.c: 316: size_t xQueueSizeInBytes;
   271                           
   272                           ;queue.c: 317: QueueHandle_t xReturn = (0);
   273                           
   274                           	line	317
   275  00D6DC  00200007           	mov.w	#0,w7
   276  00D6DE  002FFF46           	mov.w	#((0+f19806+4)-0),w6
   277  00D6E0  00478306           	add.w	sp,w6,w6
   278  00D6E2  00780B07           	mov.w	w7,[w6]
   279                           ;queue.c: 318: int8_t *pcAllocatedBuffer;
   280                           
   281                           ;queue.c: 322: ( void ) ucQueueType;
   282                           
   283                           ;queue.c: 324: ;
   284                           
   285                           ;queue.c: 326: if( uxItemSize == ( UBaseType_t )
                                  0 )
   286                           
   287                           ;_ucQueueType stored from w4
   288                           	line	326
   289  00D6E4  002FFF86           	mov.w	#((0+f19806+8)-0),w6
   290  00D6E6  00478306           	add.w	sp,w6,w6
   291  00D6E8  00784B04           	mov.b	w4,[w6]
   292                           ;_uxItemSize stored from w2
   293  00D6EA  002FFFA6           	mov.w	#((0+f19806+10)-0),w6
   294  00D6EC  00478306           	add.w	sp,w6,w6
   295  00D6EE  00780B02           	mov.w	w2,[w6]
   296                           ;_uxQueueLength stored from w0
   297  00D6F0  002FFFC6           	mov.w	#((0+f19806+12)-0),w6
   298  00D6F2  00478306           	add.w	sp,w6,w6
   299  00D6F4  00780B00           	mov.w	w0,[w6]
   300  00D6F6  002FFFA6           	mov.w	#((0+f19806+10)-0),w6
   301  00D6F8  00478306           	add.w	sp,w6,w6
   302  00D6FA  00E00016           	cp0.w	[w6]
   303  00D6FC  003A0002           	bra	nz,u41
   304  00D6FE  0004D706           	goto	u40
              00000000           
   305  00D702                     u41:
   306  00D702  0004D712           	goto	lab717
              00000000           
   307  00D706                     u40:
   308                           ;queue.c: 327: {
   309                           
   310                           ;queue.c: 329: xQueueSizeInBytes = ( size_t ) 0;
   311                           
   312                           	line	329
   313  00D706  00200007           	mov.w	#0,w7
   314  00D708  002FFF26           	mov.w	#((0+f19806+2)-0),w6
   315  00D70A  00478306           	add.w	sp,w6,w6
   316  00D70C  00780B07           	mov.w	w7,[w6]
   317                           ;queue.c: 330: }
   318                           
   319                           	line	330
   320  00D70E  0004D728           	goto	lab718
              00000000           
   321                           	line	331
   322  00D712                     lab717:
   323                           ;queue.c: 331: else
   324                           
   325                           ;queue.c: 332: {
   326                           
   327                           ;queue.c: 335: xQueueSizeInBytes = ( size_t ) ( 
                                 uxQueueLength * uxItemSize ) + ( size_t ) 1;
   328                           
   329                           	line	335
   330  00D712  002FFFC6           	mov.w	#((0+f19806+12)-0),w6
   331  00D714  00478306           	add.w	sp,w6,w6
   332  00D716  00780216           	mov.w	[w6],w4
   333  00D718  002FFFA6           	mov.w	#((0+f19806+10)-0),w6
   334  00D71A  00478306           	add.w	sp,w6,w6
   335  00D71C  00780316           	mov.w	[w6],w6
   336  00D71E  00B82206           	mul.uu	w4,w6,w4
   337  00D720  00B00014           	add.w	#1,w4
   338  00D722  002FFF26           	mov.w	#((0+f19806+2)-0),w6
   339  00D724  00478306           	add.w	sp,w6,w6
   340  00D726  00780B04           	mov.w	w4,[w6]
   341                           	line	336
   342  00D728                     lab718:
   343                           ;queue.c: 336: }
   344                           
   345                           ;queue.c: 339: pcAllocatedBuffer = ( int8_t * ) 
                                 pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBy
                                 tes );
   346                           
   347                           	global	_pvPortMalloc
   348                           	signat	_pvPortMalloc,4154
   349                           	line	339
   350  00D728  0097B81F           	mov.w	[sp+((0+f19806+2)-0)],w0
   351  00D72A  00B00260           	add.w	#38,w0
   352  00D72C  0002C5F0           	call	(_pvPortMalloc)	;0 bytes adjustment
              00000000           
   353  00D730  002FFF66           	mov.w	#((0+f19806+6)-0),w6
   354  00D732  00478306           	add.w	sp,w6,w6
   355  00D734  00780B00           	mov.w	w0,[w6]
   356                           ;queue.c: 341: if( pcAllocatedBuffer != (0) )
   357                           
   358                           	line	341
   359  00D736  002FFF66           	mov.w	#((0+f19806+6)-0),w6
   360  00D738  00478306           	add.w	sp,w6,w6
   361  00D73A  00E00016           	cp0.w	[w6]
   362  00D73C  00320002           	bra	z,u51
   363  00D73E  0004D746           	goto	u50
              00000000           
   364  00D742                     u51:
   365  00D742  0004D7A8           	goto	lab719
              00000000           
   366  00D746                     u50:
   367                           ;queue.c: 342: {
   368                           
   369                           ;queue.c: 343: pxNewQueue = ( Queue_t * ) pcAllo
                                 catedBuffer;
   370                           
   371                           	line	343
   372  00D746  0097BBBF           	mov.w	[sp+((0+f19806+6)-0)], w7
   373  00D748  002FFF06           	mov.w	#((0+f19806+0)-0),w6
   374  00D74A  00478306           	add.w	sp,w6,w6
   375  00D74C  00780B07           	mov.w	w7,[w6]
   376                           ;queue.c: 345: if( uxItemSize == ( UBaseType_t )
                                  0 )
   377                           
   378                           	line	345
   379  00D74E  002FFFA6           	mov.w	#((0+f19806+10)-0),w6
   380  00D750  00478306           	add.w	sp,w6,w6
   381  00D752  00E00016           	cp0.w	[w6]
   382  00D754  003A0002           	bra	nz,u61
   383  00D756  0004D75E           	goto	u60
              00000000           
   384  00D75A                     u61:
   385  00D75A  0004D76C           	goto	lab720
              00000000           
   386  00D75E                     u60:
   387                           ;queue.c: 346: {
   388                           
   389                           ;queue.c: 351: pxNewQueue->pcHead = ( int8_t * )
                                  pxNewQueue;
   390                           
   391                           	line	351
   392  00D75E  0097BB0F           	mov.w	[sp+((0+f19806+0)-0)], w6
   393  00D760  002FFF07           	mov.w	#((0+f19806+0)-0),w7
   394  00D762  00478387           	add.w	sp,w7,w7
   395  00D764  00780397           	mov.w	[w7],w7
   396  00D766  00780B86           	mov.w	w6,[w7]
   397                           ;queue.c: 352: }
   398                           
   399                           	line	352
   400  00D768  0004D778           	goto	lab721
              00000000           
   401                           	line	353
   402  00D76C                     lab720:
   403                           ;queue.c: 353: else
   404                           
   405                           ;queue.c: 354: {
   406                           
   407                           ;queue.c: 357: pxNewQueue->pcHead = pcAllocatedB
                                 uffer + sizeof( Queue_t );
   408                           
   409                           	line	357
   410  00D76C  0097BBBF           	mov.w	[sp+((0+f19806+6)-0)],w7
   411  00D76E  00B00267           	add.w	#38,w7
   412  00D770  002FFF06           	mov.w	#((0+f19806+0)-0),w6
   413  00D772  00478306           	add.w	sp,w6,w6
   414  00D774  00780316           	mov.w	[w6],w6
   415  00D776  00780B07           	mov.w	w7,[w6]
   416                           	line	358
   417  00D778                     lab721:
   418                           ;queue.c: 358: }
   419                           
   420                           ;queue.c: 362: pxNewQueue->uxLength = uxQueueLen
                                 gth;
   421                           
   422                           	line	362
   423  00D778  002FFFC6           	mov.w	#((0+f19806+12)-0),w6
   424  00D77A  00478306           	add.w	sp,w6,w6
   425  00D77C  00780316           	mov.w	[w6],w6
   426  00D77E  002FFF07           	mov.w	#((0+f19806+0)-0),w7
   427  00D780  00478387           	add.w	sp,w7,w7
   428  00D782  00780297           	mov	[w7],w5
   429  00D784  00980AF6           	mov.w	w6,[w5+30]
   430                           ;queue.c: 363: pxNewQueue->uxItemSize = uxItemSi
                                 ze;
   431                           
   432                           	line	363
   433  00D786  002FFFA6           	mov.w	#((0+f19806+10)-0),w6
   434  00D788  00478306           	add.w	sp,w6,w6
   435  00D78A  00780316           	mov.w	[w6],w6
   436  00D78C  002FFF07           	mov.w	#((0+f19806+0)-0),w7
   437  00D78E  00478387           	add.w	sp,w7,w7
   438  00D790  00780297           	mov	[w7],w5
   439  00D792  00981286           	mov.w	w6,[w5+32]
   440                           ;queue.c: 364: ( void ) xQueueGenericReset( pxNe
                                 wQueue, ( ( BaseType_t ) 1 ) );
   441                           
   442                           	line	364
   443  00D794  00200012           	mov.w	#01h,w2
   444  00D796  0097B80F           	mov.w	[sp+((0+f19806+0)-0)],w0
   445  00D798  0002D5EC           	call	(_xQueueGenericReset)	;0 bytes adjustment
              00000000           
   446                           ;queue.c: 378: ;
   447                           
   448                           ;queue.c: 379: xReturn = pxNewQueue;
   449                           
   450                           	line	379
   451  00D79C  0097BB8F           	mov.w	[sp+((0+f19806+0)-0)], w7
   452  00D79E  002FFF46           	mov.w	#((0+f19806+4)-0),w6
   453  00D7A0  00478306           	add.w	sp,w6,w6
   454  00D7A2  00780B07           	mov.w	w7,[w6]
   455                           ;queue.c: 380: }
   456                           
   457                           	line	380
   458  00D7A4  0004D7A8           	goto	lab722
              00000000           
   459                           	line	381
   460  00D7A8                     lab719:
   461                           ;queue.c: 381: else
   462                           
   463                           ;queue.c: 382: {
   464                           
   465                           ;queue.c: 383: ;
   466                           
   467                           	line	384
   468  00D7A8                     lab722:
   469                           ;queue.c: 384: }
   470                           
   471                           ;queue.c: 386: ;
   472                           
   473                           ;queue.c: 388: return xReturn;
   474                           
   475                           	line	388
   476  00D7A8  0097B82F           	mov.w	[sp+((0+f19806+4)-0)], w0
   477  00D7AA  00780000           	mov.w	w0,w0
   478  00D7AC  0004D7B0           	goto	lab716
              00000000           
   479                           ;queue.c: 389: }
   480                           
   481                           	line	389
   482  00D7B0                     lab716:
   483                           	global	_xQueueGenericCreate
   484                           
   485  00D7B0  00B1010F           	sub.w	#16,sp
   486  00D7B2  00060000           	return
   487                           	line	314
   488                           
   489  00D7B4                     f19801:
   490                           
   491  00D7B4  00B0010F           	add.w	#16,sp
   492  00D7B6  0004D6DC           	goto	f19800
              00000000           
   493  000000                     f19806	equ	-16		;stack offset for auto's
   494  000000                     f19803	equ	-20		;stack offset for parameters
   495                           	line	0
   496                           	global	 __end_of_xQueueGenericCreate
   497  00D7BA                     __end_of_xQueueGenericCreate:
   498                           	global	_xQueueGenericSend
   499                           	signat	_xQueueGenericSend,16442
   500                           	line	614
   501  00D7BA                     _xQueueGenericSend:
   502  00D7BA  0004D97E           	goto	f19821
              00000000           
   503  00D7BE                     f19820:
   504                           
   505                           ;queue.c: 613: BaseType_t xQueueGenericSend( Que
                                 ueHandle_t xQueue, const void * const pvItemToQu
                                 eue, TickType_t xTicksToWait, const BaseType_t x
                                 CopyPosition )
   506                           
   507                           ;queue.c: 614: {
   508                           
   509                           ;queue.c: 615: BaseType_t xEntryTimeSet = ( ( Ba
                                 seType_t ) 0 ), xYieldRequired;
   510                           
   511                           	line	615
   512  00D7BE  00200005           	mov.w	#0,w5
   513  00D7C0  002FFEC7           	mov.w	#((0+f19826+0)-0),w7
   514  00D7C2  00478387           	add.w	sp,w7,w7
   515  00D7C4  00780B85           	mov.w	w5,[w7]
   516                           ;queue.c: 616: TimeOut_t xTimeOut;
   517                           
   518                           ;queue.c: 617: Queue_t * const pxQueue = ( Queue
                                 _t * ) xQueue;
   519                           
   520                           	line	617
   521  00D7C6  002FFF47           	mov.w	#((0+f19826+8)-0),w7
   522  00D7C8  00478387           	add.w	sp,w7,w7
   523  00D7CA  00780B80           	mov.w	w0,[w7]
   524                           ;queue.c: 619: ;
   525                           
   526                           ;queue.c: 620: ;
   527                           
   528                           ;queue.c: 621: ;
   529                           
   530                           ;queue.c: 632: for( ;; )
   531                           
   532                           ;_xCopyPosition stored from w6
   533                           	line	633
   534  00D7CC  002FFF67           	mov.w	#((0+f19826+10)-0),w7
   535  00D7CE  00478387           	add.w	sp,w7,w7
   536  00D7D0  00780B86           	mov.w	w6,[w7]
   537                           ;_xTicksToWait stored from w4
   538  00D7D2  002FFF86           	mov.w	#((0+f19826+12)-0),w6
   539  00D7D4  00478306           	add.w	sp,w6,w6
   540  00D7D6  00780B04           	mov.w	w4,[w6]
   541                           ;_pvItemToQueue stored from w2
   542  00D7D8  002FFFA6           	mov.w	#((0+f19826+14)-0),w6
   543  00D7DA  00478306           	add.w	sp,w6,w6
   544  00D7DC  00780B02           	mov.w	w2,[w6]
   545                           ;_xQueue stored from w0
   546  00D7DE  002FFFC6           	mov.w	#((0+f19826+16)-0),w6
   547+ 00D7E0  00478306           	add.w	sp,w6,w6
   548  00D7E2  00780B00           	mov.w	w0,[w6]
   549  00D7E4                     lab724:
   550                           ;queue.c: 633: {
   551                           
   552                           ;queue.c: 634: vPortEnterCritical();
   553                           
   554                           	line	634
   555  00D7E4  0002CA10           	call	(_vPortEnterCritical)
              00000000           
   556                           ;queue.c: 635: {
   557                           
   558                           ;queue.c: 640: if( ( pxQueue->uxMessagesWaiting 
                                 < pxQueue->uxLength ) || ( xCopyPosition == ( ( 
                                 BaseType_t ) 2 ) ) )
   559                           
   560                           	line	640
   561  00D7E8  0097BB2F           	mov.w	[sp+((0+f19826+8)-0)],w6
   562  00D7EA  00B001E6           	add.w	#30,w6
   563  00D7EC  00780396           	mov.w	[w6],w7
   564  00D7EE  0097BAAF           	mov.w	[sp+((0+f19826+8)-0)],w5
   565  00D7F0  00B001C5           	add.w	#28,w5
   566  00D7F2  00780315           	mov.w	[w5],w6
   567  00D7F4  00E13007           	cp.w	w6, w7
   568  00D7F6  00310002           	bra	geu,u71
   569  00D7F8  0004D806           	goto	u70
              00000000           
   570  00D7FC                     u71:
   571  00D7FC  0097BB3F           	mov.w	[sp+((0+f19826+10)-0)],w6
   572  00D7FE  00E13062           	cp.w	w6, #2
   573  00D800  003A0004           	bra	nz,u81
   574  00D802  0004D806           	goto	u80
              00000000           
   575  00D806                     u70:
   576  00D806                     u80:
   577  00D806  0004D812           	goto	u90
              00000000           
   578  00D80A                     u81:
   579  00D80A  0004D80E           	goto	u91
              00000000           
   580  00D80E                     u91:
   581  00D80E  0004D878           	goto	lab727
              00000000           
   582  00D812                     u90:
   583                           ;queue.c: 641: {
   584                           
   585                           ;queue.c: 642: ;
   586                           
   587                           ;queue.c: 643: xYieldRequired = prvCopyDataToQue
                                 ue( pxQueue, pvItemToQueue, xCopyPosition );
   588                           
   589                           	signat	_prvCopyDataToQueue,12346
   590                           	line	643
   591  00D812  0097BA3F           	mov.w	[sp+((0+f19826+10)-0)],w4
   592  00D814  0097B95F           	mov.w	[sp+((0+f19826+14)-0)],w2
   593  00D816  0097B82F           	mov.w	[sp+((0+f19826+8)-0)],w0
   594  00D818  0002DF20           	call	(_prvCopyDataToQueue)	;0 bytes adjustment
              00000000           
   595  00D81C  002FFEE6           	mov.w	#((0+f19826+2)-0),w6
   596  00D81E  00478306           	add.w	sp,w6,w6
   597  00D820  00780B00           	mov.w	w0,[w6]
   598                           ;queue.c: 695: {
   599                           
   600                           ;queue.c: 698: if( ( ( BaseType_t ) ( ( &( pxQue
                                 ue->xTasksWaitingToReceive ) )->uxNumberOfItems 
                                 == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 )
                                  )
   601                           
   602                           	line	698
   603  00D822  0097BB2F           	mov.w	[sp+((0+f19826+8)-0)],w6
   604  00D824  00B00126           	add.w	#18,w6
   605  00D826  00E00016           	cp0.w	[w6]
   606  00D828  00320002           	bra	z,u101
   607  00D82A  0004D832           	goto	u100
              00000000           
   608  00D82E                     u101:
   609  00D82E  0004D852           	goto	lab728
              00000000           
   610  00D832                     u100:
   611                           ;queue.c: 699: {
   612                           
   613                           ;queue.c: 700: if( xTaskRemoveFromEventList( &( 
                                 pxQueue->xTasksWaitingToReceive ) ) == ( ( BaseT
                                 ype_t ) 1 ) )
   614                           
   615                           	line	700
   616  00D832  0097B82F           	mov.w	[sp+((0+f19826+8)-0)],w0
   617  00D834  00B00120           	add.w	#18,w0
   618  00D836  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
   619  00D83A  00E10061           	cp.w	w0, #1
   620  00D83C  003A0002           	bra	nz,u111
   621  00D83E  0004D846           	goto	u110
              00000000           
   622  00D842                     u111:
   623  00D842  0004D84E           	goto	lab729
              00000000           
   624  00D846                     u110:
   625                           ;queue.c: 701: {
   626                           
   627                           ;queue.c: 706: vPortYield();
   628                           
   629                           	line	706
   630  00D846  0002C410           	call	(_vPortYield)
              00000000           
   631                           ;queue.c: 707: }
   632                           
   633                           	line	707
   634  00D84A  0004D84E           	goto	lab730
              00000000           
   635                           	line	708
   636  00D84E                     lab729:
   637                           ;queue.c: 708: else
   638                           
   639                           ;queue.c: 709: {
   640                           
   641                           ;queue.c: 710: ;
   642                           
   643                           	line	711
   644  00D84E                     lab730:
   645                           ;queue.c: 711: }
   646                           
   647                           ;queue.c: 712: }
   648                           
   649                           	line	712
   650  00D84E  0004D86A           	goto	lab731
              00000000           
   651                           	line	713
   652  00D852                     lab728:
   653                           ;queue.c: 713: else if( xYieldRequired != ( ( Ba
                                 seType_t ) 0 ) )
   654                           
   655  00D852  002FFEE6           	mov.w	#((0+f19826+2)-0),w6
   656  00D854  00478306           	add.w	sp,w6,w6
   657  00D856  00E00016           	cp0.w	[w6]
   658  00D858  00320002           	bra	z,u121
   659  00D85A  0004D862           	goto	u120
              00000000           
   660  00D85E                     u121:
   661  00D85E  0004D86A           	goto	lab732
              00000000           
   662  00D862                     u120:
   663                           ;queue.c: 714: {
   664                           
   665                           ;queue.c: 719: vPortYield();
   666                           
   667                           	line	719
   668  00D862  0002C410           	call	(_vPortYield)
              00000000           
   669                           ;queue.c: 720: }
   670                           
   671                           	line	720
   672  00D866  0004D86A           	goto	lab733
              00000000           
   673                           	line	721
   674  00D86A                     lab732:
   675                           ;queue.c: 721: else
   676                           
   677                           ;queue.c: 722: {
   678                           
   679                           ;queue.c: 723: ;
   680                           
   681                           	line	724
   682  00D86A                     lab733:
   683  00D86A                     lab731:
   684                           ;queue.c: 724: }
   685                           
   686                           ;queue.c: 725: }
   687                           
   688                           ;queue.c: 728: vPortExitCritical();
   689                           
   690                           	line	728
   691  00D86A  0002CA22           	call	(_vPortExitCritical)
              00000000           
   692                           ;queue.c: 729: return ( ( ( BaseType_t ) 1 ) );
   693                           
   694                           	line	729
   695  00D86E  00200010           	mov.w	#1,w0	;return #1 in w0
   696  00D870  0004D97A           	goto	lab723
              00000000           
   697                           ;queue.c: 730: }
   698                           
   699                           	line	730
   700  00D874  0004D8BA           	goto	lab734
              00000000           
   701                           	line	731
   702  00D878                     lab727:
   703                           ;queue.c: 731: else
   704                           
   705                           ;queue.c: 732: {
   706                           
   707                           ;queue.c: 733: if( xTicksToWait == ( TickType_t 
                                 ) 0 )
   708                           
   709                           	line	733
   710  00D878  002FFF86           	mov.w	#((0+f19826+12)-0),w6
   711  00D87A  00478306           	add.w	sp,w6,w6
   712  00D87C  00E00016           	cp0.w	[w6]
   713  00D87E  003A0002           	bra	nz,u131
   714  00D880  0004D888           	goto	u130
              00000000           
   715  00D884                     u131:
   716  00D884  0004D896           	goto	lab735
              00000000           
   717  00D888                     u130:
   718                           ;queue.c: 734: {
   719                           
   720                           ;queue.c: 737: vPortExitCritical();
   721                           
   722                           	line	737
   723  00D888  0002CA22           	call	(_vPortExitCritical)
              00000000           
   724                           ;queue.c: 741: ;
   725                           
   726                           ;queue.c: 742: return ( ( BaseType_t ) 0 );
   727                           
   728                           	line	742
   729  00D88C  00200000           	mov.w	#0,w0	;return #0 in w0
   730  00D88E  0004D97A           	goto	lab723
              00000000           
   731                           ;queue.c: 743: }
   732                           
   733                           	line	743
   734  00D892  0004D8BA           	goto	lab736
              00000000           
   735                           	line	744
   736  00D896                     lab735:
   737                           ;queue.c: 744: else if( xEntryTimeSet == ( ( Bas
                                 eType_t ) 0 ) )
   738                           
   739  00D896  002FFEC6           	mov.w	#((0+f19826+0)-0),w6
   740  00D898  00478306           	add.w	sp,w6,w6
   741  00D89A  00E00016           	cp0.w	[w6]
   742  00D89C  003A0002           	bra	nz,u141
   743  00D89E  0004D8A6           	goto	u140
              00000000           
   744  00D8A2                     u141:
   745  00D8A2  0004D8BA           	goto	lab737
              00000000           
   746  00D8A6                     u140:
   747                           ;queue.c: 745: {
   748                           
   749                           ;queue.c: 748: vTaskSetTimeOutState( &xTimeOut )
                                 ;
   750                           
   751                           	global	_vTaskSetTimeOutState
   752                           	signat	_vTaskSetTimeOutState,4154
   753                           	line	748
   754  00D8A6  002FFF00           	mov.w	#(0+f19826+4)-0,w0
   755  00D8A8  00478000           	add.w	sp,w0,w0
   756  00D8AA  0002F534           	call	(_vTaskSetTimeOutState)	;0 bytes adjustmen
              00000000           t
   757                           ;queue.c: 749: xEntryTimeSet = ( ( BaseType_t ) 
                                 1 );
   758                           
   759                           	line	749
   760  00D8AE  00200017           	mov.w	#01h,w7
   761  00D8B0  002FFEC6           	mov.w	#((0+f19826+0)-0),w6
   762  00D8B2  00478306           	add.w	sp,w6,w6
   763  00D8B4  00780B07           	mov.w	w7,[w6]
   764                           ;queue.c: 750: }
   765                           
   766                           	line	750
   767  00D8B6  0004D8BA           	goto	lab738
              00000000           
   768                           	line	751
   769  00D8BA                     lab737:
   770                           ;queue.c: 751: else
   771                           
   772                           ;queue.c: 752: {
   773                           
   774                           ;queue.c: 754: ;
   775                           
   776                           	line	755
   777  00D8BA                     lab738:
   778  00D8BA                     lab736:
   779                           	line	756
   780  00D8BA                     lab734:
   781                           ;queue.c: 755: }
   782                           
   783                           ;queue.c: 756: }
   784                           
   785                           ;queue.c: 757: }
   786                           
   787                           ;queue.c: 758: vPortExitCritical();
   788                           
   789                           	line	758
   790  00D8BA  0002CA22           	call	(_vPortExitCritical)
              00000000           
   791                           ;queue.c: 763: vTaskSuspendAll();
   792                           
   793                           	global	_vTaskSuspendAll
   794                           	signat	_vTaskSuspendAll,26
   795                           	line	763
   796  00D8BE  0002EF04           	call	(_vTaskSuspendAll)
              00000000           
   797                           ;queue.c: 764: vPortEnterCritical(); { if( ( pxQ
                                 ueue )->xRxLock == ( ( BaseType_t ) -1 ) ) { ( p
                                 xQueue )->xRxLock = ( ( BaseType_t ) 0 ); } if( 
                                 ( pxQueue )->xTxLock == ( ( BaseType_t ) -1 ) ) 
                                 { ( pxQueue )->xTxLock = ( ( BaseType_t ) 0 ); }
                                  } vPortExi...
   798                           
   799                           	line	764
   800  00D8C2  0002CA10           	call	(_vPortEnterCritical)
              00000000           
   801  00D8C6  002FFFF6           	mov.w	#-1,w6
   802  00D8C8  0097BBAF           	mov.w	[sp+((0+f19826+8)-0)],w7
   803  00D8CA  00B00227           	add.w	#34,w7
   804  00D8CC  00780297           	mov.w	[w7],w5
   805  00D8CE  00E12806           	cp.w	w5, w6
   806  00D8D0  003A0002           	bra	nz,u151
   807  00D8D2  0004D8DA           	goto	u150
              00000000           
   808  00D8D6                     u151:
   809  00D8D6  0004D8E4           	goto	lab739
              00000000           
   810  00D8DA                     u150:
   811  00D8DA  00200006           	mov.w	#0,w6
   812  00D8DC  002FFF47           	mov.w	#((0+f19826+8)-0),w7
   813  00D8DE  00478387           	add.w	sp,w7,w7
   814  00D8E0  00780297           	mov	[w7],w5
   815  00D8E2  00981296           	mov.w	w6,[w5+34]
   816  00D8E4                     lab739:
   817  00D8E4  002FFFF6           	mov.w	#-1,w6
   818  00D8E6  0097BBAF           	mov.w	[sp+((0+f19826+8)-0)],w7
   819  00D8E8  00B00247           	add.w	#36,w7
   820  00D8EA  00780297           	mov.w	[w7],w5
   821  00D8EC  00E12806           	cp.w	w5, w6
   822  00D8EE  003A0002           	bra	nz,u161
   823  00D8F0  0004D8F8           	goto	u160
              00000000           
   824  00D8F4                     u161:
   825  00D8F4  0004D902           	goto	lab740
              00000000           
   826  00D8F8                     u160:
   827  00D8F8  00200006           	mov.w	#0,w6
   828  00D8FA  002FFF47           	mov.w	#((0+f19826+8)-0),w7
   829  00D8FC  00478387           	add.w	sp,w7,w7
   830  00D8FE  00780297           	mov	[w7],w5
   831  00D900  009812A6           	mov.w	w6,[w5+36]
   832  00D902                     lab740:
   833  00D902  0002CA22           	call	(_vPortExitCritical)
              00000000           
   834                           ;queue.c: 767: if( xTaskCheckForTimeOut( &xTimeO
                                 ut, &xTicksToWait ) == ( ( BaseType_t ) 0 ) )
   835                           
   836                           	global	_xTaskCheckForTimeOut
   837                           	signat	_xTaskCheckForTimeOut,8250
   838                           	line	767
   839  00D906  002FFF82           	mov.w	#(0+f19826+12)-0,w2
   840  00D908  00478102           	add.w	sp,w2,w2
   841  00D90A  002FFF00           	mov.w	#(0+f19826+4)-0,w0
   842  00D90C  00478000           	add.w	sp,w0,w0
   843  00D90E  0002F54A           	call	(_xTaskCheckForTimeOut)	;0 bytes adjustmen
              00000000           t
   844  00D912  00E00000           	cp0.w	w0
   845  00D914  003A0002           	bra	nz,u171
   846  00D916  0004D91E           	goto	u170
              00000000           
   847  00D91A                     u171:
   848  00D91A  0004D966           	goto	lab741
              00000000           
   849  00D91E                     u170:
   850                           ;queue.c: 768: {
   851                           
   852                           ;queue.c: 769: if( prvIsQueueFull( pxQueue ) != 
                                 ( ( BaseType_t ) 0 ) )
   853                           
   854                           	signat	_prvIsQueueFull,4154
   855                           	line	769
   856  00D91E  0097B82F           	mov.w	[sp+((0+f19826+8)-0)],w0
   857  00D920  0002E218           	call	(_prvIsQueueFull)	;0 bytes adjustment
              00000000           
   858  00D924  00E00000           	cp0.w	w0
   859  00D926  00320002           	bra	z,u181
   860  00D928  0004D930           	goto	u180
              00000000           
   861  00D92C                     u181:
   862  00D92C  0004D958           	goto	lab742
              00000000           
   863  00D930                     u180:
   864                           ;queue.c: 770: {
   865                           
   866                           ;queue.c: 771: ;
   867                           
   868                           ;queue.c: 772: vTaskPlaceOnEventList( &( pxQueue
                                 ->xTasksWaitingToSend ), xTicksToWait );
   869                           
   870                           	global	_vTaskPlaceOnEventList
   871                           	signat	_vTaskPlaceOnEventList,8250
   872                           	line	772
   873  00D930  0097B94F           	mov.w	[sp+((0+f19826+12)-0)],w2
   874  00D932  0097B82F           	mov.w	[sp+((0+f19826+8)-0)],w0
   875  00D934  00B00080           	add.w	#8,w0
   876  00D936  0002F2CA           	call	(_vTaskPlaceOnEventList)	;0 bytes adjustme
              00000000           nt
   877                           ;queue.c: 779: prvUnlockQueue( pxQueue );
   878                           
   879                           	signat	_prvUnlockQueue,4154
   880                           	line	779
   881  00D93A  0097B82F           	mov.w	[sp+((0+f19826+8)-0)],w0
   882  00D93C  0002E0B4           	call	(_prvUnlockQueue)	;0 bytes adjustment
              00000000           
   883                           ;queue.c: 786: if( xTaskResumeAll() == ( ( BaseT
                                 ype_t ) 0 ) )
   884                           
   885                           	global	_xTaskResumeAll
   886                           	signat	_xTaskResumeAll,26
   887                           	line	786
   888  00D940  0002EF10           	call	(_xTaskResumeAll)
              00000000           
   889  00D944  00E00000           	cp0.w	w0
   890  00D946  003A0002           	bra	nz,u191
   891  00D948  0004D950           	goto	u190
              00000000           
   892  00D94C                     u191:
   893  00D94C  0004D954           	goto	lab743
              00000000           
   894  00D950                     u190:
   895                           ;queue.c: 787: {
   896                           
   897                           ;queue.c: 788: vPortYield();
   898                           
   899                           	line	788
   900  00D950  0002C410           	call	(_vPortYield)
              00000000           
   901                           	line	789
   902  00D954                     lab743:
   903                           ;queue.c: 789: }
   904                           
   905                           ;queue.c: 790: }
   906                           
   907                           	line	790
   908  00D954  0004D962           	goto	lab744
              00000000           
   909                           	line	791
   910  00D958                     lab742:
   911                           ;queue.c: 791: else
   912                           
   913                           ;queue.c: 792: {
   914                           
   915                           ;queue.c: 794: prvUnlockQueue( pxQueue );
   916                           
   917                           	line	794
   918  00D958  0097B82F           	mov.w	[sp+((0+f19826+8)-0)],w0
   919  00D95A  0002E0B4           	call	(_prvUnlockQueue)	;0 bytes adjustment
              00000000           
   920                           ;queue.c: 795: ( void ) xTaskResumeAll();
   921                           
   922                           	line	795
   923  00D95E  0002EF10           	call	(_xTaskResumeAll)
              00000000           
   924                           	line	796
   925  00D962                     lab744:
   926                           ;queue.c: 796: }
   927                           
   928                           ;queue.c: 797: }
   929                           
   930                           	line	797
   931  00D962  0004D976           	goto	lab745
              00000000           
   932                           	line	798
   933  00D966                     lab741:
   934                           ;queue.c: 798: else
   935                           
   936                           ;queue.c: 799: {
   937                           
   938                           ;queue.c: 801: prvUnlockQueue( pxQueue );
   939                           
   940                           	line	801
   941  00D966  0097B82F           	mov.w	[sp+((0+f19826+8)-0)],w0
   942  00D968  0002E0B4           	call	(_prvUnlockQueue)	;0 bytes adjustment
              00000000           
   943                           ;queue.c: 802: ( void ) xTaskResumeAll();
   944                           
   945                           	line	802
   946  00D96C  0002EF10           	call	(_xTaskResumeAll)
              00000000           
   947                           ;queue.c: 806: ;
   948                           
   949                           ;queue.c: 807: return ( ( BaseType_t ) 0 );
   950                           
   951                           	line	807
   952  00D970  00200000           	mov.w	#0,w0	;return #0 in w0
   953  00D972  0004D97A           	goto	lab723
              00000000           
   954                           	line	808
   955  00D976                     lab745:
   956                           ;queue.c: 808: }
   957                           
   958                           ;queue.c: 809: }
   959                           
   960                           	line	809
   961  00D976  0004D7E4           	goto	lab724
              00000000           
   962  00D97A                     lab725:
   963                           ;queue.c: 810: }
   964                           
   965                           	line	810
   966  00D97A                     lab723:
   967                           	global	_xQueueGenericSend
   968                           
   969  00D97A  00B1014F           	sub.w	#20,sp
   970  00D97C  00060000           	return
   971                           	line	614
   972                           
   973  00D97E                     f19821:
   974                           
   975  00D97E  00B0014F           	add.w	#20,sp
   976  00D980  0004D7BE           	goto	f19820
              00000000           
   977  000000                     f19826	equ	-20		;stack offset for auto's
   978  000000                     f19823	equ	-24		;stack offset for parameters
   979                           	line	0
   980                           	global	 __end_of_xQueueGenericSend
   981  00D984                     __end_of_xQueueGenericSend:
   982                           	global	_xQueueGenericSendFromISR
   983                           	signat	_xQueueGenericSendFromISR,16442
   984                           	line	1059
   985  00D984                     _xQueueGenericSendFromISR:
   986  00D984  0004DA6A           	goto	f19881
              00000000           
   987  00D988                     f19880:
   988                           
   989                           ;queue.c: 1058: BaseType_t xQueueGenericSendFrom
                                 ISR( QueueHandle_t xQueue, const void * const pv
                                 ItemToQueue, BaseType_t * const pxHigherPriority
                                 TaskWoken, const BaseType_t xCopyPosition )
   990                           
   991                           ;queue.c: 1059: {
   992                           
   993                           ;queue.c: 1060: BaseType_t xReturn;
   994                           
   995                           ;queue.c: 1061: UBaseType_t uxSavedInterruptStat
                                 us;
   996                           
   997                           ;queue.c: 1062: Queue_t * const pxQueue = ( Queu
                                 e_t * ) xQueue;
   998                           
   999                           	line	1062
  1000  00D988  002FFF47           	mov.w	#((0+f19886+4)-0),w7
  1001  00D98A  00478387           	add.w	sp,w7,w7
  1002  00D98C  00780B80           	mov.w	w0,[w7]
  1003                           ;queue.c: 1064: ;
  1004                           
  1005                           ;queue.c: 1065: ;
  1006                           
  1007                           ;queue.c: 1066: ;
  1008                           
  1009                           ;queue.c: 1082: ;
  1010                           
  1011                           ;queue.c: 1089: uxSavedInterruptStatus = 0;
  1012                           
  1013                           	line	1089
  1014  00D98E  00200005           	mov.w	#0,w5
  1015  00D990  002FFF27           	mov.w	#((0+f19886+2)-0),w7
  1016  00D992  00478387           	add.w	sp,w7,w7
  1017  00D994  00780B85           	mov.w	w5,[w7]
  1018                           ;queue.c: 1090: {
  1019                           
  1020                           ;queue.c: 1091: if( ( pxQueue->uxMessagesWaiting
                                  < pxQueue->uxLength ) || ( xCopyPosition == ( (
                                  BaseType_t ) 2 ) ) )
  1021                           
  1022                           ;_xCopyPosition stored from w6
  1023                           	line	1091
  1024  00D996  002FFF67           	mov.w	#((0+f19886+6)-0),w7
  1025  00D998  00478387           	add.w	sp,w7,w7
  1026  00D99A  00780B86           	mov.w	w6,[w7]
  1027                           ;_pxHigherPriorityTaskWoken stored from w4
  1028  00D99C  002FFF86           	mov.w	#((0+f19886+8)-0),w6
  1029  00D99E  00478306           	add.w	sp,w6,w6
  1030  00D9A0  00780B04           	mov.w	w4,[w6]
  1031                           ;_pvItemToQueue stored from w2
  1032  00D9A2  002FFFA6           	mov.w	#((0+f19886+10)-0),w6
  1033  00D9A4  00478306           	add.w	sp,w6,w6
  1034  00D9A6  00780B02           	mov.w	w2,[w6]
  1035                           ;_xQueue stored from w0
  1036  00D9A8  002FFFC6           	mov.w	#((0+f19886+12)-0),w6
  1037  00D9AA  00478306           	add.w	sp,w6,w6
  1038  00D9AC  00780B00           	mov.w	w0,[w6]
  1039  00D9AE  0097BB2F           	mov.w	[sp+((0+f19886+4)-0)],w6
  1040  00D9B0  00B001E6           	add.w	#30,w6
  1041  00D9B2  00780396           	mov.w	[w6],w7
  1042  00D9B4  0097BAAF           	mov.w	[sp+((0+f19886+4)-0)],w5
  1043  00D9B6  00B001C5           	add.w	#28,w5
  1044  00D9B8  00780315           	mov.w	[w5],w6
  1045  00D9BA  00E13007           	cp.w	w6, w7
  1046  00D9BC  00310002           	bra	geu,u201
  1047  00D9BE  0004D9CC           	goto	u200
              00000000           
  1048  00D9C2                     u201:
  1049  00D9C2  0097BB3F           	mov.w	[sp+((0+f19886+6)-0)],w6
  1050  00D9C4  00E13062           	cp.w	w6, #2
  1051  00D9C6  003A0004           	bra	nz,u211
  1052  00D9C8  0004D9CC           	goto	u210
              00000000           
  1053  00D9CC                     u200:
  1054  00D9CC                     u210:
  1055  00D9CC  0004D9D8           	goto	u220
              00000000           
  1056  00D9D0                     u211:
  1057  00D9D0  0004D9D4           	goto	u221
              00000000           
  1058  00D9D4                     u221:
  1059  00D9D4  0004DA56           	goto	lab747
              00000000           
  1060  00D9D8                     u220:
  1061                           ;queue.c: 1092: {
  1062                           
  1063                           ;queue.c: 1093: ;
  1064                           
  1065                           ;queue.c: 1100: ( void ) prvCopyDataToQueue( pxQ
                                 ueue, pvItemToQueue, xCopyPosition );
  1066                           
  1067                           	line	1100
  1068  00D9D8  0097BA3F           	mov.w	[sp+((0+f19886+6)-0)],w4
  1069  00D9DA  0097B95F           	mov.w	[sp+((0+f19886+10)-0)],w2
  1070  00D9DC  0097B82F           	mov.w	[sp+((0+f19886+4)-0)],w0
  1071  00D9DE  0002DF20           	call	(_prvCopyDataToQueue)	;0 bytes adjustment
              00000000           
  1072                           ;queue.c: 1104: if( pxQueue->xTxLock == ( ( Base
                                 Type_t ) -1 ) )
  1073                           
  1074                           	line	1104
  1075  00D9E2  002FFFF6           	mov.w	#-1,w6
  1076  00D9E4  0097BBAF           	mov.w	[sp+((0+f19886+4)-0)],w7
  1077  00D9E6  00B00247           	add.w	#36,w7
  1078  00D9E8  00780297           	mov.w	[w7],w5
  1079  00D9EA  00E12806           	cp.w	w5, w6
  1080  00D9EC  003A0002           	bra	nz,u231
  1081  00D9EE  0004D9F6           	goto	u230
              00000000           
  1082  00D9F2                     u231:
  1083  00D9F2  0004DA44           	goto	lab748
              00000000           
  1084  00D9F6                     u230:
  1085                           ;queue.c: 1105: {
  1086                           
  1087                           ;queue.c: 1158: {
  1088                           
  1089                           ;queue.c: 1159: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToReceive ) )->uxNumberOfItems
                                  == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 
                                 ) )
  1090                           
  1091                           	line	1159
  1092  00D9F6  0097BB2F           	mov.w	[sp+((0+f19886+4)-0)],w6
  1093  00D9F8  00B00126           	add.w	#18,w6
  1094  00D9FA  00E00016           	cp0.w	[w6]
  1095  00D9FC  00320002           	bra	z,u241
  1096  00D9FE  0004DA06           	goto	u240
              00000000           
  1097  00DA02                     u241:
  1098  00DA02  0004DA40           	goto	lab749
              00000000           
  1099  00DA06                     u240:
  1100                           ;queue.c: 1160: {
  1101                           
  1102                           ;queue.c: 1161: if( xTaskRemoveFromEventList( &(
                                  pxQueue->xTasksWaitingToReceive ) ) != ( ( Base
                                 Type_t ) 0 ) )
  1103                           
  1104                           	line	1161
  1105  00DA06  0097B82F           	mov.w	[sp+((0+f19886+4)-0)],w0
  1106  00DA08  00B00120           	add.w	#18,w0
  1107  00DA0A  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
  1108  00DA0E  00E00000           	cp0.w	w0
  1109  00DA10  00320002           	bra	z,u251
  1110  00DA12  0004DA1A           	goto	u250
              00000000           
  1111  00DA16                     u251:
  1112  00DA16  0004DA3C           	goto	lab750
              00000000           
  1113  00DA1A                     u250:
  1114                           ;queue.c: 1162: {
  1115                           
  1116                           ;queue.c: 1165: if( pxHigherPriorityTaskWoken !=
                                  (0) )
  1117                           
  1118                           	line	1165
  1119  00DA1A  002FFF86           	mov.w	#((0+f19886+8)-0),w6
  1120  00DA1C  00478306           	add.w	sp,w6,w6
  1121  00DA1E  00E00016           	cp0.w	[w6]
  1122  00DA20  00320002           	bra	z,u261
  1123  00DA22  0004DA2A           	goto	u260
              00000000           
  1124  00DA26                     u261:
  1125  00DA26  0004DA38           	goto	lab751
              00000000           
  1126  00DA2A                     u260:
  1127                           ;queue.c: 1166: {
  1128                           
  1129                           ;queue.c: 1167: *pxHigherPriorityTaskWoken = ( (
                                  BaseType_t ) 1 );
  1130                           
  1131                           	line	1167
  1132  00DA2A  002FFF86           	mov.w	#((0+f19886+8)-0),w6
  1133  00DA2C  00478306           	add.w	sp,w6,w6
  1134  00DA2E  00780316           	mov.w	[w6],w6
  1135  00DA30  00200017           	mov.w	#01h,w7
  1136  00DA32  00780B07           	mov.w	w7,[w6]
  1137                           ;queue.c: 1168: }
  1138                           
  1139                           	line	1168
  1140  00DA34  0004DA38           	goto	lab752
              00000000           
  1141                           	line	1169
  1142  00DA38                     lab751:
  1143                           ;queue.c: 1169: else
  1144                           
  1145                           ;queue.c: 1170: {
  1146                           
  1147                           ;queue.c: 1171: ;
  1148                           
  1149                           	line	1172
  1150  00DA38                     lab752:
  1151                           ;queue.c: 1172: }
  1152                           
  1153                           ;queue.c: 1173: }
  1154                           
  1155                           	line	1173
  1156  00DA38  0004DA3C           	goto	lab753
              00000000           
  1157                           	line	1174
  1158  00DA3C                     lab750:
  1159                           ;queue.c: 1174: else
  1160                           
  1161                           ;queue.c: 1175: {
  1162                           
  1163                           ;queue.c: 1176: ;
  1164                           
  1165                           	line	1177
  1166  00DA3C                     lab753:
  1167                           ;queue.c: 1177: }
  1168                           
  1169                           ;queue.c: 1178: }
  1170                           
  1171                           	line	1178
  1172  00DA3C  0004DA40           	goto	lab754
              00000000           
  1173                           	line	1179
  1174  00DA40                     lab749:
  1175                           ;queue.c: 1179: else
  1176                           
  1177                           ;queue.c: 1180: {
  1178                           
  1179                           ;queue.c: 1181: ;
  1180                           
  1181                           	line	1182
  1182  00DA40                     lab754:
  1183                           ;queue.c: 1182: }
  1184                           
  1185                           ;queue.c: 1183: }
  1186                           
  1187                           ;queue.c: 1185: }
  1188                           
  1189                           	line	1185
  1190  00DA40  0004DA4A           	goto	lab755
              00000000           
  1191                           	line	1186
  1192  00DA44                     lab748:
  1193                           ;queue.c: 1186: else
  1194                           
  1195                           ;queue.c: 1187: {
  1196                           
  1197                           ;queue.c: 1190: ++( pxQueue->xTxLock );
  1198                           
  1199                           	line	1190
  1200  00DA44  0097BB2F           	mov.w	[sp+((0+f19886+4)-0)],w6
  1201  00DA46  00B00246           	add.w	#36,w6
  1202  00DA48  00E80B16           	inc.w	[w6],[w6]
  1203                           	line	1191
  1204  00DA4A                     lab755:
  1205                           ;queue.c: 1191: }
  1206                           
  1207                           ;queue.c: 1193: xReturn = ( ( ( BaseType_t ) 1 )
                                  );
  1208                           
  1209                           	line	1193
  1210  00DA4A  00200017           	mov.w	#01h,w7
  1211  00DA4C  002FFF06           	mov.w	#((0+f19886+0)-0),w6
  1212  00DA4E  00478306           	add.w	sp,w6,w6
  1213  00DA50  00780B07           	mov.w	w7,[w6]
  1214                           ;queue.c: 1194: }
  1215                           
  1216                           	line	1194
  1217  00DA52  0004DA5E           	goto	lab756
              00000000           
  1218                           	line	1195
  1219  00DA56                     lab747:
  1220                           ;queue.c: 1195: else
  1221                           
  1222                           ;queue.c: 1196: {
  1223                           
  1224                           ;queue.c: 1197: ;
  1225                           
  1226                           ;queue.c: 1198: xReturn = ( ( BaseType_t ) 0 );
  1227                           
  1228                           	line	1198
  1229  00DA56  00200007           	mov.w	#0,w7
  1230  00DA58  002FFF06           	mov.w	#((0+f19886+0)-0),w6
  1231  00DA5A  00478306           	add.w	sp,w6,w6
  1232  00DA5C  00780B07           	mov.w	w7,[w6]
  1233                           	line	1199
  1234  00DA5E                     lab756:
  1235                           ;queue.c: 1199: }
  1236                           
  1237                           ;queue.c: 1200: }
  1238                           
  1239                           ;queue.c: 1201: ( void ) uxSavedInterruptStatus;
  1240                           
  1241                           ;queue.c: 1203: return xReturn;
  1242                           
  1243                           	line	1203
  1244  00DA5E  0097B80F           	mov.w	[sp+((0+f19886+0)-0)], w0
  1245  00DA60  00780000           	mov.w	w0,w0
  1246  00DA62  0004DA66           	goto	lab746
              00000000           
  1247                           ;queue.c: 1204: }
  1248                           
  1249                           	line	1204
  1250  00DA66                     lab746:
  1251                           	global	_xQueueGenericSendFromISR
  1252                           
  1253  00DA66  00B1010F           	sub.w	#16,sp
  1254  00DA68  00060000           	return
  1255                           	line	1059
  1256                           
  1257  00DA6A                     f19881:
  1258                           
  1259  00DA6A  00B0010F           	add.w	#16,sp
  1260  00DA6C  0004D988           	goto	f19880
              00000000           
  1261  000000                     f19886	equ	-16		;stack offset for auto's
  1262  000000                     f19883	equ	-20		;stack offset for parameters
  1263                           	line	0
  1264                           	global	 __end_of_xQueueGenericSendFromISR
  1265  00DA70                     __end_of_xQueueGenericSendFromISR:
  1266                           	global	_xQueueGiveFromISR
  1267                           	signat	_xQueueGiveFromISR,8250
  1268                           	line	1208
  1269  00DA70                     _xQueueGiveFromISR:
  1270  00DA70  0004DB34           	goto	f19891
              00000000           
  1271  00DA74                     f19890:
  1272                           
  1273                           ;queue.c: 1207: BaseType_t xQueueGiveFromISR( Qu
                                 eueHandle_t xQueue, BaseType_t * const pxHigherP
                                 riorityTaskWoken )
  1274                           
  1275                           ;queue.c: 1208: {
  1276                           
  1277                           ;queue.c: 1209: BaseType_t xReturn;
  1278                           
  1279                           ;queue.c: 1210: UBaseType_t uxSavedInterruptStat
                                 us;
  1280                           
  1281                           ;queue.c: 1211: Queue_t * const pxQueue = ( Queu
                                 e_t * ) xQueue;
  1282                           
  1283                           	line	1211
  1284  00DA74  002FFF86           	mov.w	#((0+f19896+4)-0),w6
  1285  00DA76  00478306           	add.w	sp,w6,w6
  1286+ 00DA78  00780B00           	mov.w	w0,[w6]
  1287+                          ;queue.c: 1219: ;
  1288+                          
  1289+                          ;queue.c: 1223: ;
  1290+                          
  1291+                          ;queue.c: 1228: ;
  1292+                          
  1293+                          ;queue.c: 1244: ;
  1294+                          
  1295+                          ;queue.c: 1246: uxSavedInterruptStatus = 0;
  1296+                          
  1297+                          	line	1246
  1298+ 00DA7A  00200007           	mov.w	#0,w7
  1299  00DA7C  002FFF66           	mov.w	#((0+f19896+2)-0),w6
  1300  00DA7E  00478306           	add.w	sp,w6,w6
  1301  00DA80  00780B07           	mov.w	w7,[w6]
  1302                           ;queue.c: 1247: {
  1303                           
  1304                           ;queue.c: 1251: if( pxQueue->uxMessagesWaiting <
                                  pxQueue->uxLength )
  1305                           
  1306                           ;_pxHigherPriorityTaskWoken stored from w2
  1307                           	line	1251
  1308  00DA82  002FFFA6           	mov.w	#((0+f19896+6)-0),w6
  1309  00DA84  00478306           	add.w	sp,w6,w6
  1310  00DA86  00780B02           	mov.w	w2,[w6]
  1311                           ;_xQueue stored from w0
  1312  00DA88  002FFFC6           	mov.w	#((0+f19896+8)-0),w6
  1313  00DA8A  00478306           	add.w	sp,w6,w6
  1314  00DA8C  00780B00           	mov.w	w0,[w6]
  1315  00DA8E  0097BB4F           	mov.w	[sp+((0+f19896+4)-0)],w6
  1316  00DA90  00B001E6           	add.w	#30,w6
  1317  00DA92  00780396           	mov.w	[w6],w7
  1318  00DA94  0097BACF           	mov.w	[sp+((0+f19896+4)-0)],w5
  1319  00DA96  00B001C5           	add.w	#28,w5
  1320  00DA98  00780315           	mov.w	[w5],w6
  1321  00DA9A  00E13007           	cp.w	w6, w7
  1322  00DA9C  00310002           	bra	geu,u271
  1323  00DA9E  0004DAA6           	goto	u270
              00000000           
  1324  00DAA2                     u271:
  1325  00DAA2  0004DB20           	goto	lab758
              00000000           
  1326  00DAA6                     u270:
  1327                           ;queue.c: 1252: {
  1328                           
  1329                           ;queue.c: 1253: ;
  1330                           
  1331                           ;queue.c: 1261: ++( pxQueue->uxMessagesWaiting )
                                 ;
  1332                           
  1333                           	line	1261
  1334  00DAA6  0097BB4F           	mov.w	[sp+((0+f19896+4)-0)],w6
  1335  00DAA8  00B001C6           	add.w	#28,w6
  1336  00DAAA  00E80B16           	inc.w	[w6],[w6]
  1337                           ;queue.c: 1265: if( pxQueue->xTxLock == ( ( Base
                                 Type_t ) -1 ) )
  1338                           
  1339                           	line	1265
  1340  00DAAC  002FFFF6           	mov.w	#-1,w6
  1341  00DAAE  0097BBCF           	mov.w	[sp+((0+f19896+4)-0)],w7
  1342  00DAB0  00B00247           	add.w	#36,w7
  1343  00DAB2  00780297           	mov.w	[w7],w5
  1344  00DAB4  00E12806           	cp.w	w5, w6
  1345  00DAB6  003A0002           	bra	nz,u281
  1346  00DAB8  0004DAC0           	goto	u280
              00000000           
  1347  00DABC                     u281:
  1348  00DABC  0004DB0E           	goto	lab759
              00000000           
  1349  00DAC0                     u280:
  1350                           ;queue.c: 1266: {
  1351                           
  1352                           ;queue.c: 1319: {
  1353                           
  1354                           ;queue.c: 1320: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToReceive ) )->uxNumberOfItems
                                  == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 
                                 ) )
  1355                           
  1356                           	line	1320
  1357  00DAC0  0097BB4F           	mov.w	[sp+((0+f19896+4)-0)],w6
  1358  00DAC2  00B00126           	add.w	#18,w6
  1359  00DAC4  00E00016           	cp0.w	[w6]
  1360  00DAC6  00320002           	bra	z,u291
  1361  00DAC8  0004DAD0           	goto	u290
              00000000           
  1362  00DACC                     u291:
  1363  00DACC  0004DB0A           	goto	lab760
              00000000           
  1364  00DAD0                     u290:
  1365                           ;queue.c: 1321: {
  1366                           
  1367                           ;queue.c: 1322: if( xTaskRemoveFromEventList( &(
                                  pxQueue->xTasksWaitingToReceive ) ) != ( ( Base
                                 Type_t ) 0 ) )
  1368                           
  1369                           	line	1322
  1370  00DAD0  0097B84F           	mov.w	[sp+((0+f19896+4)-0)],w0
  1371  00DAD2  00B00120           	add.w	#18,w0
  1372  00DAD4  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
  1373  00DAD8  00E00000           	cp0.w	w0
  1374  00DADA  00320002           	bra	z,u301
  1375  00DADC  0004DAE4           	goto	u300
              00000000           
  1376  00DAE0                     u301:
  1377  00DAE0  0004DB06           	goto	lab761
              00000000           
  1378  00DAE4                     u300:
  1379                           ;queue.c: 1323: {
  1380                           
  1381                           ;queue.c: 1326: if( pxHigherPriorityTaskWoken !=
                                  (0) )
  1382                           
  1383                           	line	1326
  1384  00DAE4  002FFFA6           	mov.w	#((0+f19896+6)-0),w6
  1385  00DAE6  00478306           	add.w	sp,w6,w6
  1386  00DAE8  00E00016           	cp0.w	[w6]
  1387  00DAEA  00320002           	bra	z,u311
  1388  00DAEC  0004DAF4           	goto	u310
              00000000           
  1389  00DAF0                     u311:
  1390  00DAF0  0004DB02           	goto	lab762
              00000000           
  1391  00DAF4                     u310:
  1392                           ;queue.c: 1327: {
  1393                           
  1394                           ;queue.c: 1328: *pxHigherPriorityTaskWoken = ( (
                                  BaseType_t ) 1 );
  1395                           
  1396                           	line	1328
  1397  00DAF4  002FFFA6           	mov.w	#((0+f19896+6)-0),w6
  1398  00DAF6  00478306           	add.w	sp,w6,w6
  1399  00DAF8  00780316           	mov.w	[w6],w6
  1400  00DAFA  00200017           	mov.w	#01h,w7
  1401  00DAFC  00780B07           	mov.w	w7,[w6]
  1402                           ;queue.c: 1329: }
  1403                           
  1404                           	line	1329
  1405  00DAFE  0004DB02           	goto	lab763
              00000000           
  1406                           	line	1330
  1407  00DB02                     lab762:
  1408                           ;queue.c: 1330: else
  1409                           
  1410                           ;queue.c: 1331: {
  1411                           
  1412                           ;queue.c: 1332: ;
  1413                           
  1414                           	line	1333
  1415  00DB02                     lab763:
  1416                           ;queue.c: 1333: }
  1417                           
  1418                           ;queue.c: 1334: }
  1419                           
  1420                           	line	1334
  1421  00DB02  0004DB06           	goto	lab764
              00000000           
  1422                           	line	1335
  1423  00DB06                     lab761:
  1424                           ;queue.c: 1335: else
  1425                           
  1426                           ;queue.c: 1336: {
  1427                           
  1428                           ;queue.c: 1337: ;
  1429                           
  1430                           	line	1338
  1431  00DB06                     lab764:
  1432                           ;queue.c: 1338: }
  1433                           
  1434                           ;queue.c: 1339: }
  1435                           
  1436                           	line	1339
  1437  00DB06  0004DB0A           	goto	lab765
              00000000           
  1438                           	line	1340
  1439  00DB0A                     lab760:
  1440                           ;queue.c: 1340: else
  1441                           
  1442                           ;queue.c: 1341: {
  1443                           
  1444                           ;queue.c: 1342: ;
  1445                           
  1446                           	line	1343
  1447  00DB0A                     lab765:
  1448                           ;queue.c: 1343: }
  1449                           
  1450                           ;queue.c: 1344: }
  1451                           
  1452                           ;queue.c: 1346: }
  1453                           
  1454                           	line	1346
  1455  00DB0A  0004DB14           	goto	lab766
              00000000           
  1456                           	line	1347
  1457  00DB0E                     lab759:
  1458                           ;queue.c: 1347: else
  1459                           
  1460                           ;queue.c: 1348: {
  1461                           
  1462                           ;queue.c: 1351: ++( pxQueue->xTxLock );
  1463                           
  1464                           	line	1351
  1465  00DB0E  0097BB4F           	mov.w	[sp+((0+f19896+4)-0)],w6
  1466  00DB10  00B00246           	add.w	#36,w6
  1467  00DB12  00E80B16           	inc.w	[w6],[w6]
  1468                           	line	1352
  1469  00DB14                     lab766:
  1470                           ;queue.c: 1352: }
  1471                           
  1472                           ;queue.c: 1354: xReturn = ( ( ( BaseType_t ) 1 )
                                  );
  1473                           
  1474                           	line	1354
  1475  00DB14  00200017           	mov.w	#01h,w7
  1476  00DB16  002FFF46           	mov.w	#((0+f19896+0)-0),w6
  1477  00DB18  00478306           	add.w	sp,w6,w6
  1478  00DB1A  00780B07           	mov.w	w7,[w6]
  1479                           ;queue.c: 1355: }
  1480                           
  1481                           	line	1355
  1482  00DB1C  0004DB28           	goto	lab767
              00000000           
  1483                           	line	1356
  1484  00DB20                     lab758:
  1485                           ;queue.c: 1356: else
  1486                           
  1487                           ;queue.c: 1357: {
  1488                           
  1489                           ;queue.c: 1358: ;
  1490                           
  1491                           ;queue.c: 1359: xReturn = ( ( BaseType_t ) 0 );
  1492                           
  1493                           	line	1359
  1494  00DB20  00200007           	mov.w	#0,w7
  1495  00DB22  002FFF46           	mov.w	#((0+f19896+0)-0),w6
  1496  00DB24  00478306           	add.w	sp,w6,w6
  1497  00DB26  00780B07           	mov.w	w7,[w6]
  1498                           	line	1360
  1499  00DB28                     lab767:
  1500                           ;queue.c: 1360: }
  1501                           
  1502                           ;queue.c: 1361: }
  1503                           
  1504                           ;queue.c: 1362: ( void ) uxSavedInterruptStatus;
  1505                           
  1506                           ;queue.c: 1364: return xReturn;
  1507                           
  1508                           	line	1364
  1509  00DB28  0097B82F           	mov.w	[sp+((0+f19896+0)-0)], w0
  1510  00DB2A  00780000           	mov.w	w0,w0
  1511  00DB2C  0004DB30           	goto	lab757
              00000000           
  1512                           ;queue.c: 1365: }
  1513                           
  1514                           	line	1365
  1515  00DB30                     lab757:
  1516                           	global	_xQueueGiveFromISR
  1517                           
  1518  00DB30  00B100CF           	sub.w	#12,sp
  1519  00DB32  00060000           	return
  1520                           	line	1208
  1521                           
  1522  00DB34                     f19891:
  1523                           
  1524  00DB34  00B000CF           	add.w	#12,sp
  1525  00DB36  0004DA74           	goto	f19890
              00000000           
  1526  000000                     f19896	equ	-12		;stack offset for auto's
  1527  000000                     f19893	equ	-16		;stack offset for parameters
  1528                           	line	0
  1529                           	global	 __end_of_xQueueGiveFromISR
  1530  00DB3A                     __end_of_xQueueGiveFromISR:
  1531                           	global	_xQueueGenericReceive
  1532                           	signat	_xQueueGenericReceive,16442
  1533                           	line	1369
  1534  00DB3A                     _xQueueGenericReceive:
  1535  00DB3A  0004DD2A           	goto	f19901
              00000000           
  1536  00DB3E                     f19900:
  1537                           
  1538                           ;queue.c: 1368: BaseType_t xQueueGenericReceive(
                                  QueueHandle_t xQueue, void * const pvBuffer, Ti
                                 ckType_t xTicksToWait, const BaseType_t xJustPee
                                 king )
  1539                           
  1540                           ;queue.c: 1369: {
  1541                           
  1542                           ;queue.c: 1370: BaseType_t xEntryTimeSet = ( ( B
                                 aseType_t ) 0 );
  1543                           
  1544                           	line	1370
  1545  00DB3E  00200005           	mov.w	#0,w5
  1546  00DB40  002FFEC7           	mov.w	#((0+f19906+0)-0),w7
  1547  00DB42  00478387           	add.w	sp,w7,w7
  1548  00DB44  00780B85           	mov.w	w5,[w7]
  1549                           ;queue.c: 1371: TimeOut_t xTimeOut;
  1550                           
  1551                           ;queue.c: 1372: int8_t *pcOriginalReadPosition;
  1552                           
  1553                           ;queue.c: 1373: Queue_t * const pxQueue = ( Queu
                                 e_t * ) xQueue;
  1554                           
  1555                           	line	1373
  1556  00DB46  002FFF47           	mov.w	#((0+f19906+8)-0),w7
  1557  00DB48  00478387           	add.w	sp,w7,w7
  1558  00DB4A  00780B80           	mov.w	w0,[w7]
  1559                           ;queue.c: 1375: ;
  1560                           
  1561                           ;queue.c: 1376: ;
  1562                           
  1563                           ;queue.c: 1387: for( ;; )
  1564                           
  1565                           ;_xJustPeeking stored from w6
  1566                           	line	1388
  1567  00DB4C  002FFF67           	mov.w	#((0+f19906+10)-0),w7
  1568  00DB4E  00478387           	add.w	sp,w7,w7
  1569  00DB50  00780B86           	mov.w	w6,[w7]
  1570                           ;_xTicksToWait stored from w4
  1571  00DB52  002FFF86           	mov.w	#((0+f19906+12)-0),w6
  1572  00DB54  00478306           	add.w	sp,w6,w6
  1573  00DB56  00780B04           	mov.w	w4,[w6]
  1574                           ;_pvBuffer stored from w2
  1575  00DB58  002FFFA6           	mov.w	#((0+f19906+14)-0),w6
  1576  00DB5A  00478306           	add.w	sp,w6,w6
  1577  00DB5C  00780B02           	mov.w	w2,[w6]
  1578                           ;_xQueue stored from w0
  1579  00DB5E  002FFFC6           	mov.w	#((0+f19906+16)-0),w6
  1580  00DB60  00478306           	add.w	sp,w6,w6
  1581  00DB62  00780B00           	mov.w	w0,[w6]
  1582  00DB64                     lab769:
  1583                           ;queue.c: 1388: {
  1584                           
  1585                           ;queue.c: 1389: vPortEnterCritical();
  1586                           
  1587                           	line	1389
  1588  00DB64  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  1589                           ;queue.c: 1390: {
  1590                           
  1591                           ;queue.c: 1393: if( pxQueue->uxMessagesWaiting >
                                  ( UBaseType_t ) 0 )
  1592                           
  1593                           	line	1393
  1594  00DB68  0097BB2F           	mov.w	[sp+((0+f19906+8)-0)],w6
  1595  00DB6A  00B001C6           	add.w	#28,w6
  1596  00DB6C  00E00016           	cp0.w	[w6]
  1597  00DB6E  00320002           	bra	z,u321
  1598  00DB70  0004DB78           	goto	u320
              00000000           
  1599  00DB74                     u321:
  1600  00DB74  0004DC20           	goto	lab772
              00000000           
  1601  00DB78                     u320:
  1602                           ;queue.c: 1394: {
  1603                           
  1604                           ;queue.c: 1397: pcOriginalReadPosition = pxQueue
                                 ->u.pcReadFrom;
  1605                           
  1606                           	line	1397
  1607  00DB78  0097BBAF           	mov.w	[sp+((0+f19906+8)-0)],w7
  1608  00DB7A  00B00067           	add.w	#6,w7
  1609  00DB7C  002FFF26           	mov.w	#((0+f19906+6)-0),w6
  1610  00DB7E  00478306           	add.w	sp,w6,w6
  1611  00DB80  00780B17           	mov.w	[w7],[w6]
  1612                           ;queue.c: 1399: prvCopyDataFromQueue( pxQueue, p
                                 vBuffer );
  1613                           
  1614                           	signat	_prvCopyDataFromQueue,8250
  1615                           	line	1399
  1616  00DB82  0097B95F           	mov.w	[sp+((0+f19906+14)-0)],w2
  1617  00DB84  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  1618  00DB86  0002E042           	call	(_prvCopyDataFromQueue)	;0 bytes adjustmen
              00000000           t
  1619                           ;queue.c: 1401: if( xJustPeeking == ( ( BaseType
                                 _t ) 0 ) )
  1620                           
  1621                           	line	1401
  1622  00DB8A  002FFF66           	mov.w	#((0+f19906+10)-0),w6
  1623  00DB8C  00478306           	add.w	sp,w6,w6
  1624  00DB8E  00E00016           	cp0.w	[w6]
  1625  00DB90  003A0002           	bra	nz,u331
  1626  00DB92  0004DB9A           	goto	u330
              00000000           
  1627  00DB96                     u331:
  1628  00DB96  0004DBD4           	goto	lab773
              00000000           
  1629  00DB9A                     u330:
  1630                           ;queue.c: 1402: {
  1631                           
  1632                           ;queue.c: 1403: ;
  1633                           
  1634                           ;queue.c: 1406: --( pxQueue->uxMessagesWaiting )
                                 ;
  1635                           
  1636                           	line	1406
  1637  00DB9A  0097BB2F           	mov.w	[sp+((0+f19906+8)-0)],w6
  1638  00DB9C  00B001C6           	add.w	#28,w6
  1639  00DB9E  00E90B16           	dec.w	[w6],[w6]
  1640                           ;queue.c: 1423: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToSend ) )->uxNumberOfItems ==
                                  ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
  1641                           
  1642                           	line	1423
  1643  00DBA0  0097BB2F           	mov.w	[sp+((0+f19906+8)-0)],w6
  1644  00DBA2  00B00086           	add.w	#8,w6
  1645  00DBA4  00E00016           	cp0.w	[w6]
  1646  00DBA6  00320002           	bra	z,u341
  1647  00DBA8  0004DBB0           	goto	u340
              00000000           
  1648  00DBAC                     u341:
  1649  00DBAC  0004DBD0           	goto	lab774
              00000000           
  1650  00DBB0                     u340:
  1651                           ;queue.c: 1424: {
  1652                           
  1653                           ;queue.c: 1425: if( xTaskRemoveFromEventList( &(
                                  pxQueue->xTasksWaitingToSend ) ) == ( ( BaseTyp
                                 e_t ) 1 ) )
  1654                           
  1655                           	line	1425
  1656  00DBB0  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  1657  00DBB2  00B00080           	add.w	#8,w0
  1658  00DBB4  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
  1659  00DBB8  00E10061           	cp.w	w0, #1
  1660  00DBBA  003A0002           	bra	nz,u351
  1661  00DBBC  0004DBC4           	goto	u350
              00000000           
  1662  00DBC0                     u351:
  1663  00DBC0  0004DBCC           	goto	lab775
              00000000           
  1664  00DBC4                     u350:
  1665                           ;queue.c: 1426: {
  1666                           
  1667                           ;queue.c: 1427: vPortYield();
  1668                           
  1669                           	line	1427
  1670  00DBC4  0002C410           	call	(_vPortYield)
              00000000           
  1671                           ;queue.c: 1428: }
  1672                           
  1673                           	line	1428
  1674  00DBC8  0004DBCC           	goto	lab776
              00000000           
  1675                           	line	1429
  1676  00DBCC                     lab775:
  1677                           ;queue.c: 1429: else
  1678                           
  1679                           ;queue.c: 1430: {
  1680                           
  1681                           ;queue.c: 1431: ;
  1682                           
  1683                           	line	1432
  1684  00DBCC                     lab776:
  1685                           ;queue.c: 1432: }
  1686                           
  1687                           ;queue.c: 1433: }
  1688                           
  1689                           	line	1433
  1690  00DBCC  0004DBD0           	goto	lab777
              00000000           
  1691                           	line	1434
  1692  00DBD0                     lab774:
  1693                           ;queue.c: 1434: else
  1694                           
  1695                           ;queue.c: 1435: {
  1696                           
  1697                           ;queue.c: 1436: ;
  1698                           
  1699                           	line	1437
  1700  00DBD0                     lab777:
  1701                           ;queue.c: 1437: }
  1702                           
  1703                           ;queue.c: 1438: }
  1704                           
  1705                           	line	1438
  1706  00DBD0  0004DC12           	goto	lab778
              00000000           
  1707                           	line	1439
  1708  00DBD4                     lab773:
  1709                           ;queue.c: 1439: else
  1710                           
  1711                           ;queue.c: 1440: {
  1712                           
  1713                           ;queue.c: 1441: ;
  1714                           
  1715                           ;queue.c: 1445: pxQueue->u.pcReadFrom = pcOrigin
                                 alReadPosition;
  1716                           
  1717                           	line	1445
  1718  00DBD4  002FFF26           	mov.w	#((0+f19906+6)-0),w6
  1719  00DBD6  00478306           	add.w	sp,w6,w6
  1720  00DBD8  00780316           	mov.w	[w6],w6
  1721  00DBDA  002FFF47           	mov.w	#((0+f19906+8)-0),w7
  1722  00DBDC  00478387           	add.w	sp,w7,w7
  1723  00DBDE  00780297           	mov	[w7],w5
  1724  00DBE0  009802B6           	mov.w	w6,[w5+6]
  1725                           ;queue.c: 1449: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToReceive ) )->uxNumberOfItems
                                  == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 
                                 ) )
  1726                           
  1727                           	line	1449
  1728  00DBE2  0097BB2F           	mov.w	[sp+((0+f19906+8)-0)],w6
  1729  00DBE4  00B00126           	add.w	#18,w6
  1730  00DBE6  00E00016           	cp0.w	[w6]
  1731  00DBE8  00320002           	bra	z,u361
  1732  00DBEA  0004DBF2           	goto	u360
              00000000           
  1733  00DBEE                     u361:
  1734  00DBEE  0004DC12           	goto	lab779
              00000000           
  1735  00DBF2                     u360:
  1736                           ;queue.c: 1450: {
  1737                           
  1738                           ;queue.c: 1451: if( xTaskRemoveFromEventList( &(
                                  pxQueue->xTasksWaitingToReceive ) ) != ( ( Base
                                 Type_t ) 0 ) )
  1739                           
  1740                           	line	1451
  1741  00DBF2  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  1742  00DBF4  00B00120           	add.w	#18,w0
  1743  00DBF6  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
  1744  00DBFA  00E00000           	cp0.w	w0
  1745  00DBFC  00320002           	bra	z,u371
  1746  00DBFE  0004DC06           	goto	u370
              00000000           
  1747  00DC02                     u371:
  1748  00DC02  0004DC0E           	goto	lab780
              00000000           
  1749  00DC06                     u370:
  1750                           ;queue.c: 1452: {
  1751                           
  1752                           ;queue.c: 1454: vPortYield();
  1753                           
  1754                           	line	1454
  1755  00DC06  0002C410           	call	(_vPortYield)
              00000000           
  1756                           ;queue.c: 1455: }
  1757                           
  1758                           	line	1455
  1759  00DC0A  0004DC0E           	goto	lab781
              00000000           
  1760                           	line	1456
  1761  00DC0E                     lab780:
  1762                           ;queue.c: 1456: else
  1763                           
  1764                           ;queue.c: 1457: {
  1765                           
  1766                           ;queue.c: 1458: ;
  1767                           
  1768                           	line	1459
  1769  00DC0E                     lab781:
  1770                           ;queue.c: 1459: }
  1771                           
  1772                           ;queue.c: 1460: }
  1773                           
  1774                           	line	1460
  1775  00DC0E  0004DC12           	goto	lab782
              00000000           
  1776                           	line	1461
  1777  00DC12                     lab779:
  1778                           ;queue.c: 1461: else
  1779                           
  1780                           ;queue.c: 1462: {
  1781                           
  1782                           ;queue.c: 1463: ;
  1783                           
  1784                           	line	1464
  1785  00DC12                     lab782:
  1786                           	line	1465
  1787  00DC12                     lab778:
  1788                           ;queue.c: 1464: }
  1789                           
  1790                           ;queue.c: 1465: }
  1791                           
  1792                           ;queue.c: 1467: vPortExitCritical();
  1793                           
  1794                           	line	1467
  1795  00DC12  0002CA22           	call	(_vPortExitCritical)
              00000000           
  1796                           ;queue.c: 1468: return ( ( ( BaseType_t ) 1 ) );
  1797                           
  1798                           	line	1468
  1799  00DC16  00200010           	mov.w	#1,w0	;return #1 in w0
  1800  00DC18  0004DD26           	goto	lab768
              00000000           
  1801                           ;queue.c: 1469: }
  1802                           
  1803                           	line	1469
  1804  00DC1C  0004DC62           	goto	lab783
              00000000           
  1805                           	line	1470
  1806  00DC20                     lab772:
  1807                           ;queue.c: 1470: else
  1808                           
  1809                           ;queue.c: 1471: {
  1810                           
  1811                           ;queue.c: 1472: if( xTicksToWait == ( TickType_t
                                  ) 0 )
  1812                           
  1813                           	line	1472
  1814  00DC20  002FFF86           	mov.w	#((0+f19906+12)-0),w6
  1815  00DC22  00478306           	add.w	sp,w6,w6
  1816  00DC24  00E00016           	cp0.w	[w6]
  1817  00DC26  003A0002           	bra	nz,u381
  1818  00DC28  0004DC30           	goto	u380
              00000000           
  1819  00DC2C                     u381:
  1820  00DC2C  0004DC3E           	goto	lab784
              00000000           
  1821  00DC30                     u380:
  1822                           ;queue.c: 1473: {
  1823                           
  1824                           ;queue.c: 1476: vPortExitCritical();
  1825                           
  1826                           	line	1476
  1827  00DC30  0002CA22           	call	(_vPortExitCritical)
              00000000           
  1828                           ;queue.c: 1477: ;
  1829                           
  1830                           ;queue.c: 1478: return ( ( BaseType_t ) 0 );
  1831                           
  1832                           	line	1478
  1833  00DC34  00200000           	mov.w	#0,w0	;return #0 in w0
  1834  00DC36  0004DD26           	goto	lab768
              00000000           
  1835                           ;queue.c: 1479: }
  1836                           
  1837                           	line	1479
  1838  00DC3A  0004DC62           	goto	lab785
              00000000           
  1839                           	line	1480
  1840  00DC3E                     lab784:
  1841                           ;queue.c: 1480: else if( xEntryTimeSet == ( ( Ba
                                 seType_t ) 0 ) )
  1842                           
  1843  00DC3E  002FFEC6           	mov.w	#((0+f19906+0)-0),w6
  1844  00DC40  00478306           	add.w	sp,w6,w6
  1845  00DC42  00E00016           	cp0.w	[w6]
  1846  00DC44  003A0002           	bra	nz,u391
  1847  00DC46  0004DC4E           	goto	u390
              00000000           
  1848  00DC4A                     u391:
  1849  00DC4A  0004DC62           	goto	lab786
              00000000           
  1850  00DC4E                     u390:
  1851                           ;queue.c: 1481: {
  1852                           
  1853                           ;queue.c: 1484: vTaskSetTimeOutState( &xTimeOut 
                                 );
  1854                           
  1855                           	line	1484
  1856  00DC4E  002FFEE0           	mov.w	#(0+f19906+2)-0,w0
  1857  00DC50  00478000           	add.w	sp,w0,w0
  1858  00DC52  0002F534           	call	(_vTaskSetTimeOutState)	;0 bytes adjustmen
              00000000           t
  1859                           ;queue.c: 1485: xEntryTimeSet = ( ( BaseType_t )
                                  1 );
  1860                           
  1861                           	line	1485
  1862  00DC56  00200017           	mov.w	#01h,w7
  1863  00DC58  002FFEC6           	mov.w	#((0+f19906+0)-0),w6
  1864  00DC5A  00478306           	add.w	sp,w6,w6
  1865  00DC5C  00780B07           	mov.w	w7,[w6]
  1866                           ;queue.c: 1486: }
  1867                           
  1868                           	line	1486
  1869  00DC5E  0004DC62           	goto	lab787
              00000000           
  1870                           	line	1487
  1871  00DC62                     lab786:
  1872                           ;queue.c: 1487: else
  1873                           
  1874                           ;queue.c: 1488: {
  1875                           
  1876                           ;queue.c: 1490: ;
  1877                           
  1878                           	line	1491
  1879  00DC62                     lab787:
  1880  00DC62                     lab785:
  1881                           	line	1492
  1882  00DC62                     lab783:
  1883                           ;queue.c: 1491: }
  1884                           
  1885                           ;queue.c: 1492: }
  1886                           
  1887                           ;queue.c: 1493: }
  1888                           
  1889                           ;queue.c: 1494: vPortExitCritical();
  1890                           
  1891                           	line	1494
  1892  00DC62  0002CA22           	call	(_vPortExitCritical)
              00000000           
  1893                           ;queue.c: 1499: vTaskSuspendAll();
  1894                           
  1895                           	line	1499
  1896  00DC66  0002EF04           	call	(_vTaskSuspendAll)
              00000000           
  1897                           ;queue.c: 1500: vPortEnterCritical(); { if( ( px
                                 Queue )->xRxLock == ( ( BaseType_t ) -1 ) ) { ( 
                                 pxQueue )->xRxLock = ( ( BaseType_t ) 0 ); } if(
                                  ( pxQueue )->xTxLock == ( ( BaseType_t ) -1 ) )
                                  { ( pxQueue )->xTxLock = ( ( BaseType_t ) 0 ); 
                                 } } vPortEx...
  1898                           
  1899                           	line	1500
  1900  00DC6A  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  1901  00DC6E  002FFFF6           	mov.w	#-1,w6
  1902  00DC70  0097BBAF           	mov.w	[sp+((0+f19906+8)-0)],w7
  1903  00DC72  00B00227           	add.w	#34,w7
  1904  00DC74  00780297           	mov.w	[w7],w5
  1905  00DC76  00E12806           	cp.w	w5, w6
  1906  00DC78  003A0002           	bra	nz,u401
  1907  00DC7A  0004DC82           	goto	u400
              00000000           
  1908  00DC7E                     u401:
  1909  00DC7E  0004DC8C           	goto	lab788
              00000000           
  1910  00DC82                     u400:
  1911  00DC82  00200006           	mov.w	#0,w6
  1912  00DC84  002FFF47           	mov.w	#((0+f19906+8)-0),w7
  1913  00DC86  00478387           	add.w	sp,w7,w7
  1914  00DC88  00780297           	mov	[w7],w5
  1915  00DC8A  00981296           	mov.w	w6,[w5+34]
  1916  00DC8C                     lab788:
  1917  00DC8C  002FFFF6           	mov.w	#-1,w6
  1918  00DC8E  0097BBAF           	mov.w	[sp+((0+f19906+8)-0)],w7
  1919  00DC90  00B00247           	add.w	#36,w7
  1920  00DC92  00780297           	mov.w	[w7],w5
  1921  00DC94  00E12806           	cp.w	w5, w6
  1922  00DC96  003A0002           	bra	nz,u411
  1923  00DC98  0004DCA0           	goto	u410
              00000000           
  1924  00DC9C                     u411:
  1925  00DC9C  0004DCAA           	goto	lab789
              00000000           
  1926  00DCA0                     u410:
  1927  00DCA0  00200006           	mov.w	#0,w6
  1928  00DCA2  002FFF47           	mov.w	#((0+f19906+8)-0),w7
  1929  00DCA4  00478387           	add.w	sp,w7,w7
  1930  00DCA6  00780297           	mov	[w7],w5
  1931  00DCA8  009812A6           	mov.w	w6,[w5+36]
  1932  00DCAA                     lab789:
  1933  00DCAA  0002CA22           	call	(_vPortExitCritical)
              00000000           
  1934                           ;queue.c: 1503: if( xTaskCheckForTimeOut( &xTime
                                 Out, &xTicksToWait ) == ( ( BaseType_t ) 0 ) )
  1935                           
  1936                           	line	1503
  1937  00DCAE  002FFF82           	mov.w	#(0+f19906+12)-0,w2
  1938  00DCB0  00478102           	add.w	sp,w2,w2
  1939  00DCB2  002FFEE0           	mov.w	#(0+f19906+2)-0,w0
  1940  00DCB4  00478000           	add.w	sp,w0,w0
  1941  00DCB6  0002F54A           	call	(_xTaskCheckForTimeOut)	;0 bytes adjustmen
              00000000           t
  1942  00DCBA  00E00000           	cp0.w	w0
  1943  00DCBC  003A0002           	bra	nz,u421
  1944  00DCBE  0004DCC6           	goto	u420
              00000000           
  1945  00DCC2                     u421:
  1946  00DCC2  0004DD12           	goto	lab790
              00000000           
  1947  00DCC6                     u420:
  1948                           ;queue.c: 1504: {
  1949                           
  1950                           ;queue.c: 1505: if( prvIsQueueEmpty( pxQueue ) !
                                 = ( ( BaseType_t ) 0 ) )
  1951                           
  1952                           	signat	_prvIsQueueEmpty,4154
  1953                           	line	1505
  1954  00DCC6  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  1955  00DCC8  0002E190           	call	(_prvIsQueueEmpty)	;0 bytes adjustment
              00000000           
  1956  00DCCC  00E00000           	cp0.w	w0
  1957  00DCCE  00320002           	bra	z,u431
  1958  00DCD0  0004DCD8           	goto	u430
              00000000           
  1959  00DCD4                     u431:
  1960  00DCD4  0004DD04           	goto	lab791
              00000000           
  1961  00DCD8                     u430:
  1962                           ;queue.c: 1506: {
  1963                           
  1964                           ;queue.c: 1507: ;
  1965                           
  1966                           ;queue.c: 1526: vTaskPlaceOnEventList( &( pxQueu
                                 e->xTasksWaitingToReceive ), xTicksToWait );
  1967                           
  1968                           	line	1526
  1969  00DCD8  0097B94F           	mov.w	[sp+((0+f19906+12)-0)],w2
  1970  00DCDA  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  1971  00DCDC  00B00120           	add.w	#18,w0
  1972  00DCDE  0002F2CA           	call	(_vTaskPlaceOnEventList)	;0 bytes adjustme
              00000000           nt
  1973                           ;queue.c: 1527: prvUnlockQueue( pxQueue );
  1974                           
  1975                           	line	1527
  1976  00DCE2  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  1977  00DCE4  0002E0B4           	call	(_prvUnlockQueue)	;0 bytes adjustment
              00000000           
  1978                           ;queue.c: 1528: if( xTaskResumeAll() == ( ( Base
                                 Type_t ) 0 ) )
  1979                           
  1980                           	line	1528
  1981  00DCE8  0002EF10           	call	(_xTaskResumeAll)
              00000000           
  1982  00DCEC  00E00000           	cp0.w	w0
  1983  00DCEE  003A0002           	bra	nz,u441
  1984  00DCF0  0004DCF8           	goto	u440
              00000000           
  1985  00DCF4                     u441:
  1986  00DCF4  0004DD00           	goto	lab792
              00000000           
  1987  00DCF8                     u440:
  1988                           ;queue.c: 1529: {
  1989                           
  1990                           ;queue.c: 1530: vPortYield();
  1991                           
  1992                           	line	1530
  1993  00DCF8  0002C410           	call	(_vPortYield)
              00000000           
  1994                           ;queue.c: 1531: }
  1995                           
  1996                           	line	1531
  1997  00DCFC  0004DD00           	goto	lab793
              00000000           
  1998                           	line	1532
  1999  00DD00                     lab792:
  2000                           ;queue.c: 1532: else
  2001                           
  2002                           ;queue.c: 1533: {
  2003                           
  2004                           ;queue.c: 1534: ;
  2005                           
  2006                           	line	1535
  2007  00DD00                     lab793:
  2008                           ;queue.c: 1535: }
  2009                           
  2010                           ;queue.c: 1536: }
  2011                           
  2012                           	line	1536
  2013  00DD00  0004DD0E           	goto	lab794
              00000000           
  2014                           	line	1537
  2015  00DD04                     lab791:
  2016                           ;queue.c: 1537: else
  2017                           
  2018                           ;queue.c: 1538: {
  2019                           
  2020                           ;queue.c: 1540: prvUnlockQueue( pxQueue );
  2021                           
  2022                           	line	1540
  2023  00DD04  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  2024  00DD06  0002E0B4           	call	(_prvUnlockQueue)	;0 bytes adjustment
              00000000           
  2025                           ;queue.c: 1541: ( void ) xTaskResumeAll();
  2026                           
  2027                           	line	1541
  2028  00DD0A  0002EF10           	call	(_xTaskResumeAll)
              00000000           
  2029                           	line	1542
  2030  00DD0E                     lab794:
  2031                           ;queue.c: 1542: }
  2032                           
  2033                           ;queue.c: 1543: }
  2034                           
  2035                           	line	1543
  2036  00DD0E  0004DD22           	goto	lab795
              00000000           
  2037                           	line	1544
  2038  00DD12                     lab790:
  2039                           ;queue.c: 1544: else
  2040                           
  2041                           ;queue.c: 1545: {
  2042                           
  2043                           ;queue.c: 1546: prvUnlockQueue( pxQueue );
  2044                           
  2045                           	line	1546
  2046  00DD12  0097B82F           	mov.w	[sp+((0+f19906+8)-0)],w0
  2047  00DD14  0002E0B4           	call	(_prvUnlockQueue)	;0 bytes adjustment
              00000000           
  2048                           ;queue.c: 1547: ( void ) xTaskResumeAll();
  2049                           
  2050                           	line	1547
  2051  00DD18  0002EF10           	call	(_xTaskResumeAll)
              00000000           
  2052                           ;queue.c: 1548: ;
  2053                           
  2054                           ;queue.c: 1549: return ( ( BaseType_t ) 0 );
  2055                           
  2056                           	line	1549
  2057  00DD1C  00200000           	mov.w	#0,w0	;return #0 in w0
  2058  00DD1E  0004DD26           	goto	lab768
              00000000           
  2059                           	line	1550
  2060  00DD22                     lab795:
  2061                           ;queue.c: 1550: }
  2062                           
  2063                           ;queue.c: 1551: }
  2064                           
  2065                           	line	1551
  2066  00DD22  0004DB64           	goto	lab769
              00000000           
  2067  00DD26                     lab770:
  2068                           ;queue.c: 1552: }
  2069                           
  2070                           	line	1552
  2071  00DD26                     lab768:
  2072                           	global	_xQueueGenericReceive
  2073                           
  2074  00DD26  00B1014F           	sub.w	#20,sp
  2075  00DD28  00060000           	return
  2076                           	line	1369
  2077                           
  2078  00DD2A                     f19901:
  2079                           
  2080  00DD2A  00B0014F           	add.w	#20,sp
  2081  00DD2C  0004DB3E           	goto	f19900
              00000000           
  2082  000000                     f19906	equ	-20		;stack offset for auto's
  2083  000000                     f19903	equ	-24		;stack offset for parameters
  2084                           	line	0
  2085                           	global	 __end_of_xQueueGenericReceive
  2086  00DD30                     __end_of_xQueueGenericReceive:
  2087                           	global	_xQueueReceiveFromISR
  2088                           	signat	_xQueueReceiveFromISR,12346
  2089                           	line	1556
  2090  00DD30                     _xQueueReceiveFromISR:
  2091  00DD30  0004DDFA           	goto	f19911
              00000000           
  2092  00DD34                     f19910:
  2093                           
  2094                           ;queue.c: 1555: BaseType_t xQueueReceiveFromISR(
                                  QueueHandle_t xQueue, void * const pvBuffer, Ba
                                 seType_t * const pxHigherPriorityTaskWoken )
  2095                           
  2096                           ;queue.c: 1556: {
  2097                           
  2098                           ;queue.c: 1557: BaseType_t xReturn;
  2099                           
  2100                           ;queue.c: 1558: UBaseType_t uxSavedInterruptStat
                                 us;
  2101                           
  2102                           ;queue.c: 1559: Queue_t * const pxQueue = ( Queu
                                 e_t * ) xQueue;
  2103                           
  2104                           	line	1559
  2105  00DD34  002FFF66           	mov.w	#((0+f19916+4)-0),w6
  2106  00DD36  00478306           	add.w	sp,w6,w6
  2107  00DD38  00780B00           	mov.w	w0,[w6]
  2108                           ;queue.c: 1561: ;
  2109                           
  2110                           ;queue.c: 1562: ;
  2111                           
  2112                           ;queue.c: 1578: ;
  2113                           
  2114                           ;queue.c: 1580: uxSavedInterruptStatus = 0;
  2115                           
  2116                           	line	1580
  2117  00DD3A  00200007           	mov.w	#0,w7
  2118  00DD3C  002FFF46           	mov.w	#((0+f19916+2)-0),w6
  2119  00DD3E  00478306           	add.w	sp,w6,w6
  2120  00DD40  00780B07           	mov.w	w7,[w6]
  2121                           ;queue.c: 1581: {
  2122                           
  2123                           ;queue.c: 1583: if( pxQueue->uxMessagesWaiting >
                                  ( UBaseType_t ) 0 )
  2124                           
  2125                           ;_pxHigherPriorityTaskWoken stored from w4
  2126                           	line	1583
  2127  00DD42  002FFF86           	mov.w	#((0+f19916+6)-0),w6
  2128  00DD44  00478306           	add.w	sp,w6,w6
  2129  00DD46  00780B04           	mov.w	w4,[w6]
  2130                           ;_pvBuffer stored from w2
  2131  00DD48  002FFFA6           	mov.w	#((0+f19916+8)-0),w6
  2132  00DD4A  00478306           	add.w	sp,w6,w6
  2133  00DD4C  00780B02           	mov.w	w2,[w6]
  2134                           ;_xQueue stored from w0
  2135  00DD4E  002FFFC6           	mov.w	#((0+f19916+10)-0),w6
  2136  00DD50  00478306           	add.w	sp,w6,w6
  2137  00DD52  00780B00           	mov.w	w0,[w6]
  2138  00DD54  0097BB3F           	mov.w	[sp+((0+f19916+4)-0)],w6
  2139  00DD56  00B001C6           	add.w	#28,w6
  2140  00DD58  00E00016           	cp0.w	[w6]
  2141  00DD5A  00320002           	bra	z,u451
  2142  00DD5C  0004DD64           	goto	u450
              00000000           
  2143  00DD60                     u451:
  2144  00DD60  0004DDE6           	goto	lab797
              00000000           
  2145  00DD64                     u450:
  2146                           ;queue.c: 1584: {
  2147                           
  2148                           ;queue.c: 1585: ;
  2149                           
  2150                           ;queue.c: 1587: prvCopyDataFromQueue( pxQueue, p
                                 vBuffer );
  2151                           
  2152                           	line	1587
  2153  00DD64  0097B95F           	mov.w	[sp+((0+f19916+8)-0)],w2
  2154  00DD66  0097B83F           	mov.w	[sp+((0+f19916+4)-0)],w0
  2155  00DD68  0002E042           	call	(_prvCopyDataFromQueue)	;0 bytes adjustmen
              00000000           t
  2156                           ;queue.c: 1588: --( pxQueue->uxMessagesWaiting )
                                 ;
  2157                           
  2158                           	line	1588
  2159  00DD6C  0097BB3F           	mov.w	[sp+((0+f19916+4)-0)],w6
  2160  00DD6E  00B001C6           	add.w	#28,w6
  2161  00DD70  00E90B16           	dec.w	[w6],[w6]
  2162                           ;queue.c: 1594: if( pxQueue->xRxLock == ( ( Base
                                 Type_t ) -1 ) )
  2163                           
  2164                           	line	1594
  2165  00DD72  002FFFF6           	mov.w	#-1,w6
  2166  00DD74  0097BBBF           	mov.w	[sp+((0+f19916+4)-0)],w7
  2167  00DD76  00B00227           	add.w	#34,w7
  2168  00DD78  00780297           	mov.w	[w7],w5
  2169  00DD7A  00E12806           	cp.w	w5, w6
  2170  00DD7C  003A0002           	bra	nz,u461
  2171  00DD7E  0004DD86           	goto	u460
              00000000           
  2172  00DD82                     u461:
  2173  00DD82  0004DDD4           	goto	lab798
              00000000           
  2174  00DD86                     u460:
  2175                           ;queue.c: 1595: {
  2176                           
  2177                           ;queue.c: 1596: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToSend ) )->uxNumberOfItems ==
                                  ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
  2178                           
  2179                           	line	1596
  2180  00DD86  0097BB3F           	mov.w	[sp+((0+f19916+4)-0)],w6
  2181  00DD88  00B00086           	add.w	#8,w6
  2182  00DD8A  00E00016           	cp0.w	[w6]
  2183  00DD8C  00320002           	bra	z,u471
  2184  00DD8E  0004DD96           	goto	u470
              00000000           
  2185  00DD92                     u471:
  2186  00DD92  0004DDD0           	goto	lab799
              00000000           
  2187  00DD96                     u470:
  2188                           ;queue.c: 1597: {
  2189                           
  2190                           ;queue.c: 1598: if( xTaskRemoveFromEventList( &(
                                  pxQueue->xTasksWaitingToSend ) ) != ( ( BaseTyp
                                 e_t ) 0 ) )
  2191                           
  2192                           	line	1598
  2193  00DD96  0097B83F           	mov.w	[sp+((0+f19916+4)-0)],w0
  2194  00DD98  00B00080           	add.w	#8,w0
  2195  00DD9A  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
  2196  00DD9E  00E00000           	cp0.w	w0
  2197  00DDA0  00320002           	bra	z,u481
  2198  00DDA2  0004DDAA           	goto	u480
              00000000           
  2199  00DDA6                     u481:
  2200  00DDA6  0004DDCC           	goto	lab800
              00000000           
  2201  00DDAA                     u480:
  2202                           ;queue.c: 1599: {
  2203                           
  2204                           ;queue.c: 1602: if( pxHigherPriorityTaskWoken !=
                                  (0) )
  2205                           
  2206                           	line	1602
  2207  00DDAA  002FFF86           	mov.w	#((0+f19916+6)-0),w6
  2208  00DDAC  00478306           	add.w	sp,w6,w6
  2209  00DDAE  00E00016           	cp0.w	[w6]
  2210  00DDB0  00320002           	bra	z,u491
  2211  00DDB2  0004DDBA           	goto	u490
              00000000           
  2212  00DDB6                     u491:
  2213  00DDB6  0004DDC8           	goto	lab801
              00000000           
  2214  00DDBA                     u490:
  2215                           ;queue.c: 1603: {
  2216                           
  2217                           ;queue.c: 1604: *pxHigherPriorityTaskWoken = ( (
                                  BaseType_t ) 1 );
  2218                           
  2219                           	line	1604
  2220  00DDBA  002FFF86           	mov.w	#((0+f19916+6)-0),w6
  2221  00DDBC  00478306           	add.w	sp,w6,w6
  2222  00DDBE  00780316           	mov.w	[w6],w6
  2223  00DDC0  00200017           	mov.w	#01h,w7
  2224  00DDC2  00780B07           	mov.w	w7,[w6]
  2225                           ;queue.c: 1605: }
  2226                           
  2227                           	line	1605
  2228  00DDC4  0004DDC8           	goto	lab802
              00000000           
  2229                           	line	1606
  2230  00DDC8                     lab801:
  2231                           ;queue.c: 1606: else
  2232                           
  2233                           ;queue.c: 1607: {
  2234                           
  2235                           ;queue.c: 1608: ;
  2236                           
  2237                           	line	1609
  2238  00DDC8                     lab802:
  2239                           ;queue.c: 1609: }
  2240                           
  2241                           ;queue.c: 1610: }
  2242                           
  2243                           	line	1610
  2244  00DDC8  0004DDCC           	goto	lab803
              00000000           
  2245                           	line	1611
  2246  00DDCC                     lab800:
  2247                           ;queue.c: 1611: else
  2248                           
  2249                           ;queue.c: 1612: {
  2250                           
  2251                           ;queue.c: 1613: ;
  2252                           
  2253                           	line	1614
  2254  00DDCC                     lab803:
  2255                           ;queue.c: 1614: }
  2256                           
  2257                           ;queue.c: 1615: }
  2258                           
  2259                           	line	1615
  2260  00DDCC  0004DDD0           	goto	lab804
              00000000           
  2261                           	line	1616
  2262  00DDD0                     lab799:
  2263                           ;queue.c: 1616: else
  2264                           
  2265                           ;queue.c: 1617: {
  2266                           
  2267                           ;queue.c: 1618: ;
  2268                           
  2269                           	line	1619
  2270  00DDD0                     lab804:
  2271                           ;queue.c: 1619: }
  2272                           
  2273                           ;queue.c: 1620: }
  2274                           
  2275                           	line	1620
  2276  00DDD0  0004DDDA           	goto	lab805
              00000000           
  2277                           	line	1621
  2278  00DDD4                     lab798:
  2279                           ;queue.c: 1621: else
  2280                           
  2281                           ;queue.c: 1622: {
  2282                           
  2283                           ;queue.c: 1625: ++( pxQueue->xRxLock );
  2284                           
  2285                           	line	1625
  2286  00DDD4  0097BB3F           	mov.w	[sp+((0+f19916+4)-0)],w6
  2287  00DDD6  00B00226           	add.w	#34,w6
  2288  00DDD8  00E80B16           	inc.w	[w6],[w6]
  2289                           	line	1626
  2290  00DDDA                     lab805:
  2291                           ;queue.c: 1626: }
  2292                           
  2293                           ;queue.c: 1628: xReturn = ( ( ( BaseType_t ) 1 )
                                  );
  2294                           
  2295                           	line	1628
  2296  00DDDA  00200017           	mov.w	#01h,w7
  2297  00DDDC  002FFF26           	mov.w	#((0+f19916+0)-0),w6
  2298  00DDDE  00478306           	add.w	sp,w6,w6
  2299  00DDE0  00780B07           	mov.w	w7,[w6]
  2300                           ;queue.c: 1629: }
  2301                           
  2302                           	line	1629
  2303  00DDE2  0004DDEE           	goto	lab806
              00000000           
  2304                           	line	1630
  2305  00DDE6                     lab797:
  2306                           ;queue.c: 1630: else
  2307                           
  2308                           ;queue.c: 1631: {
  2309                           
  2310                           ;queue.c: 1632: xReturn = ( ( ( BaseType_t ) 0 )
                                  );
  2311                           
  2312                           	line	1632
  2313  00DDE6  00200007           	mov.w	#0,w7
  2314  00DDE8  002FFF26           	mov.w	#((0+f19916+0)-0),w6
  2315  00DDEA  00478306           	add.w	sp,w6,w6
  2316  00DDEC  00780B07           	mov.w	w7,[w6]
  2317                           ;queue.c: 1633: ;
  2318                           
  2319                           	line	1634
  2320  00DDEE                     lab806:
  2321                           ;queue.c: 1634: }
  2322                           
  2323                           ;queue.c: 1635: }
  2324                           
  2325                           ;queue.c: 1636: ( void ) uxSavedInterruptStatus;
  2326                           
  2327                           ;queue.c: 1638: return xReturn;
  2328                           
  2329                           	line	1638
  2330  00DDEE  0097B81F           	mov.w	[sp+((0+f19916+0)-0)], w0
  2331  00DDF0  00780000           	mov.w	w0,w0
  2332  00DDF2  0004DDF6           	goto	lab796
              00000000           
  2333                           ;queue.c: 1639: }
  2334                           
  2335                           	line	1639
  2336  00DDF6                     lab796:
  2337                           	global	_xQueueReceiveFromISR
  2338                           
  2339  00DDF6  00B100EF           	sub.w	#14,sp
  2340  00DDF8  00060000           	return
  2341                           	line	1556
  2342                           
  2343  00DDFA                     f19911:
  2344                           
  2345  00DDFA  00B000EF           	add.w	#14,sp
  2346  00DDFC  0004DD34           	goto	f19910
              00000000           
  2347  000000                     f19916	equ	-14		;stack offset for auto's
  2348  000000                     f19913	equ	-18		;stack offset for parameters
  2349                           	line	0
  2350                           	global	 __end_of_xQueueReceiveFromISR
  2351  00DE00                     __end_of_xQueueReceiveFromISR:
  2352                           	global	_xQueuePeekFromISR
  2353                           	signat	_xQueuePeekFromISR,8250
  2354                           	line	1643
  2355  00DE00                     _xQueuePeekFromISR:
  2356  00DE00  0004DE6E           	goto	f19921
              00000000           
  2357  00DE04                     f19920:
  2358                           
  2359                           ;queue.c: 1642: BaseType_t xQueuePeekFromISR( Qu
                                 eueHandle_t xQueue, void * const pvBuffer )
  2360                           
  2361                           ;queue.c: 1643: {
  2362                           
  2363                           ;queue.c: 1644: BaseType_t xReturn;
  2364                           
  2365                           ;queue.c: 1645: UBaseType_t uxSavedInterruptStat
                                 us;
  2366                           
  2367                           ;queue.c: 1646: int8_t *pcOriginalReadPosition;
  2368                           
  2369                           ;queue.c: 1647: Queue_t * const pxQueue = ( Queu
                                 e_t * ) xQueue;
  2370                           
  2371                           	line	1647
  2372  00DE04  002FFF86           	mov.w	#((0+f19926+6)-0),w6
  2373  00DE06  00478306           	add.w	sp,w6,w6
  2374  00DE08  00780B00           	mov.w	w0,[w6]
  2375                           ;queue.c: 1649: ;
  2376                           
  2377                           ;queue.c: 1650: ;
  2378                           
  2379                           ;queue.c: 1651: ;
  2380                           
  2381                           ;queue.c: 1667: ;
  2382                           
  2383                           ;queue.c: 1669: uxSavedInterruptStatus = 0;
  2384                           
  2385                           	line	1669
  2386  00DE0A  00200007           	mov.w	#0,w7
  2387  00DE0C  002FFF46           	mov.w	#((0+f19926+2)-0),w6
  2388  00DE0E  00478306           	add.w	sp,w6,w6
  2389  00DE10  00780B07           	mov.w	w7,[w6]
  2390                           ;queue.c: 1670: {
  2391                           
  2392                           ;queue.c: 1672: if( pxQueue->uxMessagesWaiting >
                                  ( UBaseType_t ) 0 )
  2393                           
  2394                           ;_pvBuffer stored from w2
  2395                           	line	1672
  2396  00DE12  002FFFA6           	mov.w	#((0+f19926+8)-0),w6
  2397  00DE14  00478306           	add.w	sp,w6,w6
  2398  00DE16  00780B02           	mov.w	w2,[w6]
  2399                           ;_xQueue stored from w0
  2400  00DE18  002FFFC6           	mov.w	#((0+f19926+10)-0),w6
  2401  00DE1A  00478306           	add.w	sp,w6,w6
  2402  00DE1C  00780B00           	mov.w	w0,[w6]
  2403  00DE1E  0097BB4F           	mov.w	[sp+((0+f19926+6)-0)],w6
  2404  00DE20  00B001C6           	add.w	#28,w6
  2405  00DE22  00E00016           	cp0.w	[w6]
  2406  00DE24  00320002           	bra	z,u501
  2407  00DE26  0004DE2E           	goto	u500
              00000000           
  2408  00DE2A                     u501:
  2409  00DE2A  0004DE5A           	goto	lab808
              00000000           
  2410  00DE2E                     u500:
  2411                           ;queue.c: 1673: {
  2412                           
  2413                           ;queue.c: 1674: ;
  2414                           
  2415                           ;queue.c: 1678: pcOriginalReadPosition = pxQueue
                                 ->u.pcReadFrom;
  2416                           
  2417                           	line	1678
  2418  00DE2E  0097BBCF           	mov.w	[sp+((0+f19926+6)-0)],w7
  2419  00DE30  00B00067           	add.w	#6,w7
  2420  00DE32  002FFF66           	mov.w	#((0+f19926+4)-0),w6
  2421  00DE34  00478306           	add.w	sp,w6,w6
  2422  00DE36  00780B17           	mov.w	[w7],[w6]
  2423                           ;queue.c: 1679: prvCopyDataFromQueue( pxQueue, p
                                 vBuffer );
  2424                           
  2425                           	line	1679
  2426  00DE38  0097B95F           	mov.w	[sp+((0+f19926+8)-0)],w2
  2427  00DE3A  0097B84F           	mov.w	[sp+((0+f19926+6)-0)],w0
  2428  00DE3C  0002E042           	call	(_prvCopyDataFromQueue)	;0 bytes adjustmen
              00000000           t
  2429                           ;queue.c: 1680: pxQueue->u.pcReadFrom = pcOrigin
                                 alReadPosition;
  2430                           
  2431                           	line	1680
  2432  00DE40  002FFF66           	mov.w	#((0+f19926+4)-0),w6
  2433  00DE42  00478306           	add.w	sp,w6,w6
  2434  00DE44  00780316           	mov.w	[w6],w6
  2435  00DE46  002FFF87           	mov.w	#((0+f19926+6)-0),w7
  2436  00DE48  00478387           	add.w	sp,w7,w7
  2437  00DE4A  00780297           	mov	[w7],w5
  2438  00DE4C  009802B6           	mov.w	w6,[w5+6]
  2439                           ;queue.c: 1682: xReturn = ( ( ( BaseType_t ) 1 )
                                  );
  2440                           
  2441                           	line	1682
  2442  00DE4E  00200017           	mov.w	#01h,w7
  2443  00DE50  002FFF26           	mov.w	#((0+f19926+0)-0),w6
  2444  00DE52  00478306           	add.w	sp,w6,w6
  2445  00DE54  00780B07           	mov.w	w7,[w6]
  2446                           ;queue.c: 1683: }
  2447                           
  2448                           	line	1683
  2449  00DE56  0004DE62           	goto	lab809
              00000000           
  2450                           	line	1684
  2451  00DE5A                     lab808:
  2452                           ;queue.c: 1684: else
  2453                           
  2454                           ;queue.c: 1685: {
  2455                           
  2456                           ;queue.c: 1686: xReturn = ( ( ( BaseType_t ) 0 )
                                  );
  2457                           
  2458                           	line	1686
  2459  00DE5A  00200007           	mov.w	#0,w7
  2460  00DE5C  002FFF26           	mov.w	#((0+f19926+0)-0),w6
  2461  00DE5E  00478306           	add.w	sp,w6,w6
  2462  00DE60  00780B07           	mov.w	w7,[w6]
  2463                           ;queue.c: 1687: ;
  2464                           
  2465                           	line	1688
  2466  00DE62                     lab809:
  2467                           ;queue.c: 1688: }
  2468                           
  2469                           ;queue.c: 1689: }
  2470                           
  2471                           ;queue.c: 1690: ( void ) uxSavedInterruptStatus;
  2472                           
  2473                           ;queue.c: 1692: return xReturn;
  2474                           
  2475                           	line	1692
  2476  00DE62  0097B81F           	mov.w	[sp+((0+f19926+0)-0)], w0
  2477  00DE64  00780000           	mov.w	w0,w0
  2478  00DE66  0004DE6A           	goto	lab807
              00000000           
  2479                           ;queue.c: 1693: }
  2480                           
  2481                           	line	1693
  2482  00DE6A                     lab807:
  2483                           	global	_xQueuePeekFromISR
  2484                           
  2485  00DE6A  00B100EF           	sub.w	#14,sp
  2486  00DE6C  00060000           	return
  2487                           	line	1643
  2488                           
  2489  00DE6E                     f19921:
  2490                           
  2491  00DE6E  00B000EF           	add.w	#14,sp
  2492  00DE70  0004DE04           	goto	f19920
              00000000           
  2493  000000                     f19926	equ	-14		;stack offset for auto's
  2494  000000                     f19923	equ	-18		;stack offset for parameters
  2495                           	line	0
  2496                           	global	 __end_of_xQueuePeekFromISR
  2497  00DE74                     __end_of_xQueuePeekFromISR:
  2498                           	global	_uxQueueMessagesWaiting
  2499                           	signat	_uxQueueMessagesWaiting,4154
  2500                           	line	1697
  2501  00DE74                     _uxQueueMessagesWaiting:
  2502  00DE74  0004DE9C           	goto	f19931
              00000000           
  2503  00DE78                     f19930:
  2504                           
  2505                           ;queue.c: 1696: UBaseType_t uxQueueMessagesWaiti
                                 ng( const QueueHandle_t xQueue )
  2506                           
  2507                           ;queue.c: 1697: {
  2508                           
  2509                           ;queue.c: 1698: UBaseType_t uxReturn;
  2510                           
  2511                           ;queue.c: 1700: ;
  2512                           
  2513                           ;queue.c: 1702: vPortEnterCritical();
  2514                           
  2515                           ;_xQueue stored from w0
  2516                           	line	1702
  2517  00DE78  002FFFC6           	mov.w	#((0+f19936+2)-0),w6
  2518  00DE7A  00478306           	add.w	sp,w6,w6
  2519  00DE7C  00780B00           	mov.w	w0,[w6]
  2520  00DE7E  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  2521                           ;queue.c: 1703: {
  2522                           
  2523                           ;queue.c: 1704: uxReturn = ( ( Queue_t * ) xQueu
                                 e )->uxMessagesWaiting;
  2524                           
  2525                           	line	1704
  2526  00DE82  0097BBEF           	mov.w	[sp+((0+f19936+2)-0)],w7
  2527  00DE84  00B001C7           	add.w	#28,w7
  2528  00DE86  002FFFA6           	mov.w	#((0+f19936+0)-0),w6
  2529  00DE88  00478306           	add.w	sp,w6,w6
  2530  00DE8A  00780B17           	mov.w	[w7],[w6]
  2531                           ;queue.c: 1705: }
  2532                           
  2533                           ;queue.c: 1706: vPortExitCritical();
  2534                           
  2535                           	line	1706
  2536  00DE8C  0002CA22           	call	(_vPortExitCritical)
              00000000           
  2537                           ;queue.c: 1708: return uxReturn;
  2538                           
  2539                           	line	1708
  2540  00DE90  0097B85F           	mov.w	[sp+((0+f19936+0)-0)], w0
  2541  00DE92  00780000           	mov.w	w0,w0
  2542  00DE94  0004DE98           	goto	lab810
              00000000           
  2543                           ;queue.c: 1709: }
  2544                           
  2545                           	line	1709
  2546  00DE98                     lab810:
  2547                           	global	_uxQueueMessagesWaiting
  2548                           
  2549  00DE98  00B1006F           	sub.w	#6,sp
  2550  00DE9A  00060000           	return
  2551                           	line	1697
  2552                           
  2553  00DE9C                     f19931:
  2554                           
  2555  00DE9C  00B0006F           	add.w	#6,sp
  2556  00DE9E  0004DE78           	goto	f19930
              00000000           
  2557  000000                     f19936	equ	-6		;stack offset for auto's
  2558  000000                     f19933	equ	-10		;stack offset for parameters
  2559                           	line	0
  2560                           	global	 __end_of_uxQueueMessagesWaiting
  2561  00DEA2                     __end_of_uxQueueMessagesWaiting:
  2562                           	global	_uxQueueSpacesAvailable
  2563                           	signat	_uxQueueSpacesAvailable,4154
  2564                           	line	1713
  2565  00DEA2                     _uxQueueSpacesAvailable:
  2566  00DEA2  0004DEDA           	goto	f19941
              00000000           
  2567  00DEA6                     f19940:
  2568                           
  2569                           ;queue.c: 1712: UBaseType_t uxQueueSpacesAvailab
                                 le( const QueueHandle_t xQueue )
  2570                           
  2571                           ;queue.c: 1713: {
  2572                           
  2573                           ;queue.c: 1714: UBaseType_t uxReturn;
  2574                           
  2575                           ;queue.c: 1715: Queue_t *pxQueue;
  2576                           
  2577                           ;queue.c: 1717: pxQueue = ( Queue_t * ) xQueue;
  2578                           
  2579                           	line	1717
  2580  00DEA6  002FFFA6           	mov.w	#((0+f19946+2)-0),w6
  2581  00DEA8  00478306           	add.w	sp,w6,w6
  2582  00DEAA  00780B00           	mov.w	w0,[w6]
  2583                           ;queue.c: 1718: ;
  2584                           
  2585                           ;queue.c: 1720: vPortEnterCritical();
  2586                           
  2587                           ;_xQueue stored from w0
  2588                           	line	1720
  2589  00DEAC  002FFFC6           	mov.w	#((0+f19946+4)-0),w6
  2590  00DEAE  00478306           	add.w	sp,w6,w6
  2591  00DEB0  00780B00           	mov.w	w0,[w6]
  2592  00DEB2  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  2593                           ;queue.c: 1721: {
  2594                           
  2595                           ;queue.c: 1722: uxReturn = pxQueue->uxLength - p
                                 xQueue->uxMessagesWaiting;
  2596                           
  2597                           	line	1722
  2598  00DEB6  0097BBDF           	mov.w	[sp+((0+f19946+2)-0)],w7
  2599  00DEB8  00B001C7           	add.w	#28,w7
  2600  00DEBA  00780317           	mov.w	[w7],w6
  2601  00DEBC  0097BBDF           	mov.w	[sp+((0+f19946+2)-0)],w7
  2602  00DEBE  00B001E7           	add.w	#30,w7
  2603  00DEC0  00780297           	mov.w	[w7],w5
  2604  00DEC2  00528286           	sub.w	w5,w6,w5
  2605  00DEC4  002FFF86           	mov.w	#((0+f19946+0)-0),w6
  2606  00DEC6  00478306           	add.w	sp,w6,w6
  2607  00DEC8  00780B05           	mov.w	w5,[w6]
  2608                           ;queue.c: 1723: }
  2609                           
  2610                           ;queue.c: 1724: vPortExitCritical();
  2611                           
  2612                           	line	1724
  2613  00DECA  0002CA22           	call	(_vPortExitCritical)
              00000000           
  2614                           ;queue.c: 1726: return uxReturn;
  2615                           
  2616                           	line	1726
  2617  00DECE  0097B84F           	mov.w	[sp+((0+f19946+0)-0)], w0
  2618  00DED0  00780000           	mov.w	w0,w0
  2619  00DED2  0004DED6           	goto	lab811
              00000000           
  2620                           ;queue.c: 1727: }
  2621                           
  2622                           	line	1727
  2623  00DED6                     lab811:
  2624                           	global	_uxQueueSpacesAvailable
  2625                           
  2626  00DED6  00B1008F           	sub.w	#8,sp
  2627  00DED8  00060000           	return
  2628                           	line	1713
  2629                           
  2630  00DEDA                     f19941:
  2631                           
  2632  00DEDA  00B0008F           	add.w	#8,sp
  2633  00DEDC  0004DEA6           	goto	f19940
              00000000           
  2634  000000                     f19946	equ	-8		;stack offset for auto's
  2635  000000                     f19943	equ	-12		;stack offset for parameters
  2636                           	line	0
  2637                           	global	 __end_of_uxQueueSpacesAvailable
  2638  00DEE0                     __end_of_uxQueueSpacesAvailable:
  2639                           	global	_uxQueueMessagesWaitingFromISR
  2640                           	signat	_uxQueueMessagesWaitingFromISR,4154
  2641                           	line	1731
  2642  00DEE0                     _uxQueueMessagesWaitingFromISR:
  2643  00DEE0  0004DEFA           	goto	f19951
              00000000           
  2644  00DEE4                     f19950:
  2645                           
  2646                           ;queue.c: 1730: UBaseType_t uxQueueMessagesWaiti
                                 ngFromISR( const QueueHandle_t xQueue )
  2647                           
  2648                           ;queue.c: 1731: {
  2649                           
  2650                           ;queue.c: 1732: UBaseType_t uxReturn;
  2651                           
  2652                           ;queue.c: 1734: ;
  2653                           
  2654                           ;queue.c: 1736: uxReturn = ( ( Queue_t * ) xQueu
                                 e )->uxMessagesWaiting;
  2655                           
  2656                           	line	1736
  2657  00DEE4  00780380           	mov.w	w0,w7
  2658  00DEE6  00B001C7           	add.w	#28,w7
  2659  00DEE8  002FFFC6           	mov.w	#((0+f19956+0)-0),w6
  2660  00DEEA  00478306           	add.w	sp,w6,w6
  2661  00DEEC  00780B17           	mov.w	[w7],[w6]
  2662                           ;queue.c: 1738: return uxReturn;
  2663                           
  2664                           	line	1738
  2665  00DEEE  0097BB6F           	mov.w	[sp+((0+f19956+0)-0)], w6
  2666  00DEF0  00780006           	mov.w	w6,w0
  2667  00DEF2  0004DEF6           	goto	lab812
              00000000           
  2668                           ;queue.c: 1739: }
  2669                           
  2670                           	line	1739
  2671  00DEF6                     lab812:
  2672                           	global	_uxQueueMessagesWaitingFromISR
  2673                           
  2674  00DEF6  00B1004F           	sub.w	#4,sp
  2675  00DEF8  00060000           	return
  2676                           	line	1731
  2677                           
  2678  00DEFA                     f19951:
  2679                           
  2680  00DEFA  00B0004F           	add.w	#4,sp
  2681  00DEFC  0004DEE4           	goto	f19950
              00000000           
  2682  000000                     f19956	equ	-4		;stack offset for auto's
  2683  000000                     f19953	equ	-8		;stack offset for parameters
  2684                           	line	0
  2685                           	global	 __end_of_uxQueueMessagesWaitingFromISR
  2686  00DF00                     __end_of_uxQueueMessagesWaitingFromISR:
  2687                           	global	_vQueueDelete
  2688                           	signat	_vQueueDelete,4154
  2689                           	line	1743
  2690  00DF00                     _vQueueDelete:
  2691  00DF00  0004DF1A           	goto	f19961
              00000000           
  2692  00DF04                     f19960:
  2693                           
  2694                           ;queue.c: 1742: void vQueueDelete( QueueHandle_t
                                  xQueue )
  2695                           
  2696                           ;queue.c: 1743: {
  2697                           
  2698                           ;queue.c: 1744: Queue_t * const pxQueue = ( Queu
                                 e_t * ) xQueue;
  2699                           
  2700                           	line	1744
  2701  00DF04  002FFFA6           	mov.w	#((0+f19966+0)-0),w6
  2702  00DF06  00478306           	add.w	sp,w6,w6
  2703  00DF08  00780B00           	mov.w	w0,[w6]
  2704                           ;queue.c: 1746: ;
  2705                           
  2706                           ;queue.c: 1748: ;
  2707                           
  2708                           ;queue.c: 1754: vPortFree( pxQueue );
  2709                           
  2710                           	global	_vPortFree
  2711                           	signat	_vPortFree,4154
  2712                           ;_xQueue stored from w0
  2713                           	line	1754
  2714  00DF0A  002FFFC6           	mov.w	#((0+f19966+2)-0),w6
  2715  00DF0C  00478306           	add.w	sp,w6,w6
  2716  00DF0E  00780B00           	mov.w	w0,[w6]
  2717  00DF10  0097B85F           	mov.w	[sp+((0+f19966+0)-0)],w0
  2718  00DF12  0002C69C           	call	(_vPortFree)	;0 bytes adjustment
              00000000           
  2719                           ;queue.c: 1755: }
  2720                           
  2721                           	line	1755
  2722  00DF16                     lab813:
  2723                           	global	_vQueueDelete
  2724                           
  2725  00DF16  00B1006F           	sub.w	#6,sp
  2726  00DF18  00060000           	return
  2727                           	line	1743
  2728                           
  2729  00DF1A                     f19961:
  2730                           
  2731  00DF1A  00B0006F           	add.w	#6,sp
  2732  00DF1C  0004DF04           	goto	f19960
              00000000           
  2733  000000                     f19966	equ	-6		;stack offset for auto's
  2734  000000                     f19963	equ	-10		;stack offset for parameters
  2735                           	line	0
  2736                           	global	 __end_of_vQueueDelete
  2737  00DF20                     __end_of_vQueueDelete:
  2738                           	line	1789
  2739  00DF20                     _prvCopyDataToQueue:
  2740  00DF20  0004E03C           	goto	f19981
              00000000           
  2741  00DF24                     f19980:
  2742                           
  2743                           ;queue.c: 1788: static BaseType_t prvCopyDataToQ
                                 ueue( Queue_t * const pxQueue, const void *pvIte
                                 mToQueue, const BaseType_t xPosition )
  2744                           
  2745                           ;queue.c: 1789: {
  2746                           
  2747                           ;queue.c: 1790: BaseType_t xReturn = ( ( BaseTyp
                                 e_t ) 0 );
  2748                           
  2749                           	line	1790
  2750  00DF24  00200007           	mov.w	#0,w7
  2751  00DF26  002FFF66           	mov.w	#((0+f19986+0)-0),w6
  2752  00DF28  00478306           	add.w	sp,w6,w6
  2753  00DF2A  00780B07           	mov.w	w7,[w6]
  2754                           ;queue.c: 1792: if( pxQueue->uxItemSize == ( UBa
                                 seType_t ) 0 )
  2755                           
  2756                           ;_xPosition stored from w4
  2757                           	line	1792
  2758  00DF2C  002FFF86           	mov.w	#((0+f19986+2)-0),w6
  2759  00DF2E  00478306           	add.w	sp,w6,w6
  2760  00DF30  00780B04           	mov.w	w4,[w6]
  2761                           ;_pvItemToQueue stored from w2
  2762  00DF32  002FFFA6           	mov.w	#((0+f19986+4)-0),w6
  2763  00DF34  00478306           	add.w	sp,w6,w6
  2764  00DF36  00780B02           	mov.w	w2,[w6]
  2765                           ;_pxQueue stored from w0
  2766  00DF38  002FFFC6           	mov.w	#((0+f19986+6)-0),w6
  2767  00DF3A  00478306           	add.w	sp,w6,w6
  2768  00DF3C  00780B00           	mov.w	w0,[w6]
  2769  00DF3E  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2770  00DF40  00B00206           	add.w	#32,w6
  2771  00DF42  00E00016           	cp0.w	[w6]
  2772  00DF44  003A0002           	bra	nz,u511
  2773  00DF46  0004DF4E           	goto	u510
              00000000           
  2774  00DF4A                     u511:
  2775  00DF4A  0004DF52           	goto	lab815
              00000000           
  2776  00DF4E                     u510:
  2777                           ;queue.c: 1793: {
  2778                           
  2779                           ;queue.c: 1808: }
  2780                           
  2781                           	line	1808
  2782  00DF4E  0004E02A           	goto	lab816
              00000000           
  2783                           	line	1809
  2784  00DF52                     lab815:
  2785                           ;queue.c: 1809: else if( xPosition == ( ( BaseTy
                                 pe_t ) 0 ) )
  2786                           
  2787  00DF52  002FFF86           	mov.w	#((0+f19986+2)-0),w6
  2788  00DF54  00478306           	add.w	sp,w6,w6
  2789  00DF56  00E00016           	cp0.w	[w6]
  2790  00DF58  003A0002           	bra	nz,u521
  2791  00DF5A  0004DF62           	goto	u520
              00000000           
  2792  00DF5E                     u521:
  2793  00DF5E  0004DFAE           	goto	lab817
              00000000           
  2794  00DF62                     u520:
  2795                           ;queue.c: 1810: {
  2796                           
  2797                           ;queue.c: 1811: ( void ) memcpy( ( void * ) pxQu
                                 eue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueu
                                 e->uxItemSize );
  2798                           
  2799                           	global	_memcpy
  2800                           	signat	_memcpy,12346
  2801                           	line	1811
  2802  00DF62  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2803  00DF64  00B00206           	add.w	#32,w6
  2804  00DF66  00780216           	mov.w	[w6],w4
  2805  00DF68  0097B95F           	mov.w	[sp+((0+f19986+4)-0)],w2
  2806  00DF6A  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2807  00DF6C  00B00046           	add.w	#4,w6
  2808  00DF6E  00780016           	mov.w	[w6],w0
  2809  00DF70  0002C3F4           	call	(_memcpy)	;0 bytes adjustment
              00000000           
  2810                           ;queue.c: 1812: pxQueue->pcWriteTo += pxQueue->u
                                 xItemSize;
  2811                           
  2812                           	line	1812
  2813  00DF74  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2814  00DF76  00B00206           	add.w	#32,w6
  2815  00DF78  00780396           	mov.w	[w6],w7
  2816  00DF7A  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2817  00DF7C  00B00046           	add.w	#4,w6
  2818  00DF7E  00780296           	mov.w	[w6],w5
  2819  00DF80  00428B07           	add.w	w5,w7,[w6]
  2820                           ;queue.c: 1813: if( pxQueue->pcWriteTo >= pxQueu
                                 e->pcTail )
  2821                           
  2822                           	line	1813
  2823  00DF82  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2824  00DF84  00B00026           	add.w	#2,w6
  2825  00DF86  00780396           	mov.w	[w6],w7
  2826  00DF88  0097BAEF           	mov.w	[sp+((0+f19986+6)-0)],w5
  2827  00DF8A  00B00045           	add.w	#4,w5
  2828  00DF8C  00780315           	mov.w	[w5],w6
  2829  00DF8E  00E13007           	cp.w	w6, w7
  2830  00DF90  00390002           	bra	ltu,u531
  2831  00DF92  0004DF9A           	goto	u530
              00000000           
  2832  00DF96                     u531:
  2833  00DF96  0004DFAA           	goto	lab818
              00000000           
  2834  00DF9A                     u530:
  2835                           ;queue.c: 1814: {
  2836                           
  2837                           ;queue.c: 1815: pxQueue->pcWriteTo = pxQueue->pc
                                 Head;
  2838                           
  2839                           	line	1815
  2840  00DF9A  0097BBEF           	mov.w	[sp+((0+f19986+6)-0)],w7
  2841  00DF9C  00780317           	mov.w	[w7],w6
  2842  00DF9E  002FFFC7           	mov.w	#((0+f19986+6)-0),w7
  2843  00DFA0  00478387           	add.w	sp,w7,w7
  2844  00DFA2  00780297           	mov	[w7],w5
  2845  00DFA4  009802A6           	mov.w	w6,[w5+4]
  2846                           ;queue.c: 1816: }
  2847                           
  2848                           	line	1816
  2849  00DFA6  0004DFAA           	goto	lab819
              00000000           
  2850                           	line	1817
  2851  00DFAA                     lab818:
  2852                           ;queue.c: 1817: else
  2853                           
  2854                           ;queue.c: 1818: {
  2855                           
  2856                           ;queue.c: 1819: ;
  2857                           
  2858                           	line	1820
  2859  00DFAA                     lab819:
  2860                           ;queue.c: 1820: }
  2861                           
  2862                           ;queue.c: 1821: }
  2863                           
  2864                           	line	1821
  2865  00DFAA  0004E02A           	goto	lab820
              00000000           
  2866                           	line	1822
  2867  00DFAE                     lab817:
  2868                           ;queue.c: 1822: else
  2869                           
  2870                           ;queue.c: 1823: {
  2871                           
  2872                           ;queue.c: 1824: ( void ) memcpy( ( void * ) pxQu
                                 eue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQ
                                 ueue->uxItemSize );
  2873                           
  2874                           	line	1824
  2875  00DFAE  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2876  00DFB0  00B00206           	add.w	#32,w6
  2877  00DFB2  00780216           	mov.w	[w6],w4
  2878  00DFB4  0097B95F           	mov.w	[sp+((0+f19986+4)-0)],w2
  2879  00DFB6  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2880  00DFB8  00B00066           	add.w	#6,w6
  2881  00DFBA  00780016           	mov.w	[w6],w0
  2882  00DFBC  0002C3F4           	call	(_memcpy)	;0 bytes adjustment
              00000000           
  2883                           ;queue.c: 1825: pxQueue->u.pcReadFrom -= pxQueue
                                 ->uxItemSize;
  2884                           
  2885                           	line	1825
  2886  00DFC0  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2887  00DFC2  00B00206           	add.w	#32,w6
  2888  00DFC4  00780396           	mov.w	[w6],w7
  2889  00DFC6  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2890  00DFC8  00B00066           	add.w	#6,w6
  2891  00DFCA  00780296           	mov.w	[w6],w5
  2892  00DFCC  00528B07           	sub.w	w5,w7,[w6]
  2893                           ;queue.c: 1826: if( pxQueue->u.pcReadFrom < pxQu
                                 eue->pcHead )
  2894                           
  2895                           	line	1826
  2896  00DFCE  0097BBEF           	mov.w	[sp+((0+f19986+6)-0)],w7
  2897  00DFD0  00780317           	mov.w	[w7],w6
  2898  00DFD2  0097BBEF           	mov.w	[sp+((0+f19986+6)-0)],w7
  2899  00DFD4  00B00067           	add.w	#6,w7
  2900  00DFD6  00780297           	mov.w	[w7],w5
  2901  00DFD8  00E12806           	cp.w	w5, w6
  2902  00DFDA  00310002           	bra	geu,u541
  2903  00DFDC  0004DFE4           	goto	u540
              00000000           
  2904  00DFE0                     u541:
  2905  00DFE0  0004DFFE           	goto	lab821
              00000000           
  2906  00DFE4                     u540:
  2907                           ;queue.c: 1827: {
  2908                           
  2909                           ;queue.c: 1828: pxQueue->u.pcReadFrom = ( pxQueu
                                 e->pcTail - pxQueue->uxItemSize );
  2910                           
  2911                           	line	1828
  2912  00DFE4  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2913  00DFE6  00B00206           	add.w	#32,w6
  2914  00DFE8  00780396           	mov.w	[w6],w7
  2915  00DFEA  0097BAEF           	mov.w	[sp+((0+f19986+6)-0)],w5
  2916  00DFEC  00B00025           	add.w	#2,w5
  2917  00DFEE  00780315           	mov.w	[w5],w6
  2918  00DFF0  00530307           	sub.w	w6,w7,w6
  2919  00DFF2  002FFFC7           	mov.w	#((0+f19986+6)-0),w7
  2920  00DFF4  00478387           	add.w	sp,w7,w7
  2921  00DFF6  00780297           	mov	[w7],w5
  2922  00DFF8  009802B6           	mov.w	w6,[w5+6]
  2923                           ;queue.c: 1829: }
  2924                           
  2925                           	line	1829
  2926  00DFFA  0004DFFE           	goto	lab822
              00000000           
  2927                           	line	1830
  2928  00DFFE                     lab821:
  2929                           ;queue.c: 1830: else
  2930                           
  2931                           ;queue.c: 1831: {
  2932                           
  2933                           ;queue.c: 1832: ;
  2934                           
  2935                           	line	1833
  2936  00DFFE                     lab822:
  2937                           ;queue.c: 1833: }
  2938                           
  2939                           ;queue.c: 1835: if( xPosition == ( ( BaseType_t 
                                 ) 2 ) )
  2940                           
  2941                           	line	1835
  2942  00DFFE  0097BB4F           	mov.w	[sp+((0+f19986+2)-0)],w6
  2943  00E000  00E13062           	cp.w	w6, #2
  2944  00E002  003A0002           	bra	nz,u551
  2945  00E004  0004E00C           	goto	u550
              00000000           
  2946  00E008                     u551:
  2947  00E008  0004E02A           	goto	lab823
              00000000           
  2948  00E00C                     u550:
  2949                           ;queue.c: 1836: {
  2950                           
  2951                           ;queue.c: 1837: if( pxQueue->uxMessagesWaiting >
                                  ( UBaseType_t ) 0 )
  2952                           
  2953                           	line	1837
  2954  00E00C  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2955  00E00E  00B001C6           	add.w	#28,w6
  2956  00E010  00E00016           	cp0.w	[w6]
  2957  00E012  00320002           	bra	z,u561
  2958  00E014  0004E01C           	goto	u560
              00000000           
  2959  00E018                     u561:
  2960  00E018  0004E026           	goto	lab824
              00000000           
  2961  00E01C                     u560:
  2962                           ;queue.c: 1838: {
  2963                           
  2964                           ;queue.c: 1843: --( pxQueue->uxMessagesWaiting )
                                 ;
  2965                           
  2966                           	line	1843
  2967  00E01C  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  2968  00E01E  00B001C6           	add.w	#28,w6
  2969  00E020  00E90B16           	dec.w	[w6],[w6]
  2970                           ;queue.c: 1844: }
  2971                           
  2972                           	line	1844
  2973  00E022  0004E026           	goto	lab825
              00000000           
  2974                           	line	1845
  2975  00E026                     lab824:
  2976                           ;queue.c: 1845: else
  2977                           
  2978                           ;queue.c: 1846: {
  2979                           
  2980                           ;queue.c: 1847: ;
  2981                           
  2982                           	line	1848
  2983  00E026                     lab825:
  2984                           ;queue.c: 1848: }
  2985                           
  2986                           ;queue.c: 1849: }
  2987                           
  2988                           	line	1849
  2989  00E026  0004E02A           	goto	lab826
              00000000           
  2990                           	line	1850
  2991  00E02A                     lab823:
  2992                           ;queue.c: 1850: else
  2993                           
  2994                           ;queue.c: 1851: {
  2995                           
  2996                           ;queue.c: 1852: ;
  2997                           
  2998                           	line	1853
  2999  00E02A                     lab826:
  3000                           	line	1854
  3001  00E02A                     lab820:
  3002  00E02A                     lab816:
  3003                           ;queue.c: 1853: }
  3004                           
  3005                           ;queue.c: 1854: }
  3006                           
  3007                           ;queue.c: 1856: ++( pxQueue->uxMessagesWaiting )
                                 ;
  3008                           
  3009                           	line	1856
  3010  00E02A  0097BB6F           	mov.w	[sp+((0+f19986+6)-0)],w6
  3011  00E02C  00B001C6           	add.w	#28,w6
  3012  00E02E  00E80B16           	inc.w	[w6],[w6]
  3013                           ;queue.c: 1858: return xReturn;
  3014                           
  3015                           	line	1858
  3016  00E030  0097B83F           	mov.w	[sp+((0+f19986+0)-0)], w0
  3017  00E032  00780000           	mov.w	w0,w0
  3018  00E034  0004E038           	goto	lab814
              00000000           
  3019                           ;queue.c: 1859: }
  3020                           
  3021                           	line	1859
  3022  00E038                     lab814:
  3023                           	local	_prvCopyDataToQueue
  3024                           
  3025  00E038  00B100AF           	sub.w	#10,sp
  3026  00E03A  00060000           	return
  3027                           	line	1789
  3028                           
  3029  00E03C                     f19981:
  3030                           
  3031  00E03C  00B000AF           	add.w	#10,sp
  3032  00E03E  0004DF24           	goto	f19980
              00000000           
  3033  000000                     f19986	equ	-10		;stack offset for auto's
  3034  000000                     f19983	equ	-14		;stack offset for parameters
  3035                           	line	0
  3036                           	local	 __end_of_prvCopyDataToQueue
  3037  00E042                     __end_of_prvCopyDataToQueue:
  3038                           	line	1863
  3039  00E042                     _prvCopyDataFromQueue:
  3040  00E042  0004E0AE           	goto	f20001
              00000000           
  3041  00E046                     f20000:
  3042                           
  3043                           ;queue.c: 1862: static void prvCopyDataFromQueue
                                 ( Queue_t * const pxQueue, void * const pvBuffer
                                  )
  3044                           
  3045                           ;queue.c: 1863: {
  3046                           
  3047                           ;queue.c: 1864: if( pxQueue->uxItemSize != ( UBa
                                 seType_t ) 0 )
  3048                           
  3049                           ;_pvBuffer stored from w2
  3050                           	line	1864
  3051  00E046  002FFFA6           	mov.w	#((0+f20006+0)-0),w6
  3052  00E048  00478306           	add.w	sp,w6,w6
  3053  00E04A  00780B02           	mov.w	w2,[w6]
  3054                           ;_pxQueue stored from w0
  3055  00E04C  002FFFC6           	mov.w	#((0+f20006+2)-0),w6
  3056  00E04E  00478306           	add.w	sp,w6,w6
  3057  00E050  00780B00           	mov.w	w0,[w6]
  3058  00E052  0097BB6F           	mov.w	[sp+((0+f20006+2)-0)],w6
  3059  00E054  00B00206           	add.w	#32,w6
  3060  00E056  00E00016           	cp0.w	[w6]
  3061  00E058  00320002           	bra	z,u571
  3062  00E05A  0004E062           	goto	u570
              00000000           
  3063  00E05E                     u571:
  3064  00E05E  0004E0AA           	goto	lab828
              00000000           
  3065  00E062                     u570:
  3066                           ;queue.c: 1865: {
  3067                           
  3068                           ;queue.c: 1866: pxQueue->u.pcReadFrom += pxQueue
                                 ->uxItemSize;
  3069                           
  3070                           	line	1866
  3071  00E062  0097BB6F           	mov.w	[sp+((0+f20006+2)-0)],w6
  3072  00E064  00B00206           	add.w	#32,w6
  3073  00E066  00780396           	mov.w	[w6],w7
  3074  00E068  0097BB6F           	mov.w	[sp+((0+f20006+2)-0)],w6
  3075  00E06A  00B00066           	add.w	#6,w6
  3076  00E06C  00780296           	mov.w	[w6],w5
  3077  00E06E  00428B07           	add.w	w5,w7,[w6]
  3078                           ;queue.c: 1867: if( pxQueue->u.pcReadFrom >= pxQ
                                 ueue->pcTail )
  3079                           
  3080                           	line	1867
  3081  00E070  0097BB6F           	mov.w	[sp+((0+f20006+2)-0)],w6
  3082  00E072  00B00026           	add.w	#2,w6
  3083  00E074  00780396           	mov.w	[w6],w7
  3084  00E076  0097BAEF           	mov.w	[sp+((0+f20006+2)-0)],w5
  3085  00E078  00B00065           	add.w	#6,w5
  3086  00E07A  00780315           	mov.w	[w5],w6
  3087  00E07C  00E13007           	cp.w	w6, w7
  3088  00E07E  00390002           	bra	ltu,u581
  3089  00E080  0004E088           	goto	u580
              00000000           
  3090  00E084                     u581:
  3091  00E084  0004E098           	goto	lab829
              00000000           
  3092  00E088                     u580:
  3093                           ;queue.c: 1868: {
  3094                           
  3095                           ;queue.c: 1869: pxQueue->u.pcReadFrom = pxQueue-
                                 >pcHead;
  3096                           
  3097                           	line	1869
  3098  00E088  0097BBEF           	mov.w	[sp+((0+f20006+2)-0)],w7
  3099  00E08A  00780317           	mov.w	[w7],w6
  3100  00E08C  002FFFC7           	mov.w	#((0+f20006+2)-0),w7
  3101  00E08E  00478387           	add.w	sp,w7,w7
  3102  00E090  00780297           	mov	[w7],w5
  3103  00E092  009802B6           	mov.w	w6,[w5+6]
  3104                           ;queue.c: 1870: }
  3105                           
  3106                           	line	1870
  3107  00E094  0004E098           	goto	lab830
              00000000           
  3108                           	line	1871
  3109  00E098                     lab829:
  3110                           ;queue.c: 1871: else
  3111                           
  3112                           ;queue.c: 1872: {
  3113                           
  3114                           ;queue.c: 1873: ;
  3115                           
  3116                           	line	1874
  3117  00E098                     lab830:
  3118                           ;queue.c: 1874: }
  3119                           
  3120                           ;queue.c: 1875: ( void ) memcpy( ( void * ) pvBu
                                 ffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t
                                  ) pxQueue->uxItemSize );
  3121                           
  3122                           	line	1875
  3123  00E098  0097BB6F           	mov.w	[sp+((0+f20006+2)-0)],w6
  3124  00E09A  00B00206           	add.w	#32,w6
  3125  00E09C  00780216           	mov.w	[w6],w4
  3126  00E09E  0097BB6F           	mov.w	[sp+((0+f20006+2)-0)],w6
  3127  00E0A0  00B00066           	add.w	#6,w6
  3128  00E0A2  00780116           	mov.w	[w6],w2
  3129  00E0A4  0097B85F           	mov.w	[sp+((0+f20006+0)-0)],w0
  3130  00E0A6  0002C3F4           	call	(_memcpy)	;0 bytes adjustment
              00000000           
  3131                           	line	1876
  3132  00E0AA                     lab828:
  3133                           ;queue.c: 1876: }
  3134                           
  3135                           ;queue.c: 1877: }
  3136                           
  3137                           	line	1877
  3138  00E0AA                     lab827:
  3139                           	local	_prvCopyDataFromQueue
  3140                           
  3141  00E0AA  00B1006F           	sub.w	#6,sp
  3142  00E0AC  00060000           	return
  3143                           	line	1863
  3144                           
  3145  00E0AE                     f20001:
  3146                           
  3147  00E0AE  00B0006F           	add.w	#6,sp
  3148  00E0B0  0004E046           	goto	f20000
              00000000           
  3149  000000                     f20006	equ	-6		;stack offset for auto's
  3150  000000                     f20003	equ	-10		;stack offset for parameters
  3151                           	line	0
  3152                           	local	 __end_of_prvCopyDataFromQueue
  3153  00E0B4                     __end_of_prvCopyDataFromQueue:
  3154                           	line	1881
  3155  00E0B4                     _prvUnlockQueue:
  3156  00E0B4  0004E18A           	goto	f20011
              00000000           
  3157  00E0B8                     f20010:
  3158                           
  3159                           ;queue.c: 1880: static void prvUnlockQueue( Queu
                                 e_t * const pxQueue )
  3160                           
  3161                           ;queue.c: 1881: {
  3162                           
  3163                           ;queue.c: 1888: vPortEnterCritical();
  3164                           
  3165                           ;_pxQueue stored from w0
  3166                           	line	1888
  3167  00E0B8  002FFFC6           	mov.w	#((0+f20016+0)-0),w6
  3168  00E0BA  00478306           	add.w	sp,w6,w6
  3169  00E0BC  00780B00           	mov.w	w0,[w6]
  3170  00E0BE  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  3171                           ;queue.c: 1889: {
  3172                           
  3173                           ;queue.c: 1891: while( pxQueue->xTxLock > ( ( Ba
                                 seType_t ) 0 ) )
  3174                           
  3175                           	line	1891
  3176  00E0C2  0004E100           	goto	lab832
              00000000           
  3177  00E0C6                     lab833:
  3178                           ;queue.c: 1892: {
  3179                           
  3180                           ;queue.c: 1935: {
  3181                           
  3182                           ;queue.c: 1938: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToReceive ) )->uxNumberOfItems
                                  == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 
                                 ) )
  3183                           
  3184                           	line	1938
  3185  00E0C6  0097BB6F           	mov.w	[sp+((0+f20016+0)-0)],w6
  3186  00E0C8  00B00126           	add.w	#18,w6
  3187  00E0CA  00E00016           	cp0.w	[w6]
  3188  00E0CC  00320002           	bra	z,u591
  3189  00E0CE  0004E0D6           	goto	u590
              00000000           
  3190  00E0D2                     u591:
  3191  00E0D2  0004E0F6           	goto	lab835
              00000000           
  3192  00E0D6                     u590:
  3193                           ;queue.c: 1939: {
  3194                           
  3195                           ;queue.c: 1940: if( xTaskRemoveFromEventList( &(
                                  pxQueue->xTasksWaitingToReceive ) ) != ( ( Base
                                 Type_t ) 0 ) )
  3196                           
  3197                           	line	1940
  3198  00E0D6  0097B86F           	mov.w	[sp+((0+f20016+0)-0)],w0
  3199  00E0D8  00B00120           	add.w	#18,w0
  3200  00E0DA  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
  3201  00E0DE  00E00000           	cp0.w	w0
  3202  00E0E0  00320002           	bra	z,u601
  3203  00E0E2  0004E0EA           	goto	u600
              00000000           
  3204  00E0E6                     u601:
  3205  00E0E6  0004E0F2           	goto	lab836
              00000000           
  3206  00E0EA                     u600:
  3207                           ;queue.c: 1941: {
  3208                           
  3209                           ;queue.c: 1944: vTaskMissedYield();
  3210                           
  3211                           	global	_vTaskMissedYield
  3212                           	signat	_vTaskMissedYield,26
  3213                           	line	1944
  3214  00E0EA  0002F61E           	call	(_vTaskMissedYield)
              00000000           
  3215                           ;queue.c: 1945: }
  3216                           
  3217                           	line	1945
  3218  00E0EE  0004E0F2           	goto	lab837
              00000000           
  3219                           	line	1946
  3220  00E0F2                     lab836:
  3221                           ;queue.c: 1946: else
  3222                           
  3223                           ;queue.c: 1947: {
  3224                           
  3225                           ;queue.c: 1948: ;
  3226                           
  3227                           	line	1949
  3228  00E0F2                     lab837:
  3229                           ;queue.c: 1949: }
  3230                           
  3231                           ;queue.c: 1950: }
  3232                           
  3233                           	line	1950
  3234  00E0F2  0004E0FA           	goto	lab838
              00000000           
  3235                           	line	1951
  3236  00E0F6                     lab835:
  3237                           ;queue.c: 1951: else
  3238                           
  3239                           ;queue.c: 1952: {
  3240                           
  3241                           ;queue.c: 1953: break;
  3242                           
  3243                           	line	1953
  3244  00E0F6  0004E114           	goto	lab834
              00000000           
  3245                           	line	1954
  3246  00E0FA                     lab838:
  3247                           ;queue.c: 1954: }
  3248                           
  3249                           ;queue.c: 1955: }
  3250                           
  3251                           ;queue.c: 1958: --( pxQueue->xTxLock );
  3252                           
  3253                           	line	1958
  3254  00E0FA  0097BB6F           	mov.w	[sp+((0+f20016+0)-0)],w6
  3255  00E0FC  00B00246           	add.w	#36,w6
  3256  00E0FE  00E90B16           	dec.w	[w6],[w6]
  3257                           	line	1959
  3258  00E100                     lab832:
  3259                           	line	1891
  3260  00E100  00200006           	mov.w	#0,w6
  3261  00E102  0097BBEF           	mov.w	[sp+((0+f20016+0)-0)],w7
  3262  00E104  00B00247           	add.w	#36,w7
  3263  00E106  00780297           	mov.w	[w7],w5
  3264  00E108  00E12806           	cp.w	w5, w6
  3265  00E10A  003C0002           	bra	gt,u611
  3266  00E10C  0004E114           	goto	u610
              00000000           
  3267  00E110                     u611:
  3268  00E110  0004E0C6           	goto	lab833
              00000000           
  3269  00E114                     u610:
  3270  00E114                     lab834:
  3271                           ;queue.c: 1959: }
  3272                           
  3273                           ;queue.c: 1961: pxQueue->xTxLock = ( ( BaseType_
                                 t ) -1 );
  3274                           
  3275                           	line	1961
  3276  00E114  002FFFF6           	mov.w	#-1,w6
  3277  00E116  002FFFC7           	mov.w	#((0+f20016+0)-0),w7
  3278  00E118  00478387           	add.w	sp,w7,w7
  3279  00E11A  00780297           	mov	[w7],w5
  3280  00E11C  009812A6           	mov.w	w6,[w5+36]
  3281                           ;queue.c: 1962: }
  3282                           
  3283                           ;queue.c: 1963: vPortExitCritical();
  3284                           
  3285                           	line	1963
  3286  00E11E  0002CA22           	call	(_vPortExitCritical)
              00000000           
  3287                           ;queue.c: 1966: vPortEnterCritical();
  3288                           
  3289                           	line	1966
  3290  00E122  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  3291                           ;queue.c: 1967: {
  3292                           
  3293                           ;queue.c: 1968: while( pxQueue->xRxLock > ( ( Ba
                                 seType_t ) 0 ) )
  3294                           
  3295                           	line	1968
  3296  00E126  0004E164           	goto	lab839
              00000000           
  3297  00E12A                     lab840:
  3298                           ;queue.c: 1969: {
  3299                           
  3300                           ;queue.c: 1970: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToSend ) )->uxNumberOfItems ==
                                  ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
  3301                           
  3302                           	line	1970
  3303  00E12A  0097BB6F           	mov.w	[sp+((0+f20016+0)-0)],w6
  3304  00E12C  00B00086           	add.w	#8,w6
  3305  00E12E  00E00016           	cp0.w	[w6]
  3306  00E130  00320002           	bra	z,u621
  3307  00E132  0004E13A           	goto	u620
              00000000           
  3308  00E136                     u621:
  3309  00E136  0004E160           	goto	lab842
              00000000           
  3310  00E13A                     u620:
  3311                           ;queue.c: 1971: {
  3312                           
  3313                           ;queue.c: 1972: if( xTaskRemoveFromEventList( &(
                                  pxQueue->xTasksWaitingToSend ) ) != ( ( BaseTyp
                                 e_t ) 0 ) )
  3314                           
  3315                           	line	1972
  3316  00E13A  0097B86F           	mov.w	[sp+((0+f20016+0)-0)],w0
  3317  00E13C  00B00080           	add.w	#8,w0
  3318  00E13E  0002F3D0           	call	(_xTaskRemoveFromEventList)	;0 bytes adjus
              00000000           tment
  3319  00E142  00E00000           	cp0.w	w0
  3320  00E144  00320002           	bra	z,u631
  3321  00E146  0004E14E           	goto	u630
              00000000           
  3322  00E14A                     u631:
  3323  00E14A  0004E156           	goto	lab843
              00000000           
  3324  00E14E                     u630:
  3325                           ;queue.c: 1973: {
  3326                           
  3327                           ;queue.c: 1974: vTaskMissedYield();
  3328                           
  3329                           	line	1974
  3330  00E14E  0002F61E           	call	(_vTaskMissedYield)
              00000000           
  3331                           ;queue.c: 1975: }
  3332                           
  3333                           	line	1975
  3334  00E152  0004E156           	goto	lab844
              00000000           
  3335                           	line	1976
  3336  00E156                     lab843:
  3337                           ;queue.c: 1976: else
  3338                           
  3339                           ;queue.c: 1977: {
  3340                           
  3341                           ;queue.c: 1978: ;
  3342                           
  3343                           	line	1979
  3344  00E156                     lab844:
  3345                           ;queue.c: 1979: }
  3346                           
  3347                           ;queue.c: 1981: --( pxQueue->xRxLock );
  3348                           
  3349                           	line	1981
  3350  00E156  0097BB6F           	mov.w	[sp+((0+f20016+0)-0)],w6
  3351  00E158  00B00226           	add.w	#34,w6
  3352  00E15A  00E90B16           	dec.w	[w6],[w6]
  3353                           ;queue.c: 1982: }
  3354                           
  3355                           	line	1982
  3356  00E15C  0004E164           	goto	lab845
              00000000           
  3357                           	line	1983
  3358  00E160                     lab842:
  3359                           ;queue.c: 1983: else
  3360                           
  3361                           ;queue.c: 1984: {
  3362                           
  3363                           ;queue.c: 1985: break;
  3364                           
  3365                           	line	1985
  3366  00E160  0004E178           	goto	lab841
              00000000           
  3367                           	line	1986
  3368  00E164                     lab845:
  3369                           	line	1987
  3370  00E164                     lab839:
  3371                           	line	1968
  3372  00E164  00200006           	mov.w	#0,w6
  3373  00E166  0097BBEF           	mov.w	[sp+((0+f20016+0)-0)],w7
  3374  00E168  00B00227           	add.w	#34,w7
  3375  00E16A  00780297           	mov.w	[w7],w5
  3376  00E16C  00E12806           	cp.w	w5, w6
  3377  00E16E  003C0002           	bra	gt,u641
  3378  00E170  0004E178           	goto	u640
              00000000           
  3379  00E174                     u641:
  3380  00E174  0004E12A           	goto	lab840
              00000000           
  3381  00E178                     u640:
  3382  00E178                     lab841:
  3383                           ;queue.c: 1986: }
  3384                           
  3385                           ;queue.c: 1987: }
  3386                           
  3387                           ;queue.c: 1989: pxQueue->xRxLock = ( ( BaseType_
                                 t ) -1 );
  3388                           
  3389                           	line	1989
  3390  00E178  002FFFF6           	mov.w	#-1,w6
  3391  00E17A  002FFFC7           	mov.w	#((0+f20016+0)-0),w7
  3392  00E17C  00478387           	add.w	sp,w7,w7
  3393  00E17E  00780297           	mov	[w7],w5
  3394  00E180  00981296           	mov.w	w6,[w5+34]
  3395                           ;queue.c: 1990: }
  3396                           
  3397                           ;queue.c: 1991: vPortExitCritical();
  3398                           
  3399                           	line	1991
  3400  00E182  0002CA22           	call	(_vPortExitCritical)
              00000000           
  3401                           ;queue.c: 1992: }
  3402                           
  3403                           	line	1992
  3404  00E186                     lab831:
  3405                           	local	_prvUnlockQueue
  3406                           
  3407  00E186  00B1004F           	sub.w	#4,sp
  3408  00E188  00060000           	return
  3409                           	line	1881
  3410                           
  3411  00E18A                     f20011:
  3412                           
  3413  00E18A  00B0004F           	add.w	#4,sp
  3414  00E18C  0004E0B8           	goto	f20010
              00000000           
  3415  000000                     f20016	equ	-4		;stack offset for auto's
  3416  000000                     f20013	equ	-8		;stack offset for parameters
  3417                           	line	0
  3418                           	local	 __end_of_prvUnlockQueue
  3419  00E190                     __end_of_prvUnlockQueue:
  3420                           	line	1996
  3421  00E190                     _prvIsQueueEmpty:
  3422  00E190  0004E1D2           	goto	f20031
              00000000           
  3423  00E194                     f20030:
  3424                           
  3425                           ;queue.c: 1995: static BaseType_t prvIsQueueEmpt
                                 y( const Queue_t *pxQueue )
  3426                           
  3427                           ;queue.c: 1996: {
  3428                           
  3429                           ;queue.c: 1997: BaseType_t xReturn;
  3430                           
  3431                           ;queue.c: 1999: vPortEnterCritical();
  3432                           
  3433                           ;_pxQueue stored from w0
  3434                           	line	1999
  3435  00E194  002FFFC6           	mov.w	#((0+f20036+2)-0),w6
  3436  00E196  00478306           	add.w	sp,w6,w6
  3437  00E198  00780B00           	mov.w	w0,[w6]
  3438  00E19A  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  3439                           ;queue.c: 2000: {
  3440                           
  3441                           ;queue.c: 2001: if( pxQueue->uxMessagesWaiting =
                                 = ( UBaseType_t ) 0 )
  3442                           
  3443                           	line	2001
  3444  00E19E  0097BB6F           	mov.w	[sp+((0+f20036+2)-0)],w6
  3445  00E1A0  00B001C6           	add.w	#28,w6
  3446  00E1A2  00E00016           	cp0.w	[w6]
  3447  00E1A4  003A0002           	bra	nz,u651
  3448  00E1A6  0004E1AE           	goto	u650
              00000000           
  3449  00E1AA                     u651:
  3450  00E1AA  0004E1BA           	goto	lab847
              00000000           
  3451  00E1AE                     u650:
  3452                           ;queue.c: 2002: {
  3453                           
  3454                           ;queue.c: 2003: xReturn = ( ( BaseType_t ) 1 );
  3455                           
  3456                           	line	2003
  3457  00E1AE  00200017           	mov.w	#01h,w7
  3458  00E1B0  002FFFA6           	mov.w	#((0+f20036+0)-0),w6
  3459  00E1B2  00478306           	add.w	sp,w6,w6
  3460  00E1B4  00780B07           	mov.w	w7,[w6]
  3461                           ;queue.c: 2004: }
  3462                           
  3463                           	line	2004
  3464  00E1B6  0004E1C2           	goto	lab848
              00000000           
  3465                           	line	2005
  3466  00E1BA                     lab847:
  3467                           ;queue.c: 2005: else
  3468                           
  3469                           ;queue.c: 2006: {
  3470                           
  3471                           ;queue.c: 2007: xReturn = ( ( BaseType_t ) 0 );
  3472                           
  3473                           	line	2007
  3474  00E1BA  00200007           	mov.w	#0,w7
  3475  00E1BC  002FFFA6           	mov.w	#((0+f20036+0)-0),w6
  3476  00E1BE  00478306           	add.w	sp,w6,w6
  3477  00E1C0  00780B07           	mov.w	w7,[w6]
  3478                           	line	2008
  3479  00E1C2                     lab848:
  3480                           ;queue.c: 2008: }
  3481                           
  3482                           ;queue.c: 2009: }
  3483                           
  3484                           ;queue.c: 2010: vPortExitCritical();
  3485                           
  3486                           	line	2010
  3487  00E1C2  0002CA22           	call	(_vPortExitCritical)
              00000000           
  3488                           ;queue.c: 2012: return xReturn;
  3489                           
  3490                           	line	2012
  3491  00E1C6  0097B85F           	mov.w	[sp+((0+f20036+0)-0)], w0
  3492  00E1C8  00780000           	mov.w	w0,w0
  3493  00E1CA  0004E1CE           	goto	lab846
              00000000           
  3494                           ;queue.c: 2013: }
  3495                           
  3496                           	line	2013
  3497  00E1CE                     lab846:
  3498                           	local	_prvIsQueueEmpty
  3499                           
  3500  00E1CE  00B1006F           	sub.w	#6,sp
  3501  00E1D0  00060000           	return
  3502                           	line	1996
  3503                           
  3504  00E1D2                     f20031:
  3505                           
  3506  00E1D2  00B0006F           	add.w	#6,sp
  3507  00E1D4  0004E194           	goto	f20030
              00000000           
  3508  000000                     f20036	equ	-6		;stack offset for auto's
  3509  000000                     f20033	equ	-10		;stack offset for parameters
  3510                           	line	0
  3511                           	local	 __end_of_prvIsQueueEmpty
  3512  00E1D8                     __end_of_prvIsQueueEmpty:
  3513                           	global	_xQueueIsQueueEmptyFromISR
  3514                           	signat	_xQueueIsQueueEmptyFromISR,4154
  3515                           	line	2017
  3516  00E1D8                     _xQueueIsQueueEmptyFromISR:
  3517  00E1D8  0004E212           	goto	f20041
              00000000           
  3518  00E1DC                     f20040:
  3519                           
  3520                           ;queue.c: 2016: BaseType_t xQueueIsQueueEmptyFro
                                 mISR( const QueueHandle_t xQueue )
  3521                           
  3522                           ;queue.c: 2017: {
  3523                           
  3524                           ;queue.c: 2018: BaseType_t xReturn;
  3525                           
  3526                           ;queue.c: 2020: ;
  3527                           
  3528                           ;queue.c: 2021: if( ( ( Queue_t * ) xQueue )->ux
                                 MessagesWaiting == ( UBaseType_t ) 0 )
  3529                           
  3530                           ;_xQueue stored from w0
  3531                           	line	2021
  3532  00E1DC  002FFFC6           	mov.w	#((0+f20046+2)-0),w6
  3533  00E1DE  00478306           	add.w	sp,w6,w6
  3534  00E1E0  00780B00           	mov.w	w0,[w6]
  3535  00E1E2  0097BB6F           	mov.w	[sp+((0+f20046+2)-0)],w6
  3536  00E1E4  00B001C6           	add.w	#28,w6
  3537  00E1E6  00E00016           	cp0.w	[w6]
  3538  00E1E8  003A0002           	bra	nz,u661
  3539  00E1EA  0004E1F2           	goto	u660
              00000000           
  3540  00E1EE                     u661:
  3541  00E1EE  0004E1FE           	goto	lab850
              00000000           
  3542  00E1F2                     u660:
  3543                           ;queue.c: 2022: {
  3544                           
  3545                           ;queue.c: 2023: xReturn = ( ( BaseType_t ) 1 );
  3546                           
  3547                           	line	2023
  3548  00E1F2  00200017           	mov.w	#01h,w7
  3549  00E1F4  002FFFA6           	mov.w	#((0+f20046+0)-0),w6
  3550  00E1F6  00478306           	add.w	sp,w6,w6
  3551  00E1F8  00780B07           	mov.w	w7,[w6]
  3552                           ;queue.c: 2024: }
  3553                           
  3554                           	line	2024
  3555  00E1FA  0004E206           	goto	lab851
              00000000           
  3556                           	line	2025
  3557  00E1FE                     lab850:
  3558                           ;queue.c: 2025: else
  3559                           
  3560                           ;queue.c: 2026: {
  3561                           
  3562                           ;queue.c: 2027: xReturn = ( ( BaseType_t ) 0 );
  3563                           
  3564                           	line	2027
  3565  00E1FE  00200007           	mov.w	#0,w7
  3566  00E200  002FFFA6           	mov.w	#((0+f20046+0)-0),w6
  3567  00E202  00478306           	add.w	sp,w6,w6
  3568  00E204  00780B07           	mov.w	w7,[w6]
  3569                           	line	2028
  3570  00E206                     lab851:
  3571                           ;queue.c: 2028: }
  3572                           
  3573                           ;queue.c: 2030: return xReturn;
  3574                           
  3575                           	line	2030
  3576  00E206  0097B85F           	mov.w	[sp+((0+f20046+0)-0)], w0
  3577  00E208  00780000           	mov.w	w0,w0
  3578  00E20A  0004E20E           	goto	lab849
              00000000           
  3579                           ;queue.c: 2031: }
  3580                           
  3581                           	line	2031
  3582  00E20E                     lab849:
  3583                           	global	_xQueueIsQueueEmptyFromISR
  3584                           
  3585  00E20E  00B1006F           	sub.w	#6,sp
  3586  00E210  00060000           	return
  3587                           	line	2017
  3588                           
  3589  00E212                     f20041:
  3590                           
  3591  00E212  00B0006F           	add.w	#6,sp
  3592  00E214  0004E1DC           	goto	f20040
              00000000           
  3593  000000                     f20046	equ	-6		;stack offset for auto's
  3594  000000                     f20043	equ	-10		;stack offset for parameters
  3595                           	line	0
  3596                           	global	 __end_of_xQueueIsQueueEmptyFromISR
  3597  00E218                     __end_of_xQueueIsQueueEmptyFromISR:
  3598                           	line	2035
  3599  00E218                     _prvIsQueueFull:
  3600  00E218  0004E262           	goto	f20051
              00000000           
  3601  00E21C                     f20050:
  3602                           
  3603                           ;queue.c: 2034: static BaseType_t prvIsQueueFull
                                 ( const Queue_t *pxQueue )
  3604                           
  3605                           ;queue.c: 2035: {
  3606                           
  3607                           ;queue.c: 2036: BaseType_t xReturn;
  3608                           
  3609                           ;queue.c: 2038: vPortEnterCritical();
  3610                           
  3611                           ;_pxQueue stored from w0
  3612                           	line	2038
  3613  00E21C  002FFFC6           	mov.w	#((0+f20056+2)-0),w6
  3614  00E21E  00478306           	add.w	sp,w6,w6
  3615  00E220  00780B00           	mov.w	w0,[w6]
  3616  00E222  0002CA10           	call	(_vPortEnterCritical)
              00000000           
  3617                           ;queue.c: 2039: {
  3618                           
  3619                           ;queue.c: 2040: if( pxQueue->uxMessagesWaiting =
                                 = pxQueue->uxLength )
  3620                           
  3621                           	line	2040
  3622  00E226  0097BB6F           	mov.w	[sp+((0+f20056+2)-0)],w6
  3623  00E228  00B001E6           	add.w	#30,w6
  3624  00E22A  00780396           	mov.w	[w6],w7
  3625  00E22C  0097BAEF           	mov.w	[sp+((0+f20056+2)-0)],w5
  3626  00E22E  00B001C5           	add.w	#28,w5
  3627  00E230  00780315           	mov.w	[w5],w6
  3628  00E232  00E13007           	cp.w	w6, w7
  3629  00E234  003A0002           	bra	nz,u671
  3630  00E236  0004E23E           	goto	u670
              00000000           
  3631  00E23A                     u671:
  3632  00E23A  0004E24A           	goto	lab853
              00000000           
  3633  00E23E                     u670:
  3634                           ;queue.c: 2041: {
  3635                           
  3636                           ;queue.c: 2042: xReturn = ( ( BaseType_t ) 1 );
  3637                           
  3638                           	line	2042
  3639  00E23E  00200017           	mov.w	#01h,w7
  3640  00E240  002FFFA6           	mov.w	#((0+f20056+0)-0),w6
  3641  00E242  00478306           	add.w	sp,w6,w6
  3642  00E244  00780B07           	mov.w	w7,[w6]
  3643                           ;queue.c: 2043: }
  3644                           
  3645                           	line	2043
  3646  00E246  0004E252           	goto	lab854
              00000000           
  3647                           	line	2044
  3648  00E24A                     lab853:
  3649                           ;queue.c: 2044: else
  3650                           
  3651                           ;queue.c: 2045: {
  3652                           
  3653                           ;queue.c: 2046: xReturn = ( ( BaseType_t ) 0 );
  3654                           
  3655                           	line	2046
  3656  00E24A  00200007           	mov.w	#0,w7
  3657  00E24C  002FFFA6           	mov.w	#((0+f20056+0)-0),w6
  3658  00E24E  00478306           	add.w	sp,w6,w6
  3659  00E250  00780B07           	mov.w	w7,[w6]
  3660                           	line	2047
  3661  00E252                     lab854:
  3662                           ;queue.c: 2047: }
  3663                           
  3664                           ;queue.c: 2048: }
  3665                           
  3666                           ;queue.c: 2049: vPortExitCritical();
  3667                           
  3668                           	line	2049
  3669  00E252  0002CA22           	call	(_vPortExitCritical)
              00000000           
  3670                           ;queue.c: 2051: return xReturn;
  3671                           
  3672                           	line	2051
  3673  00E256  0097B85F           	mov.w	[sp+((0+f20056+0)-0)], w0
  3674  00E258  00780000           	mov.w	w0,w0
  3675  00E25A  0004E25E           	goto	lab852
              00000000           
  3676                           ;queue.c: 2052: }
  3677                           
  3678                           	line	2052
  3679  00E25E                     lab852:
  3680                           	local	_prvIsQueueFull
  3681                           
  3682  00E25E  00B1006F           	sub.w	#6,sp
  3683  00E260  00060000           	return
  3684                           	line	2035
  3685                           
  3686  00E262                     f20051:
  3687                           
  3688  00E262  00B0006F           	add.w	#6,sp
  3689  00E264  0004E21C           	goto	f20050
              00000000           
  3690  000000                     f20056	equ	-6		;stack offset for auto's
  3691  000000                     f20053	equ	-10		;stack offset for parameters
  3692                           	line	0
  3693                           	local	 __end_of_prvIsQueueFull
  3694  00E268                     __end_of_prvIsQueueFull:
  3695                           	global	_xQueueIsQueueFullFromISR
  3696                           	signat	_xQueueIsQueueFullFromISR,4154
  3697                           	line	2056
  3698  00E268                     _xQueueIsQueueFullFromISR:
  3699  00E268  0004E2AA           	goto	f20061
              00000000           
  3700  00E26C                     f20060:
  3701                           
  3702                           ;queue.c: 2055: BaseType_t xQueueIsQueueFullFrom
                                 ISR( const QueueHandle_t xQueue )
  3703                           
  3704                           ;queue.c: 2056: {
  3705                           
  3706                           ;queue.c: 2057: BaseType_t xReturn;
  3707                           
  3708                           ;queue.c: 2059: ;
  3709                           
  3710                           ;queue.c: 2060: if( ( ( Queue_t * ) xQueue )->ux
                                 MessagesWaiting == ( ( Queue_t * ) xQueue )->uxL
                                 ength )
  3711                           
  3712                           ;_xQueue stored from w0
  3713                           	line	2060
  3714  00E26C  002FFFC6           	mov.w	#((0+f20066+2)-0),w6
  3715  00E26E  00478306           	add.w	sp,w6,w6
  3716  00E270  00780B00           	mov.w	w0,[w6]
  3717  00E272  0097BB6F           	mov.w	[sp+((0+f20066+2)-0)],w6
  3718  00E274  00B001E6           	add.w	#30,w6
  3719  00E276  00780396           	mov.w	[w6],w7
  3720  00E278  0097BAEF           	mov.w	[sp+((0+f20066+2)-0)],w5
  3721  00E27A  00B001C5           	add.w	#28,w5
  3722  00E27C  00780315           	mov.w	[w5],w6
  3723  00E27E  00E13007           	cp.w	w6, w7
  3724  00E280  003A0002           	bra	nz,u681
  3725  00E282  0004E28A           	goto	u680
              00000000           
  3726  00E286                     u681:
  3727  00E286  0004E296           	goto	lab856
              00000000           
  3728  00E28A                     u680:
  3729                           ;queue.c: 2061: {
  3730                           
  3731                           ;queue.c: 2062: xReturn = ( ( BaseType_t ) 1 );
  3732                           
  3733                           	line	2062
  3734  00E28A  00200017           	mov.w	#01h,w7
  3735  00E28C  002FFFA6           	mov.w	#((0+f20066+0)-0),w6
  3736  00E28E  00478306           	add.w	sp,w6,w6
  3737  00E290  00780B07           	mov.w	w7,[w6]
  3738                           ;queue.c: 2063: }
  3739                           
  3740                           	line	2063
  3741  00E292  0004E29E           	goto	lab857
              00000000           
  3742                           	line	2064
  3743  00E296                     lab856:
  3744                           ;queue.c: 2064: else
  3745                           
  3746                           ;queue.c: 2065: {
  3747                           
  3748                           ;queue.c: 2066: xReturn = ( ( BaseType_t ) 0 );
  3749                           
  3750                           	line	2066
  3751  00E296  00200007           	mov.w	#0,w7
  3752  00E298  002FFFA6           	mov.w	#((0+f20066+0)-0),w6
  3753  00E29A  00478306           	add.w	sp,w6,w6
  3754  00E29C  00780B07           	mov.w	w7,[w6]
  3755                           	line	2067
  3756  00E29E                     lab857:
  3757                           ;queue.c: 2067: }
  3758                           
  3759                           ;queue.c: 2069: return xReturn;
  3760                           
  3761                           	line	2069
  3762  00E29E  0097B85F           	mov.w	[sp+((0+f20066+0)-0)], w0
  3763  00E2A0  00780000           	mov.w	w0,w0
  3764  00E2A2  0004E2A6           	goto	lab855
              00000000           
  3765                           ;queue.c: 2070: }
  3766                           
  3767                           	line	2070
  3768  00E2A6                     lab855:
  3769                           	global	_xQueueIsQueueFullFromISR
  3770                           
  3771  00E2A6  00B1006F           	sub.w	#6,sp
  3772  00E2A8  00060000           	return
  3773                           	line	2056
  3774                           
  3775  00E2AA                     f20061:
  3776                           
  3777  00E2AA  00B0006F           	add.w	#6,sp
  3778  00E2AC  0004E26C           	goto	f20060
              00000000           
  3779  000000                     f20066	equ	-6		;stack offset for auto's
  3780  000000                     f20063	equ	-10		;stack offset for parameters
  3781                           	line	0
  3782                           	global	 __end_of_xQueueIsQueueFullFromISR
  3783  00E2B0                     __end_of_xQueueIsQueueFullFromISR:
  3784                           	global	_xQueueCRSend
  3785                           	signat	_xQueueCRSend,12346
  3786                           	line	2076
  3787  00E2B0                     _xQueueCRSend:
  3788  00E2B0  0004E3A8           	goto	f20071
              00000000           
  3789  00E2B4                     f20070:
  3790                           
  3791                           ;queue.c: 2075: BaseType_t xQueueCRSend( QueueHa
                                 ndle_t xQueue, const void *pvItemToQueue, TickTy
                                 pe_t xTicksToWait )
  3792                           
  3793                           ;queue.c: 2076: {
  3794                           
  3795                           ;queue.c: 2077: BaseType_t xReturn;
  3796                           
  3797                           ;queue.c: 2078: Queue_t * const pxQueue = ( Queu
                                 e_t * ) xQueue;
  3798                           
  3799                           	line	2078
  3800  00E2B4  002FFF66           	mov.w	#((0+f20076+2)-0),w6
  3801  00E2B6  00478306           	add.w	sp,w6,w6
  3802  00E2B8  00780B00           	mov.w	w0,[w6]
  3803                           ;queue.c: 2083: SR |= ( ( uint16_t ) 0x01 << ( u
                                 int16_t ) 5 );asm("NOP");
  3804                           
  3805                           	line	2083
  3806  00E2BA  00200207           	mov.w	#020h,w7
  3807  00E2BC  00200426           	mov	#042h,w6
  3808  00E2BE  00780296           	mov.w	[w6],w5
  3809  00E2C0  00728B07           	ior.w	w5,w7,[w6]
  3810                           # 2083 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\queue.c"
  3811  00E2C2  00000000           NOP ;#
  3812                           
  3813                           ;queue.c: 2084: {
  3814                           
  3815                           ;queue.c: 2085: if( prvIsQueueFull( pxQueue ) !=
                                  ( ( BaseType_t ) 0 ) )
  3816                           
  3817                           #
  3818                           ;_xTicksToWait stored from w4
  3819                           	psect	text
  3820                           	line	2085
  3821  00E2C4  002FFF86           	mov.w	#((0+f20076+4)-0),w6
  3822  00E2C6  00478306           	add.w	sp,w6,w6
  3823  00E2C8  00780B04           	mov.w	w4,[w6]
  3824                           ;_pvItemToQueue stored from w2
  3825  00E2CA  002FFFA6           	mov.w	#((0+f20076+6)-0),w6
  3826  00E2CC  00478306           	add.w	sp,w6,w6
  3827  00E2CE  00780B02           	mov.w	w2,[w6]
  3828                           ;_xQueue stored from w0
  3829  00E2D0  002FFFC6           	mov.w	#((0+f20076+8)-0),w6
  3830  00E2D2  00478306           	add.w	sp,w6,w6
  3831  00E2D4  00780B00           	mov.w	w0,[w6]
  3832  00E2D6  0097B83F           	mov.w	[sp+((0+f20076+2)-0)],w0
  3833  00E2D8  0002E218           	call	(_prvIsQueueFull)	;0 bytes adjustment
              00000000           
  3834  00E2DC  00E00000           	cp0.w	w0
  3835  00E2DE  00320002           	bra	z,u691
  3836  00E2E0  0004E2E8           	goto	u690
              00000000           
  3837  00E2E4                     u691:
  3838  00E2E4  0004E320           	goto	lab859
              00000000           
  3839  00E2E8                     u690:
  3840                           ;queue.c: 2086: {
  3841                           
  3842                           ;queue.c: 2089: if( xTicksToWait > ( TickType_t 
                                 ) 0 )
  3843                           
  3844                           	line	2089
  3845  00E2E8  002FFF86           	mov.w	#((0+f20076+4)-0),w6
  3846  00E2EA  00478306           	add.w	sp,w6,w6
  3847  00E2EC  00E00016           	cp0.w	[w6]
  3848  00E2EE  00320002           	bra	z,u701
  3849  00E2F0  0004E2F8           	goto	u700
              00000000           
  3850  00E2F4                     u701:
  3851  00E2F4  0004E314           	goto	lab860
              00000000           
  3852  00E2F8                     u700:
  3853                           ;queue.c: 2090: {
  3854                           
  3855                           ;queue.c: 2093: vCoRoutineAddToDelayedList( xTic
                                 ksToWait, &( pxQueue->xTasksWaitingToSend ) );
  3856                           
  3857                           	global	_vCoRoutineAddToDelayedList
  3858                           	signat	_vCoRoutineAddToDelayedList,8250
  3859                           	line	2093
  3860  00E2F8  0097B93F           	mov.w	[sp+((0+f20076+2)-0)],w2
  3861  00E2FA  00B00082           	add.w	#8,w2
  3862  00E2FC  0097B84F           	mov.w	[sp+((0+f20076+4)-0)],w0
  3863  00E2FE  0002CBDA           	call	(_vCoRoutineAddToDelayedList)	;0 bytes adj
              00000000           ustment
  3864                           ;queue.c: 2094: SR &= ~( ( uint16_t ) 0x01 << ( 
                                 uint16_t ) 5 );asm("NOP");
  3865                           
  3866                           	line	2094
  3867  00E302  002FFDF0           	mov.w	#-33,w0
  3868  00E304  00B62042           	and.w	042h	;and 042h with w0
  3869                           # 2094 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\queue.c"
  3870  00E306  00000000           NOP ;#
  3871                           
  3872                           ;queue.c: 2095: return ( -4 );
  3873                           
  3874                           #
  3875                           	psect	text
  3876                           	line	2095
  3877  00E308  002FFFC0           	mov.w	#-4,w0
  3878  00E30A  00780000           	mov.w	w0,w0
  3879  00E30C  0004E3A4           	goto	lab858
              00000000           
  3880                           ;queue.c: 2096: }
  3881                           
  3882                           	line	2096
  3883  00E310  0004E320           	goto	lab861
              00000000           
  3884                           	line	2097
  3885  00E314                     lab860:
  3886                           ;queue.c: 2097: else
  3887                           
  3888                           ;queue.c: 2098: {
  3889                           
  3890                           ;queue.c: 2099: SR &= ~( ( uint16_t ) 0x01 << ( 
                                 uint16_t ) 5 );asm("NOP");
  3891                           
  3892                           	line	2099
  3893  00E314  002FFDF0           	mov.w	#-33,w0
  3894  00E316  00B62042           	and.w	042h	;and 042h with w0
  3895                           # 2099 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\queue.c"
  3896  00E318  00000000           NOP ;#
  3897                           
  3898                           ;queue.c: 2100: return ( ( BaseType_t ) 0 );
  3899                           
  3900                           #
  3901                           	psect	text
  3902                           	line	2100
  3903  00E31A  00200000           	mov.w	#0,w0	;return #0 in w0
  3904  00E31C  0004E3A4           	goto	lab858
              00000000           
  3905                           	line	2101
  3906  00E320                     lab861:
  3907                           	line	2102
  3908  00E320                     lab859:
  3909                           ;queue.c: 2101: }
  3910                           
  3911                           ;queue.c: 2102: }
  3912                           
  3913                           ;queue.c: 2103: }
  3914                           
  3915                           ;queue.c: 2104: SR &= ~( ( uint16_t ) 0x01 << ( 
                                 uint16_t ) 5 );asm("NOP");
  3916                           
  3917                           	line	2104
  3918  00E320  002FFDF0           	mov.w	#-33,w0
  3919  00E322  00B62042           	and.w	042h	;and 042h with w0
  3920                           # 2104 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\queue.c"
  3921  00E324  00000000           NOP ;#
  3922                           
  3923                           ;queue.c: 2106: SR |= ( ( uint16_t ) 0x01 << ( u
                                 int16_t ) 5 );asm("NOP");
  3924                           
  3925                           #
  3926                           	psect	text
  3927                           	line	2106
  3928  00E326  00200200           	mov.w	#020h,w0
  3929  00E328  00B72042           	ior.w	042h	;ior 042h with w0
  3930                           # 2106 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
                                 ces\queue.c"
  3931  00E32A  00000000           NOP ;#
  3932                           
  3933                           ;queue.c: 2107: {
  3934                           
  3935                           ;queue.c: 2108: if( pxQueue->uxMessagesWaiting <
                                  pxQueue->uxLength )
  3936                           
  3937                           #
  3938                           	psect	text
  3939                           	line	2108
  3940  00E32C  0097BB3F           	mov.w	[sp+((0+f20076+2)-0)],w6
  3941  00E32E  00B001E6           	add.w	#30,w6
  3942  00E330  00780396           	mov.w	[w6],w7
  3943  00E332  0097BABF           	mov.w	[sp+((0+f20076+2)-0)],w5
  3944  00E334  00B001C5           	add.w	#28,w5
  3945  00E336  00780315           	mov.w	[w5],w6
  3946  00E338  00E13007           	cp.w	w6, w7
  3947  00E33A  00310002           	bra	geu,u711
  3948  00E33C  0004E344           	goto	u710
              00000000           
  3949  00E340                     u711:
  3950  00E340  0004E38E           	goto	lab862
              00000000           
  3951  00E344                     u710:
  3952                           ;queue.c: 2109: {
  3953                           
  3954                           ;queue.c: 2111: prvCopyDataToQueue( pxQueue, pvI
                                 temToQueue, ( ( BaseType_t ) 0 ) );
  3955                           
  3956                           	line	2111
  3957  00E344  00200004           	mov.w	#0,w4
  3958  00E346  0097B95F           	mov.w	[sp+((0+f20076+6)-0)],w2
  3959  00E348  0097B83F           	mov.w	[sp+((0+f20076+2)-0)],w0
  3960  00E34A  0002DF20           	call	(_prvCopyDataToQueue)	;0 bytes adjustment
              00000000           
  3961                           ;queue.c: 2112: xReturn = ( ( ( BaseType_t ) 1 )
                                  );
  3962                           
  3963                           	line	2112
  3964  00E34E  00200017           	mov.w	#01h,w7
  3965  00E350  002FFF46           	mov.w	#((0+f20076+0)-0),w6
  3966  00E352  00478306           	add.w	sp,w6,w6
  3967  00E354  00780B07           	mov.w	w7,[w6]
  3968                           ;queue.c: 2115: if( ( ( BaseType_t ) ( ( &( pxQu
                                 eue->xTasksWaitingToReceive ) )->uxNumberOfItems
                                  == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 
                                 ) )
  3969                           
  3970                           	line	2115
  3971  00E356  0097BB3F           	mov.w	[sp+((0+f20076+2)-0)],w6
  3972  00E358  00B00126           	add.w	#18,w6
  3973  00E35A  00E00016           	cp0.w	[w6]
  3974  00E35C  00320002           	bra	z,u721
  3975  00E35E  0004E366           	goto	u720
              00000000           
  3976  00E362                     u721:
  3977  00E362  0004E38A           	goto	lab863
              00000000           
  3978  00E366                     u720:
  3979                           ;queue.c: 2116: {
  3980                           
  3981                           ;queue.c: 2121: if( xCoRoutineRemoveFromEventLis
                                 t( &( pxQueue->xTasksWaitingToReceive ) ) != ( (
                                  BaseType_t ) 0 ) )
  3982                           
  3983                           	global	_xCoRoutineRemoveFromEventList
  3984                           	signat	_xCoRoutineRemoveFromEventList,4154
  3985                           	line	2121
  3986  00E366  0097B83F           	mov.w	[sp+((0+f20076+2)-0)],w0
  3987  00E368  00B00120           	add.w	#18,w0
  3988  00E36A  0002CEFE           	call	(_xCoRoutineRemoveFromEventList)	;0 bytes 
              00000000           adjustment
  3989  00E36E  00E00000           	cp0.w	w0
  3990  00E370  00320002           	bra	z,u731
  3991  00E372  0004E37A           	goto	u730
              00000000           
  3992  00E376                     u731:
  3993+ 00E376  0004E386           	goto	lab864
      +       00000000           
  3994+ 00E37A                     u730:
  3995+                          ;queue.c: 2122: {
  3996+                          
  3997+                          ;queue.c: 2125: xReturn = ( -5 );
  3998+                          
  3999+                          	line	2125
  4000+ 00E37A  002FFFB7           	mov.w	#-5,w7
  4001+ 00E37C  002FFF46           	mov.w	#((0+f20076+0)-0),w6
  4002+ 00E37E  00478306           	add.w	sp,w6,w6
  4003+ 00E380  00780B07           	mov.w	w7,[w6]
  4004+                          ;queue.c: 2126: }
  4005+                          
  4006+                          	line	2126
  4007+ 00E382  0004E386           	goto	lab865
      +       00000000           
  4008+                          	line	2127
  4009+ 00E386                     lab864:
  4010+                          ;queue.c: 2127: else
  4011+                          
  4012+                          ;queue.c: 2128: {
  4013+                          
  4014+                          ;queue.c: 2129: ;
  4015+                          
  4016+                          	line	2130
  4017+ 00E386                     lab865:
  4018+                          ;queue.c: 2130: }
  4019+                          
  4020+                          ;queue.c: 2131: }
  4021+                          
  4022+                          	line	2131
  4023+ 00E386  0004E38A           	goto	lab866
      +       00000000           
  4024+                          	line	2132
  4025+ 00E38A                     lab863:
  4026+                          ;queue.c: 2132: else
  4027+                          
  4028+                          ;queue.c: 2133: {
  4029+                          
  4030+                          ;queue.c: 2134: ;
  4031+                          
  4032+                          	line	2135
  4033+ 00E38A                     lab866:
  4034+                          ;queue.c: 2135: }
  4035+                          
  4036+                          ;queue.c: 2136: }
  4037+                          
  4038+                          	line	2136
  4039+ 00E38A  0004E396           	goto	lab867
      +       00000000           
  4040+                          	line	2137
  4041+ 00E38E                     lab862:
  4042+                          ;queue.c: 2137: else
  4043+                          
  4044+                          ;queue.c: 2138: {
  4045+                          
  4046+                          ;queue.c: 2139: xReturn = ( ( BaseType_t ) 0 );
  4047+                          
  4048+                          	line	2139
  4049+ 00E38E  00200007           	mov.w	#0,w7
  4050+ 00E390  002FFF46           	mov.w	#((0+f20076+0)-0),w6
  4051+ 00E392  00478306           	add.w	sp,w6,w6
  4052+ 00E394  00780B07           	mov.w	w7,[w6]
  4053+                          	line	2140
  4054+ 00E396                     lab867:
  4055+                          ;queue.c: 2140: }
  4056+                          
  4057+                          ;queue.c: 2141: }
  4058+                          
  4059+                          ;queue.c: 2142: SR &= ~( ( uint16_t ) 0x01 << ( 
      +                          uint16_t ) 5 );asm("NOP");
  4060+                          
  4061+                          	line	2142
  4062+ 00E396  002FFDF0           	mov.w	#-33,w0
  4063+ 00E398  00B62042           	and.w	042h	;and 042h with w0
  4064+                          # 2142 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
      +                          ces\queue.c"
  4065+ 00E39A  00000000           NOP ;#
  4066+                          
  4067+                          ;queue.c: 2144: return xReturn;
  4068+                          
  4069+                          #
  4070+                          	psect	text
  4071+                          	line	2144
  4072+ 00E39C  0097B82F           	mov.w	[sp+((0+f20076+0)-0)], w0
  4073+ 00E39E  00780000           	mov.w	w0,w0
  4074+ 00E3A0  0004E3A4           	goto	lab858
      +       00000000           
  4075+                          ;queue.c: 2145: }
  4076+                          
  4077+                          	line	2145
  4078+ 00E3A4                     lab858:
  4079+                          	global	_xQueueCRSend
  4080+                          
  4081+ 00E3A4  00B100CF           	sub.w	#12,sp
  4082+ 00E3A6  00060000           	return
  4083+                          	line	2076
  4084+                          
  4085+ 00E3A8                     f20071:
  4086+                          
  4087+ 00E3A8  00B000CF           	add.w	#12,sp
  4088+ 00E3AA  0004E2B4           	goto	f20070
      +       00000000           
  4089+ 000000                     f20076	equ	-12		;stack offset for auto's
  4090+ 000000                     f20073	equ	-16		;stack offset for parameters
  4091+                          	line	0
  4092+                          	global	 __end_of_xQueueCRSend
  4093+ 00E3AE                     __end_of_xQueueCRSend:
  4094+                          	global	_xQueueCRReceive
  4095+                          	signat	_xQueueCRReceive,12346
  4096+                          	line	2153
  4097+ 00E3AE                     _xQueueCRReceive:
  4098+ 00E3AE  0004E4E4           	goto	f20101
      +       00000000           
  4099+ 00E3B2                     f20100:
  4100+                          
  4101+                          ;queue.c: 2152: BaseType_t xQueueCRReceive( Queu
      +                          eHandle_t xQueue, void *pvBuffer, TickType_t xTi
      +                          cksToWait )
  4102+                          
  4103+                          ;queue.c: 2153: {
  4104+                          
  4105+                          ;queue.c: 2154: BaseType_t xReturn;
  4106+                          
  4107+                          ;queue.c: 2155: Queue_t * const pxQueue = ( Queu
      +                          e_t * ) xQueue;
  4108+                          
  4109+                          	line	2155
  4110+ 00E3B2  002FFF66           	mov.w	#((0+f20106+2)-0),w6
  4111+ 00E3B4  00478306           	add.w	sp,w6,w6
  4112+ 00E3B6  00780B00           	mov.w	w0,[w6]
  4113+                          ;queue.c: 2160: SR |= ( ( uint16_t ) 0x01 << ( u
      +                          int16_t ) 5 );asm("NOP");
  4114+                          
  4115+                          	line	2160
  4116+ 00E3B8  00200207           	mov.w	#020h,w7
  4117+ 00E3BA  00200426           	mov	#042h,w6
  4118+ 00E3BC  00780296           	mov.w	[w6],w5
  4119+ 00E3BE  00728B07           	ior.w	w5,w7,[w6]
  4120+                          # 2160 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
      +                          ces\queue.c"
  4121+ 00E3C0  00000000           NOP ;#
  4122+                          
  4123+                          ;queue.c: 2161: {
  4124+                          
  4125+                          ;queue.c: 2162: if( pxQueue->uxMessagesWaiting =
      +                          = ( UBaseType_t ) 0 )
  4126+                          
  4127+                          #
  4128+                          ;_xTicksToWait stored from w4
  4129+                          	psect	text
  4130+                          	line	2162
  4131+ 00E3C2  002FFF86           	mov.w	#((0+f20106+4)-0),w6
  4132+ 00E3C4  00478306           	add.w	sp,w6,w6
  4133+ 00E3C6  00780B04           	mov.w	w4,[w6]
  4134+                          ;_pvBuffer stored from w2
  4135+ 00E3C8  002FFFA6           	mov.w	#((0+f20106+6)-0),w6
  4136+ 00E3CA  00478306           	add.w	sp,w6,w6
  4137+ 00E3CC  00780B02           	mov.w	w2,[w6]
  4138+                          ;_xQueue stored from w0
  4139+ 00E3CE  002FFFC6           	mov.w	#((0+f20106+8)-0),w6
  4140+ 00E3D0  00478306           	add.w	sp,w6,w6
  4141+ 00E3D2  00780B00           	mov.w	w0,[w6]
  4142+ 00E3D4  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4143+ 00E3D6  00B001C6           	add.w	#28,w6
  4144+ 00E3D8  00E00016           	cp0.w	[w6]
  4145+ 00E3DA  003A0002           	bra	nz,u741
  4146+ 00E3DC  0004E3E4           	goto	u740
      +       00000000           
  4147+ 00E3E0                     u741:
  4148+ 00E3E0  0004E420           	goto	lab869
      +       00000000           
  4149+ 00E3E4                     u740:
  4150+                          ;queue.c: 2163: {
  4151+                          
  4152+                          ;queue.c: 2166: if( xTicksToWait > ( TickType_t 
      +                          ) 0 )
  4153+                          
  4154+                          	line	2166
  4155+ 00E3E4  002FFF86           	mov.w	#((0+f20106+4)-0),w6
  4156+ 00E3E6  00478306           	add.w	sp,w6,w6
  4157+ 00E3E8  00E00016           	cp0.w	[w6]
  4158+ 00E3EA  00320002           	bra	z,u751
  4159+ 00E3EC  0004E3F4           	goto	u750
      +       00000000           
  4160+ 00E3F0                     u751:
  4161+ 00E3F0  0004E410           	goto	lab870
      +       00000000           
  4162+ 00E3F4                     u750:
  4163+                          ;queue.c: 2167: {
  4164+                          
  4165+                          ;queue.c: 2170: vCoRoutineAddToDelayedList( xTic
      +                          ksToWait, &( pxQueue->xTasksWaitingToReceive ) )
      +                          ;
  4166+                          
  4167+                          	line	2170
  4168+ 00E3F4  0097B93F           	mov.w	[sp+((0+f20106+2)-0)],w2
  4169+ 00E3F6  00B00122           	add.w	#18,w2
  4170+ 00E3F8  0097B84F           	mov.w	[sp+((0+f20106+4)-0)],w0
  4171+ 00E3FA  0002CBDA           	call	(_vCoRoutineAddToDelayedList)	;0 bytes adj
      +       00000000           ustment
  4172+                          ;queue.c: 2171: SR &= ~( ( uint16_t ) 0x01 << ( 
      +                          uint16_t ) 5 );asm("NOP");
  4173+                          
  4174+                          	line	2171
  4175+ 00E3FE  002FFDF0           	mov.w	#-33,w0
  4176+ 00E400  00B62042           	and.w	042h	;and 042h with w0
  4177+                          # 2171 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
      +                          ces\queue.c"
  4178+ 00E402  00000000           NOP ;#
  4179+                          
  4180+                          ;queue.c: 2172: return ( -4 );
  4181+                          
  4182+                          #
  4183+                          	psect	text
  4184+                          	line	2172
  4185+ 00E404  002FFFC0           	mov.w	#-4,w0
  4186+ 00E406  00780000           	mov.w	w0,w0
  4187+ 00E408  0004E4E0           	goto	lab868
      +       00000000           
  4188+                          ;queue.c: 2173: }
  4189+                          
  4190+                          	line	2173
  4191+ 00E40C  0004E41C           	goto	lab871
      +       00000000           
  4192+                          	line	2174
  4193+ 00E410                     lab870:
  4194+                          ;queue.c: 2174: else
  4195+                          
  4196+                          ;queue.c: 2175: {
  4197+                          
  4198+                          ;queue.c: 2176: SR &= ~( ( uint16_t ) 0x01 << ( 
      +                          uint16_t ) 5 );asm("NOP");
  4199+                          
  4200+                          	line	2176
  4201+ 00E410  002FFDF0           	mov.w	#-33,w0
  4202+ 00E412  00B62042           	and.w	042h	;and 042h with w0
  4203+                          # 2176 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
      +                          ces\queue.c"
  4204+ 00E414  00000000           NOP ;#
  4205+                          
  4206+                          ;queue.c: 2177: return ( ( BaseType_t ) 0 );
  4207+                          
  4208+                          #
  4209+                          	psect	text
  4210+                          	line	2177
  4211+ 00E416  00200000           	mov.w	#0,w0	;return #0 in w0
  4212+ 00E418  0004E4E0           	goto	lab868
      +       00000000           
  4213+                          	line	2178
  4214+ 00E41C                     lab871:
  4215+                          ;queue.c: 2178: }
  4216+                          
  4217+                          ;queue.c: 2179: }
  4218+                          
  4219+                          	line	2179
  4220+ 00E41C  0004E420           	goto	lab872
      +       00000000           
  4221+                          	line	2180
  4222+ 00E420                     lab869:
  4223+                          ;queue.c: 2180: else
  4224+                          
  4225+                          ;queue.c: 2181: {
  4226+                          
  4227+                          ;queue.c: 2182: ;
  4228+                          
  4229+                          	line	2183
  4230+ 00E420                     lab872:
  4231+                          ;queue.c: 2183: }
  4232+                          
  4233+                          ;queue.c: 2184: }
  4234+                          
  4235+                          ;queue.c: 2185: SR &= ~( ( uint16_t ) 0x01 << ( 
      +                          uint16_t ) 5 );asm("NOP");
  4236+                          
  4237+                          	line	2185
  4238+ 00E420  002FFDF0           	mov.w	#-33,w0
  4239+ 00E422  00B62042           	and.w	042h	;and 042h with w0
  4240+                          # 2185 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
      +                          ces\queue.c"
  4241+ 00E424  00000000           NOP ;#
  4242+                          
  4243+                          ;queue.c: 2187: SR |= ( ( uint16_t ) 0x01 << ( u
      +                          int16_t ) 5 );asm("NOP");
  4244+                          
  4245+                          #
  4246+                          	psect	text
  4247+                          	line	2187
  4248+ 00E426  00200200           	mov.w	#020h,w0
  4249+ 00E428  00B72042           	ior.w	042h	;ior 042h with w0
  4250+                          # 2187 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
      +                          ces\queue.c"
  4251+ 00E42A  00000000           NOP ;#
  4252+                          
  4253+                          ;queue.c: 2188: {
  4254+                          
  4255+                          ;queue.c: 2189: if( pxQueue->uxMessagesWaiting >
      +                           ( UBaseType_t ) 0 )
  4256+                          
  4257+                          #
  4258+                          	psect	text
  4259+                          	line	2189
  4260+ 00E42C  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4261+ 00E42E  00B001C6           	add.w	#28,w6
  4262+ 00E430  00E00016           	cp0.w	[w6]
  4263+ 00E432  00320002           	bra	z,u761
  4264+ 00E434  0004E43C           	goto	u760
      +       00000000           
  4265+ 00E438                     u761:
  4266+ 00E438  0004E4CA           	goto	lab873
      +       00000000           
  4267+ 00E43C                     u760:
  4268+                          ;queue.c: 2190: {
  4269+                          
  4270+                          ;queue.c: 2192: pxQueue->u.pcReadFrom += pxQueue
      +                          ->uxItemSize;
  4271+                          
  4272+                          	line	2192
  4273+ 00E43C  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4274+ 00E43E  00B00206           	add.w	#32,w6
  4275+ 00E440  00780396           	mov.w	[w6],w7
  4276+ 00E442  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4277+ 00E444  00B00066           	add.w	#6,w6
  4278+ 00E446  00780296           	mov.w	[w6],w5
  4279+ 00E448  00428B07           	add.w	w5,w7,[w6]
  4280+                          ;queue.c: 2193: if( pxQueue->u.pcReadFrom >= pxQ
      +                          ueue->pcTail )
  4281+                          
  4282+                          	line	2193
  4283+ 00E44A  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4284+ 00E44C  00B00026           	add.w	#2,w6
  4285+ 00E44E  00780396           	mov.w	[w6],w7
  4286+ 00E450  0097BABF           	mov.w	[sp+((0+f20106+2)-0)],w5
  4287+ 00E452  00B00065           	add.w	#6,w5
  4288+ 00E454  00780315           	mov.w	[w5],w6
  4289+ 00E456  00E13007           	cp.w	w6, w7
  4290+ 00E458  00390002           	bra	ltu,u771
  4291+ 00E45A  0004E462           	goto	u770
      +       00000000           
  4292+ 00E45E                     u771:
  4293+ 00E45E  0004E472           	goto	lab874
      +       00000000           
  4294+ 00E462                     u770:
  4295+                          ;queue.c: 2194: {
  4296+                          
  4297+                          ;queue.c: 2195: pxQueue->u.pcReadFrom = pxQueue-
      +                          >pcHead;
  4298+                          
  4299+                          	line	2195
  4300+ 00E462  0097BBBF           	mov.w	[sp+((0+f20106+2)-0)],w7
  4301+ 00E464  00780317           	mov.w	[w7],w6
  4302+ 00E466  002FFF67           	mov.w	#((0+f20106+2)-0),w7
  4303+ 00E468  00478387           	add.w	sp,w7,w7
  4304+ 00E46A  00780297           	mov	[w7],w5
  4305+ 00E46C  009802B6           	mov.w	w6,[w5+6]
  4306+                          ;queue.c: 2196: }
  4307+                          
  4308+                          	line	2196
  4309+ 00E46E  0004E472           	goto	lab875
      +       00000000           
  4310+                          	line	2197
  4311+ 00E472                     lab874:
  4312+                          ;queue.c: 2197: else
  4313+                          
  4314+                          ;queue.c: 2198: {
  4315+                          
  4316+                          ;queue.c: 2199: ;
  4317+                          
  4318+                          	line	2200
  4319+ 00E472                     lab875:
  4320+                          ;queue.c: 2200: }
  4321+                          
  4322+                          ;queue.c: 2201: --( pxQueue->uxMessagesWaiting )
      +                          ;
  4323+                          
  4324+                          	line	2201
  4325+ 00E472  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4326+ 00E474  00B001C6           	add.w	#28,w6
  4327+ 00E476  00E90B16           	dec.w	[w6],[w6]
  4328+                          ;queue.c: 2202: ( void ) memcpy( ( void * ) pvBu
      +                          ffer, ( void * ) pxQueue->u.pcReadFrom, ( unsign
      +                          ed ) pxQueue->uxItemSize );
  4329+                          
  4330+                          	line	2202
  4331+ 00E478  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4332+ 00E47A  00B00206           	add.w	#32,w6
  4333+ 00E47C  00780216           	mov.w	[w6],w4
  4334+ 00E47E  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4335+ 00E480  00B00066           	add.w	#6,w6
  4336+ 00E482  00780116           	mov.w	[w6],w2
  4337+ 00E484  0097B85F           	mov.w	[sp+((0+f20106+6)-0)],w0
  4338+ 00E486  0002C3F4           	call	(_memcpy)	;0 bytes adjustment
      +       00000000           
  4339+                          ;queue.c: 2204: xReturn = ( ( ( BaseType_t ) 1 )
      +                           );
  4340+                          
  4341+                          	line	2204
  4342+ 00E48A  00200017           	mov.w	#01h,w7
  4343+ 00E48C  002FFF46           	mov.w	#((0+f20106+0)-0),w6
  4344+ 00E48E  00478306           	add.w	sp,w6,w6
  4345+ 00E490  00780B07           	mov.w	w7,[w6]
  4346+                          ;queue.c: 2207: if( ( ( BaseType_t ) ( ( &( pxQu
      +                          eue->xTasksWaitingToSend ) )->uxNumberOfItems ==
      +                           ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
  4347+                          
  4348+                          	line	2207
  4349+ 00E492  0097BB3F           	mov.w	[sp+((0+f20106+2)-0)],w6
  4350+ 00E494  00B00086           	add.w	#8,w6
  4351+ 00E496  00E00016           	cp0.w	[w6]
  4352+ 00E498  00320002           	bra	z,u781
  4353+ 00E49A  0004E4A2           	goto	u780
      +       00000000           
  4354+ 00E49E                     u781:
  4355+ 00E49E  0004E4C6           	goto	lab876
      +       00000000           
  4356+ 00E4A2                     u780:
  4357+                          ;queue.c: 2208: {
  4358+                          
  4359+                          ;queue.c: 2213: if( xCoRoutineRemoveFromEventLis
      +                          t( &( pxQueue->xTasksWaitingToSend ) ) != ( ( Ba
      +                          seType_t ) 0 ) )
  4360+                          
  4361+                          	line	2213
  4362+ 00E4A2  0097B83F           	mov.w	[sp+((0+f20106+2)-0)],w0
  4363+ 00E4A4  00B00080           	add.w	#8,w0
  4364+ 00E4A6  0002CEFE           	call	(_xCoRoutineRemoveFromEventList)	;0 bytes 
      +       00000000           adjustment
  4365+ 00E4AA  00E00000           	cp0.w	w0
  4366+ 00E4AC  00320002           	bra	z,u791
  4367+ 00E4AE  0004E4B6           	goto	u790
      +       00000000           
  4368+ 00E4B2                     u791:
  4369+ 00E4B2  0004E4C2           	goto	lab877
      +       00000000           
  4370+ 00E4B6                     u790:
  4371+                          ;queue.c: 2214: {
  4372+                          
  4373+                          ;queue.c: 2215: xReturn = ( -5 );
  4374+                          
  4375+                          	line	2215
  4376+ 00E4B6  002FFFB7           	mov.w	#-5,w7
  4377+ 00E4B8  002FFF46           	mov.w	#((0+f20106+0)-0),w6
  4378+ 00E4BA  00478306           	add.w	sp,w6,w6
  4379+ 00E4BC  00780B07           	mov.w	w7,[w6]
  4380+                          ;queue.c: 2216: }
  4381+                          
  4382+                          	line	2216
  4383+ 00E4BE  0004E4C2           	goto	lab878
      +       00000000           
  4384+                          	line	2217
  4385+ 00E4C2                     lab877:
  4386+                          ;queue.c: 2217: else
  4387+                          
  4388+                          ;queue.c: 2218: {
  4389+                          
  4390+                          ;queue.c: 2219: ;
  4391+                          
  4392+                          	line	2220
  4393+ 00E4C2                     lab878:
  4394+                          ;queue.c: 2220: }
  4395+                          
  4396+                          ;queue.c: 2221: }
  4397+                          
  4398+                          	line	2221
  4399+ 00E4C2  0004E4C6           	goto	lab879
      +       00000000           
  4400+                          	line	2222
  4401+ 00E4C6                     lab876:
  4402+                          ;queue.c: 2222: else
  4403+                          
  4404+                          ;queue.c: 2223: {
  4405+                          
  4406+                          ;queue.c: 2224: ;
  4407+                          
  4408+                          	line	2225
  4409+ 00E4C6                     lab879:
  4410+                          ;queue.c: 2225: }
  4411+                          
  4412+                          ;queue.c: 2226: }
  4413+                          
  4414+                          	line	2226
  4415+ 00E4C6  0004E4D2           	goto	lab880
      +       00000000           
  4416+                          	line	2227
  4417+ 00E4CA                     lab873:
  4418+                          ;queue.c: 2227: else
  4419+                          
  4420+                          ;queue.c: 2228: {
  4421+                          
  4422+                          ;queue.c: 2229: xReturn = ( ( ( BaseType_t ) 0 )
      +                           );
  4423+                          
  4424+                          	line	2229
  4425+ 00E4CA  00200007           	mov.w	#0,w7
  4426+ 00E4CC  002FFF46           	mov.w	#((0+f20106+0)-0),w6
  4427+ 00E4CE  00478306           	add.w	sp,w6,w6
  4428+ 00E4D0  00780B07           	mov.w	w7,[w6]
  4429+                          	line	2230
  4430+ 00E4D2                     lab880:
  4431+                          ;queue.c: 2230: }
  4432+                          
  4433+                          ;queue.c: 2231: }
  4434+                          
  4435+                          ;queue.c: 2232: SR &= ~( ( uint16_t ) 0x01 << ( 
      +                          uint16_t ) 5 );asm("NOP");
  4436+                          
  4437+                          	line	2232
  4438+ 00E4D2  002FFDF0           	mov.w	#-33,w0
  4439+ 00E4D4  00B62042           	and.w	042h	;and 042h with w0
  4440+                          # 2232 "C:\Microchip\Dev\Aspirobot\FreeRTOS\Sour
      +                          ces\queue.c"
  4441+ 00E4D6  00000000           NOP ;#
  4442+                          
  4443+                          ;queue.c: 2234: return xReturn;
  4444+                          
  4445+                          #
  4446+                          	psect	text
  4447+                          	line	2234
  4448+ 00E4D8  0097B82F           	mov.w	[sp+((0+f20106+0)-0)], w0
  4449+ 00E4DA  00780000           	mov.w	w0,w0
  4450+ 00E4DC  0004E4E0           	goto	lab868
      +       00000000           
  4451+                          ;queue.c: 2235: }
  4452+                          
  4453+                          	line	2235
  4454+ 00E4E0                     lab868:
  4455+                          	global	_xQueueCRReceive
  4456+                          
  4457+ 00E4E0  00B100CF           	sub.w	#12,sp
  4458+ 00E4E2  00060000           	return
  4459+                          	line	2153
  4460+                          
  4461+ 00E4E4                     f20101:
  4462+                          
  4463+ 00E4E4  00B000CF           	add.w	#12,sp
  4464+ 00E4E6  0004E3B2           	goto	f20100
      +       00000000           
  4465+ 000000                     f20106	equ	-12		;stack offset for auto's
  4466+ 000000                     f20103	equ	-16		;stack offset for parameters
  4467+                          	line	0
  4468+                          	global	 __end_of_xQueueCRReceive
  4469+ 00E4EA                     __end_of_xQueueCRReceive:
  4470+                          	global	_xQueueCRSendFromISR
  4471+                          	signat	_xQueueCRSendFromISR,12346
  4472+                          	line	2243
  4473+ 00E4EA                     _xQueueCRSendFromISR:
  4474+ 00E4EA  0004E57E           	goto	f20111
      +       00000000           
  4475+ 00E4EE                     f20110:
  4476+                          
  4477+                          ;queue.c: 2242: BaseType_t xQueueCRSendFromISR( 
      +                          QueueHandle_t xQueue, const void *pvItemToQueue,
      +                           BaseType_t xCoRoutinePreviouslyWoken )
  4478+                          
  4479+                          ;queue.c: 2243: {
  4480+                          
  4481+                          ;queue.c: 2244: Queue_t * const pxQueue = ( Queu
      +                          e_t * ) xQueue;
  4482+                          
  4483+                          	line	2244
  4484+ 00E4EE  002FFF66           	mov.w	#((0+f20116+0)-0),w6
  4485+ 00E4F0  00478306           	add.w	sp,w6,w6
  4486+ 00E4F2  00780B00           	mov.w	w0,[w6]
  4487+                          ;queue.c: 2248: if( pxQueue->uxMessagesWaiting <
      +                           pxQueue->uxLength )
  4488+                          
  4489+                          ;_xCoRoutinePreviouslyWoken stored from w4
  4490+                          	line	2248
  4491+ 00E4F4  002FFF86           	mov.w	#((0+f20116+2)-0),w6
  4492+ 00E4F6  00478306           	add.w	sp,w6,w6
  4493+ 00E4F8  00780B04           	mov.w	w4,[w6]
  4494+                          ;_pvItemToQueue stored from w2
  4495+ 00E4FA  002FFFA6           	mov.w	#((0+f20116+4)-0),w6
  4496+ 00E4FC  00478306           	add.w	sp,w6,w6
  4497+ 00E4FE  00780B02           	mov.w	w2,[w6]
  4498+                          ;_xQueue stored from w0
  4499+ 00E500  002FFFC6           	mov.w	#((0+f20116+6)-0),w6
  4500+ 00E502  00478306           	add.w	sp,w6,w6
  4501+ 00E504  00780B00           	mov.w	w0,[w6]
  4502+ 00E506  0097BB3F           	mov.w	[sp+((0+f20116+0)-0)],w6
  4503+ 00E508  00B001E6           	add.w	#30,w6
  4504+ 00E50A  00780396           	mov.w	[w6],w7
  4505+ 00E50C  0097BABF           	mov.w	[sp+((0+f20116+0)-0)],w5
  4506+ 00E50E  00B001C5           	add.w	#28,w5
  4507+ 00E510  00780315           	mov.w	[w5],w6
  4508+ 00E512  00E13007           	cp.w	w6, w7
  4509+ 00E514  00310002           	bra	geu,u801
  4510+ 00E516  0004E51E           	goto	u800
      +       00000000           
  4511+ 00E51A                     u801:
  4512+ 00E51A  0004E572           	goto	lab882
      +       00000000           
  4513+ 00E51E                     u800:
  4514+                          ;queue.c: 2249: {
  4515+                          
  4516+                          ;queue.c: 2250: prvCopyDataToQueue( pxQueue, pvI
      +                          temToQueue, ( ( BaseType_t ) 0 ) );
  4517+                          
  4518+                          	line	2250
  4519+ 00E51E  00200004           	mov.w	#0,w4
  4520+ 00E520  0097B95F           	mov.w	[sp+((0+f20116+4)-0)],w2
  4521+ 00E522  0097B83F           	mov.w	[sp+((0+f20116+0)-0)],w0
  4522+ 00E524  0002DF20           	call	(_prvCopyDataToQueue)	;0 bytes adjustment
      +       00000000           
  4523+                          ;queue.c: 2254: if( xCoRoutinePreviouslyWoken ==
      +                           ( ( BaseType_t ) 0 ) )
  4524+                          
  4525+                          	line	2254
  4526+ 00E528  002FFF86           	mov.w	#((0+f20116+2)-0),w6
  4527+ 00E52A  00478306           	add.w	sp,w6,w6
  4528+ 00E52C  00E00016           	cp0.w	[w6]
  4529+ 00E52E  003A0002           	bra	nz,u811
  4530+ 00E530  0004E538           	goto	u810
      +       00000000           
  4531+ 00E534                     u811:
  4532+ 00E534  0004E56E           	goto	lab883
      +       00000000           
  4533+ 00E538                     u810:
  4534+                          ;queue.c: 2255: {
  4535+                          
  4536+                          ;queue.c: 2256: if( ( ( BaseType_t ) ( ( &( pxQu
      +                          eue->xTasksWaitingToReceive ) )->uxNumberOfItems
      +                           == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 
      +                          ) )
  4537+                          
  4538+                          	line	2256
  4539+ 00E538  0097BB3F           	mov.w	[sp+((0+f20116+0)-0)],w6
  4540+ 00E53A  00B00126           	add.w	#18,w6
  4541+ 00E53C  00E00016           	cp0.w	[w6]
  4542+ 00E53E  00320002           	bra	z,u821
  4543+ 00E540  0004E548           	goto	u820
      +       00000000           
  4544+ 00E544                     u821:
  4545+ 00E544  0004E56A           	goto	lab884
      +       00000000           
  4546+ 00E548                     u820:
  4547+                          ;queue.c: 2257: {
  4548+                          
  4549+                          ;queue.c: 2258: if( xCoRoutineRemoveFromEventLis
      +                          t( &( pxQueue->xTasksWaitingToReceive ) ) != ( (
      +                           BaseType_t ) 0 ) )
  4550+                          
  4551+                          	line	2258
  4552+ 00E548  0097B83F           	mov.w	[sp+((0+f20116+0)-0)],w0
  4553+ 00E54A  00B00120           	add.w	#18,w0
  4554+ 00E54C  0002CEFE           	call	(_xCoRoutineRemoveFromEventList)	;0 bytes 
      +       00000000           adjustment
  4555+ 00E550  00E00000           	cp0.w	w0
  4556+ 00E552  00320002           	bra	z,u831
  4557+ 00E554  0004E55C           	goto	u830
      +       00000000           
  4558+ 00E558                     u831:
  4559+ 00E558  0004E566           	goto	lab885
      +       00000000           
  4560+ 00E55C                     u830:
  4561+                          ;queue.c: 2259: {
  4562+                          
  4563+                          ;queue.c: 2260: return ( ( BaseType_t ) 1 );
  4564+                          
  4565+                          	line	2260
  4566+ 00E55C  00200010           	mov.w	#1,w0	;return #1 in w0
  4567+ 00E55E  0004E57A           	goto	lab881
      +       00000000           
  4568+                          ;queue.c: 2261: }
  4569+                          
  4570+                          	line	2261
  4571+ 00E562  0004E566           	goto	lab886
      +       00000000           
  4572+                          	line	2262
  4573+ 00E566                     lab885:
  4574+                          ;queue.c: 2262: else
  4575+                          
  4576+                          ;queue.c: 2263: {
  4577+                          
  4578+                          ;queue.c: 2264: ;
  4579+                          
  4580+                          	line	2265
  4581+ 00E566                     lab886:
  4582+                          ;queue.c: 2265: }
  4583+                          
  4584+                          ;queue.c: 2266: }
  4585+                          
  4586+                          	line	2266
  4587+ 00E566  0004E56A           	goto	lab887
      +       00000000           
  4588+                          	line	2267
  4589+ 00E56A                     lab884:
  4590+                          ;queue.c: 2267: else
  4591+                          
  4592+                          ;queue.c: 2268: {
  4593+                          
  4594+                          ;queue.c: 2269: ;
  4595+                          
  4596+                          	line	2270
  4597+ 00E56A                     lab887:
  4598+                          ;queue.c: 2270: }
  4599+                          
  4600+                          ;queue.c: 2271: }
  4601+                          
  4602+                          	line	2271
  4603+ 00E56A  0004E56E           	goto	lab888
      +       00000000           
  4604+                          	line	2272
  4605+ 00E56E                     lab883:
  4606+                          ;queue.c: 2272: else
  4607+                          
  4608+                          ;queue.c: 2273: {
  4609+                          
  4610+                          ;queue.c: 2274: ;
  4611+                          
  4612+                          	line	2275
  4613+ 00E56E                     lab888:
  4614+                          ;queue.c: 2275: }
  4615+                          
  4616+                          ;queue.c: 2276: }
  4617+                          
  4618+                          	line	2276
  4619+ 00E56E  0004E572           	goto	lab889
      +       00000000           
  4620+                          	line	2277
  4621+ 00E572                     lab882:
  4622+                          ;queue.c: 2277: else
  4623+                          
  4624+                          ;queue.c: 2278: {
  4625+                          
  4626+                          ;queue.c: 2279: ;
  4627+                          
  4628+                          	line	2280
  4629+ 00E572                     lab889:
  4630+                          ;queue.c: 2280: }
  4631+                          
  4632+                          ;queue.c: 2282: return xCoRoutinePreviouslyWoken
      +                          ;
  4633+                          
  4634+                          	line	2282
  4635+ 00E572  0097B84F           	mov.w	[sp+((0+f20116+2)-0)], w0
  4636+ 00E574  00780000           	mov.w	w0,w0
  4637+ 00E576  0004E57A           	goto	lab881
      +       00000000           
  4638+                          ;queue.c: 2283: }
  4639+                          
  4640+                          	line	2283
  4641+ 00E57A                     lab881:
  4642+                          	global	_xQueueCRSendFromISR
  4643+                          
  4644+ 00E57A  00B100AF           	sub.w	#10,sp
  4645+ 00E57C  00060000           	return
  4646+                          	line	2243
  4647+                          
  4648+ 00E57E                     f20111:
  4649+                          
  4650+ 00E57E  00B000AF           	add.w	#10,sp
  4651+ 00E580  0004E4EE           	goto	f20110
      +       00000000           
  4652+ 000000                     f20116	equ	-10		;stack offset for auto's
  4653+ 000000                     f20113	equ	-14		;stack offset for parameters
  4654+                          	line	0
  4655+                          	global	 __end_of_xQueueCRSendFromISR
  4656+ 00E584                     __end_of_xQueueCRSendFromISR:
  4657+                          	global	_xQueueCRReceiveFromISR
  4658+                          	signat	_xQueueCRReceiveFromISR,12346
  4659+                          	line	2291
  4660+ 00E584                     _xQueueCRReceiveFromISR:
  4661+ 00E584  0004E66A           	goto	f20121
      +       00000000           
  4662+ 00E588                     f20120:
  4663+                          
  4664+                          ;queue.c: 2290: BaseType_t xQueueCRReceiveFromIS
      +                          R( QueueHandle_t xQueue, void *pvBuffer, BaseTyp
      +                          e_t *pxCoRoutineWoken )
  4665+                          
  4666+                          ;queue.c: 2291: {
  4667+                          
  4668+                          ;queue.c: 2292: BaseType_t xReturn;
  4669+                          
  4670+                          ;queue.c: 2293: Queue_t * const pxQueue = ( Queu
      +                          e_t * ) xQueue;
  4671+                          
  4672+                          	line	2293
  4673+ 00E588  002FFF66           	mov.w	#((0+f20126+2)-0),w6
  4674+ 00E58A  00478306           	add.w	sp,w6,w6
  4675+ 00E58C  00780B00           	mov.w	w0,[w6]
  4676+                          ;queue.c: 2297: if( pxQueue->uxMessagesWaiting >
      +                           ( UBaseType_t ) 0 )
  4677+                          
  4678+                          ;_pxCoRoutineWoken stored from w4
  4679+                          	line	2297
  4680+ 00E58E  002FFF86           	mov.w	#((0+f20126+4)-0),w6
  4681+ 00E590  00478306           	add.w	sp,w6,w6
  4682+ 00E592  00780B04           	mov.w	w4,[w6]
  4683+                          ;_pvBuffer stored from w2
  4684+ 00E594  002FFFA6           	mov.w	#((0+f20126+6)-0),w6
  4685+ 00E596  00478306           	add.w	sp,w6,w6
  4686+ 00E598  00780B02           	mov.w	w2,[w6]
  4687+                          ;_xQueue stored from w0
  4688+ 00E59A  002FFFC6           	mov.w	#((0+f20126+8)-0),w6
  4689+ 00E59C  00478306           	add.w	sp,w6,w6
  4690+ 00E59E  00780B00           	mov.w	w0,[w6]
  4691+ 00E5A0  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4692+ 00E5A2  00B001C6           	add.w	#28,w6
  4693+ 00E5A4  00E00016           	cp0.w	[w6]
  4694+ 00E5A6  00320002           	bra	z,u841
  4695+ 00E5A8  0004E5B0           	goto	u840
      +       00000000           
  4696+ 00E5AC                     u841:
  4697+ 00E5AC  0004E656           	goto	lab891
      +       00000000           
  4698+ 00E5B0                     u840:
  4699+                          ;queue.c: 2298: {
  4700+                          
  4701+                          ;queue.c: 2300: pxQueue->u.pcReadFrom += pxQueue
      +                          ->uxItemSize;
  4702+                          
  4703+                          	line	2300
  4704+ 00E5B0  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4705+ 00E5B2  00B00206           	add.w	#32,w6
  4706+ 00E5B4  00780396           	mov.w	[w6],w7
  4707+ 00E5B6  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4708+ 00E5B8  00B00066           	add.w	#6,w6
  4709+ 00E5BA  00780296           	mov.w	[w6],w5
  4710+ 00E5BC  00428B07           	add.w	w5,w7,[w6]
  4711+                          ;queue.c: 2301: if( pxQueue->u.pcReadFrom >= pxQ
      +                          ueue->pcTail )
  4712+                          
  4713+                          	line	2301
  4714+ 00E5BE  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4715+ 00E5C0  00B00026           	add.w	#2,w6
  4716+ 00E5C2  00780396           	mov.w	[w6],w7
  4717+ 00E5C4  0097BABF           	mov.w	[sp+((0+f20126+2)-0)],w5
  4718+ 00E5C6  00B00065           	add.w	#6,w5
  4719+ 00E5C8  00780315           	mov.w	[w5],w6
  4720+ 00E5CA  00E13007           	cp.w	w6, w7
  4721+ 00E5CC  00390002           	bra	ltu,u851
  4722+ 00E5CE  0004E5D6           	goto	u850
      +       00000000           
  4723+ 00E5D2                     u851:
  4724+ 00E5D2  0004E5E6           	goto	lab892
      +       00000000           
  4725+ 00E5D6                     u850:
  4726+                          ;queue.c: 2302: {
  4727+                          
  4728+                          ;queue.c: 2303: pxQueue->u.pcReadFrom = pxQueue-
      +                          >pcHead;
  4729+                          
  4730+                          	line	2303
  4731+ 00E5D6  0097BBBF           	mov.w	[sp+((0+f20126+2)-0)],w7
  4732+ 00E5D8  00780317           	mov.w	[w7],w6
  4733+ 00E5DA  002FFF67           	mov.w	#((0+f20126+2)-0),w7
  4734+ 00E5DC  00478387           	add.w	sp,w7,w7
  4735+ 00E5DE  00780297           	mov	[w7],w5
  4736+ 00E5E0  009802B6           	mov.w	w6,[w5+6]
  4737+                          ;queue.c: 2304: }
  4738+                          
  4739+                          	line	2304
  4740+ 00E5E2  0004E5E6           	goto	lab893
      +       00000000           
  4741+                          	line	2305
  4742+ 00E5E6                     lab892:
  4743+                          ;queue.c: 2305: else
  4744+                          
  4745+                          ;queue.c: 2306: {
  4746+                          
  4747+                          ;queue.c: 2307: ;
  4748+                          
  4749+                          	line	2308
  4750+ 00E5E6                     lab893:
  4751+                          ;queue.c: 2308: }
  4752+                          
  4753+                          ;queue.c: 2309: --( pxQueue->uxMessagesWaiting )
      +                          ;
  4754+                          
  4755+                          	line	2309
  4756+ 00E5E6  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4757+ 00E5E8  00B001C6           	add.w	#28,w6
  4758+ 00E5EA  00E90B16           	dec.w	[w6],[w6]
  4759+                          ;queue.c: 2310: ( void ) memcpy( ( void * ) pvBu
      +                          ffer, ( void * ) pxQueue->u.pcReadFrom, ( unsign
      +                          ed ) pxQueue->uxItemSize );
  4760+                          
  4761+                          	line	2310
  4762+ 00E5EC  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4763+ 00E5EE  00B00206           	add.w	#32,w6
  4764+ 00E5F0  00780216           	mov.w	[w6],w4
  4765+ 00E5F2  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4766+ 00E5F4  00B00066           	add.w	#6,w6
  4767+ 00E5F6  00780116           	mov.w	[w6],w2
  4768+ 00E5F8  0097B85F           	mov.w	[sp+((0+f20126+6)-0)],w0
  4769+ 00E5FA  0002C3F4           	call	(_memcpy)	;0 bytes adjustment
      +       00000000           
  4770+                          ;queue.c: 2312: if( ( *pxCoRoutineWoken ) == ( (
      +                           BaseType_t ) 0 ) )
  4771+                          
  4772+                          	line	2312
  4773+ 00E5FE  002FFF86           	mov.w	#((0+f20126+4)-0),w6
  4774+ 00E600  00478306           	add.w	sp,w6,w6
  4775+ 00E602  00780316           	mov.w	[w6],w6
  4776+ 00E604  00E00016           	cp0.w	[w6]
  4777+ 00E606  003A0002           	bra	nz,u861
  4778+ 00E608  0004E610           	goto	u860
      +       00000000           
  4779+ 00E60C                     u861:
  4780+ 00E60C  0004E64A           	goto	lab894
      +       00000000           
  4781+ 00E610                     u860:
  4782+                          ;queue.c: 2313: {
  4783+                          
  4784+                          ;queue.c: 2314: if( ( ( BaseType_t ) ( ( &( pxQu
      +                          eue->xTasksWaitingToSend ) )->uxNumberOfItems ==
      +                           ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
  4785+                          
  4786+                          	line	2314
  4787+ 00E610  0097BB3F           	mov.w	[sp+((0+f20126+2)-0)],w6
  4788+ 00E612  00B00086           	add.w	#8,w6
  4789+ 00E614  00E00016           	cp0.w	[w6]
  4790+ 00E616  00320002           	bra	z,u871
  4791+ 00E618  0004E620           	goto	u870
      +       00000000           
  4792+ 00E61C                     u871:
  4793+ 00E61C  0004E646           	goto	lab895
      +       00000000           
  4794+ 00E620                     u870:
  4795+                          ;queue.c: 2315: {
  4796+                          
  4797+                          ;queue.c: 2316: if( xCoRoutineRemoveFromEventLis
      +                          t( &( pxQueue->xTasksWaitingToSend ) ) != ( ( Ba
      +                          seType_t ) 0 ) )
  4798+                          
  4799+                          	line	2316
  4800+ 00E620  0097B83F           	mov.w	[sp+((0+f20126+2)-0)],w0
  4801+ 00E622  00B00080           	add.w	#8,w0
  4802+ 00E624  0002CEFE           	call	(_xCoRoutineRemoveFromEventList)	;0 bytes 
      +       00000000           adjustment
  4803+ 00E628  00E00000           	cp0.w	w0
  4804+ 00E62A  00320002           	bra	z,u881
  4805+ 00E62C  0004E634           	goto	u880
      +       00000000           
  4806+ 00E630                     u881:
  4807+ 00E630  0004E642           	goto	lab896
      +       00000000           
  4808+ 00E634                     u880:
  4809+                          ;queue.c: 2317: {
  4810+                          
  4811+                          ;queue.c: 2318: *pxCoRoutineWoken = ( ( BaseType
      +                          _t ) 1 );
  4812+                          
  4813+                          	line	2318
  4814+ 00E634  002FFF86           	mov.w	#((0+f20126+4)-0),w6
  4815+ 00E636  00478306           	add.w	sp,w6,w6
  4816+ 00E638  00780316           	mov.w	[w6],w6
  4817+ 00E63A  00200017           	mov.w	#01h,w7
  4818+ 00E63C  00780B07           	mov.w	w7,[w6]
  4819+                          ;queue.c: 2319: }
  4820+                          
  4821+                          	line	2319
  4822+ 00E63E  0004E642           	goto	lab897
      +       00000000           
  4823+                          	line	2320
  4824+ 00E642                     lab896:
  4825+                          ;queue.c: 2320: else
  4826+                          
  4827+                          ;queue.c: 2321: {
  4828+                          
  4829+                          ;queue.c: 2322: ;
  4830+                          
  4831+                          	line	2323
  4832+ 00E642                     lab897:
  4833+                          ;queue.c: 2323: }
  4834+                          
  4835+                          ;queue.c: 2324: }
  4836+                          
  4837+                          	line	2324
  4838+ 00E642  0004E646           	goto	lab898
      +       00000000           
  4839+                          	line	2325
  4840+ 00E646                     lab895:
  4841+                          ;queue.c: 2325: else
  4842+                          
  4843+                          ;queue.c: 2326: {
  4844+                          
  4845+                          ;queue.c: 2327: ;
  4846+                          
  4847+                          	line	2328
  4848+ 00E646                     lab898:
  4849+                          ;queue.c: 2328: }
  4850+                          
  4851+                          ;queue.c: 2329: }
  4852+                          
  4853+                          	line	2329
  4854+ 00E646  0004E64A           	goto	lab899
      +       00000000           
  4855+                          	line	2330
  4856+ 00E64A                     lab894:
  4857+                          ;queue.c: 2330: else
  4858+                          
  4859+                          ;queue.c: 2331: {
  4860+                          
  4861+                          ;queue.c: 2332: ;
  4862+                          
  4863+                          	line	2333
  4864+ 00E64A                     lab899:
  4865+                          ;queue.c: 2333: }
  4866+                          
  4867+                          ;queue.c: 2335: xReturn = ( ( ( BaseType_t ) 1 )
      +                           );
  4868+                          
  4869+                          	line	2335
  4870+ 00E64A  00200017           	mov.w	#01h,w7
  4871+ 00E64C  002FFF46           	mov.w	#((0+f20126+0)-0),w6
  4872+ 00E64E  00478306           	add.w	sp,w6,w6
  4873+ 00E650  00780B07           	mov.w	w7,[w6]
  4874+                          ;queue.c: 2336: }
  4875+                          
  4876+                          	line	2336
  4877+ 00E652  0004E65E           	goto	lab900
      +       00000000           
  4878+                          	line	2337
  4879+ 00E656                     lab891:
  4880+                          ;queue.c: 2337: else
  4881+                          
  4882+                          ;queue.c: 2338: {
  4883+                          
  4884+                          ;queue.c: 2339: xReturn = ( ( ( BaseType_t ) 0 )
      +                           );
  4885+                          
  4886+                          	line	2339
  4887+ 00E656  00200007           	mov.w	#0,w7
  4888+ 00E658  002FFF46           	mov.w	#((0+f20126+0)-0),w6
  4889+ 00E65A  00478306           	add.w	sp,w6,w6
  4890+ 00E65C  00780B07           	mov.w	w7,[w6]
  4891+                          	line	2340
  4892+ 00E65E                     lab900:
  4893+                          ;queue.c: 2340: }
  4894+                          
  4895+                          ;queue.c: 2342: return xReturn;
  4896+                          
  4897+                          	line	2342
  4898+ 00E65E  0097B82F           	mov.w	[sp+((0+f20126+0)-0)], w0
  4899+ 00E660  00780000           	mov.w	w0,w0
  4900+ 00E662  0004E666           	goto	lab890
      +       00000000           
  4901+                          ;queue.c: 2343: }
  4902+                          
  4903+                          	line	2343
  4904+ 00E666                     lab890:
  4905+                          	global	_xQueueCRReceiveFromISR
  4906+                          
  4907+ 00E666  00B100CF           	sub.w	#12,sp
  4908+ 00E668  00060000           	return
  4909+                          	line	2291
  4910+                          
  4911+ 00E66A                     f20121:
  4912+                          
  4913+ 00E66A  00B000CF           	add.w	#12,sp
  4914+ 00E66C  0004E588           	goto	f20120
      +       00000000           
  4915+ 000000                     f20126	equ	-12		;stack offset for auto's
  4916+ 000000                     f20123	equ	-16		;stack offset for parameters
  4917+                          	line	0
  4918+                          	global	 __end_of_xQueueCRReceiveFromISR
  4919+ 00E670                     __end_of_xQueueCRReceiveFromISR:
  4920+ 000000                     _ACCAH	equ	36
  4921+ 000000                     _ACCAL	equ	34
  4922+ 000000                     _ACCAU	equ	38
  4923+ 000000                     _ACCAUbits	equ	38
  4924+ 000000                     _ACCBH	equ	42
  4925+ 000000                     _ACCBL	equ	40
  4926+ 000000                     _ACCBU	equ	44
  4927+ 000000                     _ACCBUbits	equ	44
  4928+ 000000                     _ADCBUF0	equ	640
  4929+ 000000                     _ADCBUF0bits	equ	640
  4930+ 000000                     _ADCBUF1	equ	642
  4931+ 000000                     _ADCBUF1bits	equ	642
  4932+ 000000                     _ADCBUF2	equ	644
  4933+ 000000                     _ADCBUF2bits	equ	644
  4934+ 000000                     _ADCBUF3	equ	646
  4935+ 000000                     _ADCBUF3bits	equ	646
  4936+ 000000                     _ADCBUF4	equ	648
  4937+ 000000                     _ADCBUF4bits	equ	648
  4938+ 000000                     _ADCBUF5	equ	650
  4939+ 000000                     _ADCBUF5bits	equ	650
  4940+ 000000                     _ADCBUF6	equ	652
  4941+ 000000                     _ADCBUF6bits	equ	652
  4942+ 000000                     _ADCBUF7	equ	654
  4943+ 000000                     _ADCBUF7bits	equ	654
  4944+ 000000                     _ADCBUF8	equ	656
  4945+ 000000                     _ADCBUF8bits	equ	656
  4946+ 000000                     _ADCBUF9	equ	658
  4947+ 000000                     _ADCBUF9bits	equ	658
  4948+ 000000                     _ADCBUFA	equ	660
  4949+ 000000                     _ADCBUFAbits	equ	660
  4950+ 000000                     _ADCBUFB	equ	662
  4951+ 000000                     _ADCBUFBbits	equ	662
  4952+ 000000                     _ADCBUFC	equ	664
  4953+ 000000                     _ADCBUFCbits	equ	664
  4954+ 000000                     _ADCBUFD	equ	666
  4955+ 000000                     _ADCBUFDbits	equ	666
  4956+ 000000                     _ADCBUFE	equ	668
  4957+ 000000                     _ADCBUFEbits	equ	668
  4958+ 000000                     _ADCBUFF	equ	670
  4959+ 000000                     _ADCBUFFbits	equ	670
  4960+ 000000                     _ADCHS	equ	678
  4961+ 000000                     _ADCHSbits	equ	678
  4962+ 000000                     _ADCON1	equ	672
  4963+ 000000                     _ADCON1bits	equ	672
  4964+ 000000                     _ADCON2	equ	674
  4965+ 000000                     _ADCON2bits	equ	674
  4966+ 000000                     _ADCON3	equ	676
  4967+ 000000                     _ADCON3bits	equ	676
  4968+ 000000                     _ADCSSL	equ	682
  4969+ 000000                     _ADCSSLbits	equ	682
  4970+ 000000                     _ADPCFG	equ	680
  4971+ 000000                     _ADPCFGbits	equ	680
  4972+ 000000                     _BSRAM	equ	1872
  4973+ 000000                     _BSRAMbits	equ	1872
  4974+ 000000                     _C1CFG1	equ	914
  4975+ 000000                     _C1CFG1bits	equ	914
  4976+ 000000                     _C1CFG2	equ	916
  4977+ 000000                     _C1CFG2bits	equ	916
  4978+ 000000                     _C1CTRL	equ	912
  4979+ 000000                     _C1CTRLbits	equ	912
  4980+ 000000                     _C1EC	equ	922
  4981+ 000000                     _C1ECbits	equ	922
  4982+ 000000                     _C1INTE	equ	920
  4983+ 000000                     _C1INTEbits	equ	920
  4984+ 000000                     _C1INTF	equ	918
  4985+ 000000                     _C1INTFbits	equ	918
  4986+ 000000                     _C1RX0B1	equ	902
  4987+ 000000                     _C1RX0B1bits	equ	902
  4988+ 000000                     _C1RX0B2	equ	904
  4989+ 000000                     _C1RX0B2bits	equ	904
  4990+ 000000                     _C1RX0B3	equ	906
  4991+ 000000                     _C1RX0B3bits	equ	906
  4992+ 000000                     _C1RX0B4	equ	908
  4993+ 000000                     _C1RX0B4bits	equ	908
  4994+ 000000                     _C1RX0CON	equ	910
  4995+ 000000                     _C1RX0CONbits	equ	910
  4996+ 000000                     _C1RX0DLC	equ	900
  4997+ 000000                     _C1RX0DLCbits	equ	900
  4998+ 000000                     _C1RX0EID	equ	898
  4999+ 000000                     _C1RX0EIDbits	equ	898
  5000+ 000000                     _C1RX0SID	equ	896
  5001+ 000000                     _C1RX0SIDbits	equ	896
  5002+ 000000                     _C1RX1B1	equ	886
  5003+ 000000                     _C1RX1B1bits	equ	886
  5004+ 000000                     _C1RX1B2	equ	888
  5005+ 000000                     _C1RX1B2bits	equ	888
  5006+ 000000                     _C1RX1B3	equ	890
  5007+ 000000                     _C1RX1B3bits	equ	890
  5008+ 000000                     _C1RX1B4	equ	892
  5009+ 000000                     _C1RX1B4bits	equ	892
  5010+ 000000                     _C1RX1CON	equ	894
  5011+ 000000                     _C1RX1CONbits	equ	894
  5012+ 000000                     _C1RX1DLC	equ	884
  5013+ 000000                     _C1RX1DLCbits	equ	884
  5014+ 000000                     _C1RX1EID	equ	882
  5015+ 000000                     _C1RX1EIDbits	equ	882
  5016  000000                     _C1RX1SID	equ	880
  5017  000000                     _C1RX1SIDbits	equ	880
  5018  000000                     _C1RXF0EIDH	equ	770
  5019  000000                     _C1RXF0EIDHbits	equ	770
  5020  000000                     _C1RXF0EIDL	equ	772
  5021  000000                     _C1RXF0EIDLbits	equ	772
  5022  000000                     _C1RXF0SID	equ	768
  5023  000000                     _C1RXF0SIDbits	equ	768
  5024  000000                     _C1RXF1EIDH	equ	778
  5025  000000                     _C1RXF1EIDHbits	equ	778
  5026  000000                     _C1RXF1EIDL	equ	780
  5027  000000                     _C1RXF1EIDLbits	equ	780
  5028  000000                     _C1RXF1SID	equ	776
  5029  000000                     _C1RXF1SIDbits	equ	776
  5030  000000                     _C1RXF2EIDH	equ	786
  5031  000000                     _C1RXF2EIDHbits	equ	786
  5032  000000                     _C1RXF2EIDL	equ	788
  5033  000000                     _C1RXF2EIDLbits	equ	788
  5034  000000                     _C1RXF2SID	equ	784
  5035  000000                     _C1RXF2SIDbits	equ	784
  5036  000000                     _C1RXF3EIDH	equ	794
  5037  000000                     _C1RXF3EIDHbits	equ	794
  5038  000000                     _C1RXF3EIDL	equ	796
  5039  000000                     _C1RXF3EIDLbits	equ	796
  5040  000000                     _C1RXF3SID	equ	792
  5041  000000                     _C1RXF3SIDbits	equ	792
  5042  000000                     _C1RXF4EIDH	equ	802
  5043  000000                     _C1RXF4EIDHbits	equ	802
  5044  000000                     _C1RXF4EIDL	equ	804
  5045  000000                     _C1RXF4EIDLbits	equ	804
  5046  000000                     _C1RXF4SID	equ	800
  5047  000000                     _C1RXF4SIDbits	equ	800
  5048  000000                     _C1RXF5EIDH	equ	810
  5049  000000                     _C1RXF5EIDHbits	equ	810
  5050  000000                     _C1RXF5EIDL	equ	812
  5051  000000                     _C1RXF5EIDLbits	equ	812
  5052  000000                     _C1RXF5SID	equ	808
  5053  000000                     _C1RXF5SIDbits	equ	808
  5054  000000                     _C1RXM0EIDH	equ	818
  5055  000000                     _C1RXM0EIDHbits	equ	818
  5056  000000                     _C1RXM0EIDL	equ	820
  5057  000000                     _C1RXM0EIDLbits	equ	820
  5058  000000                     _C1RXM0SID	equ	816
  5059  000000                     _C1RXM0SIDbits	equ	816
  5060  000000                     _C1RXM1EIDH	equ	826
  5061  000000                     _C1RXM1EIDHbits	equ	826
  5062  000000                     _C1RXM1EIDL	equ	828
  5063  000000                     _C1RXM1EIDLbits	equ	828
  5064  000000                     _C1RXM1SID	equ	824
  5065  000000                     _C1RXM1SIDbits	equ	824
  5066  000000                     _C1TX0B1	equ	870
  5067  000000                     _C1TX0B1bits	equ	870
  5068  000000                     _C1TX0B2	equ	872
  5069  000000                     _C1TX0B2bits	equ	872
  5070  000000                     _C1TX0B3	equ	874
  5071  000000                     _C1TX0B3bits	equ	874
  5072  000000                     _C1TX0B4	equ	876
  5073  000000                     _C1TX0B4bits	equ	876
  5074  000000                     _C1TX0CON	equ	878
  5075  000000                     _C1TX0CONbits	equ	878
  5076  000000                     _C1TX0DLC	equ	868
  5077  000000                     _C1TX0DLCbits	equ	868
  5078  000000                     _C1TX0EID	equ	866
  5079  000000                     _C1TX0EIDbits	equ	866
  5080  000000                     _C1TX0SID	equ	864
  5081  000000                     _C1TX0SIDbits	equ	864
  5082  000000                     _C1TX1B1	equ	854
  5083  000000                     _C1TX1B1bits	equ	854
  5084  000000                     _C1TX1B2	equ	856
  5085  000000                     _C1TX1B2bits	equ	856
  5086  000000                     _C1TX1B3	equ	858
  5087  000000                     _C1TX1B3bits	equ	858
  5088  000000                     _C1TX1B4	equ	860
  5089  000000                     _C1TX1B4bits	equ	860
  5090  000000                     _C1TX1CON	equ	862
  5091  000000                     _C1TX1CONbits	equ	862
  5092  000000                     _C1TX1DLC	equ	852
  5093  000000                     _C1TX1DLCbits	equ	852
  5094  000000                     _C1TX1EID	equ	850
  5095  000000                     _C1TX1EIDbits	equ	850
  5096  000000                     _C1TX1SID	equ	848
  5097  000000                     _C1TX1SIDbits	equ	848
  5098  000000                     _C1TX2B1	equ	838
  5099  000000                     _C1TX2B1bits	equ	838
  5100  000000                     _C1TX2B2	equ	840
  5101  000000                     _C1TX2B2bits	equ	840
  5102  000000                     _C1TX2B3	equ	842
  5103  000000                     _C1TX2B3bits	equ	842
  5104  000000                     _C1TX2B4	equ	844
  5105  000000                     _C1TX2B4bits	equ	844
  5106  000000                     _C1TX2CON	equ	846
  5107  000000                     _C1TX2CONbits	equ	846
  5108  000000                     _C1TX2DLC	equ	836
  5109  000000                     _C1TX2DLCbits	equ	836
  5110  000000                     _C1TX2EID	equ	834
  5111  000000                     _C1TX2EIDbits	equ	834
  5112  000000                     _C1TX2SID	equ	832
  5113  000000                     _C1TX2SIDbits	equ	832
  5114  000000                     _C2CFG1	equ	1106
  5115  000000                     _C2CFG1bits	equ	1106
  5116  000000                     _C2CFG2	equ	1108
  5117  000000                     _C2CFG2bits	equ	1108
  5118  000000                     _C2CTRL	equ	1104
  5119  000000                     _C2CTRLbits	equ	1104
  5120  000000                     _C2EC	equ	1114
  5121  000000                     _C2ECbits	equ	1114
  5122  000000                     _C2INTE	equ	1112
  5123  000000                     _C2INTEbits	equ	1112
  5124  000000                     _C2INTF	equ	1110
  5125  000000                     _C2INTFbits	equ	1110
  5126  000000                     _C2RX0B1	equ	1094
  5127  000000                     _C2RX0B1bits	equ	1094
  5128  000000                     _C2RX0B2	equ	1096
  5129  000000                     _C2RX0B2bits	equ	1096
  5130  000000                     _C2RX0B3	equ	1098
  5131  000000                     _C2RX0B3bits	equ	1098
  5132  000000                     _C2RX0B4	equ	1100
  5133  000000                     _C2RX0B4bits	equ	1100
  5134  000000                     _C2RX0CON	equ	1102
  5135  000000                     _C2RX0CONbits	equ	1102
  5136  000000                     _C2RX0DLC	equ	1092
  5137  000000                     _C2RX0DLCbits	equ	1092
  5138  000000                     _C2RX0EID	equ	1090
  5139  000000                     _C2RX0EIDbits	equ	1090
  5140  000000                     _C2RX0SID	equ	1088
  5141  000000                     _C2RX0SIDbits	equ	1088
  5142  000000                     _C2RX1B1	equ	1078
  5143  000000                     _C2RX1B1bits	equ	1078
  5144  000000                     _C2RX1B2	equ	1080
  5145  000000                     _C2RX1B2bits	equ	1080
  5146  000000                     _C2RX1B3	equ	1082
  5147  000000                     _C2RX1B3bits	equ	1082
  5148  000000                     _C2RX1B4	equ	1084
  5149  000000                     _C2RX1B4bits	equ	1084
  5150  000000                     _C2RX1CON	equ	1086
  5151  000000                     _C2RX1CONbits	equ	1086
  5152  000000                     _C2RX1DLC	equ	1076
  5153  000000                     _C2RX1DLCbits	equ	1076
  5154  000000                     _C2RX1EID	equ	1074
  5155  000000                     _C2RX1EIDbits	equ	1074
  5156  000000                     _C2RX1SID	equ	1072
  5157  000000                     _C2RX1SIDbits	equ	1072
  5158  000000                     _C2RXF0EIDH	equ	962
  5159  000000                     _C2RXF0EIDHbits	equ	962
  5160  000000                     _C2RXF0EIDL	equ	964
  5161  000000                     _C2RXF0EIDLbits	equ	964
  5162  000000                     _C2RXF0SID	equ	960
  5163  000000                     _C2RXF0SIDbits	equ	960
  5164  000000                     _C2RXF1EIDH	equ	970
  5165  000000                     _C2RXF1EIDHbits	equ	970
  5166  000000                     _C2RXF1EIDL	equ	972
  5167  000000                     _C2RXF1EIDLbits	equ	972
  5168  000000                     _C2RXF1SID	equ	968
  5169  000000                     _C2RXF1SIDbits	equ	968
  5170  000000                     _C2RXF2EIDH	equ	978
  5171  000000                     _C2RXF2EIDHbits	equ	978
  5172  000000                     _C2RXF2EIDL	equ	980
  5173  000000                     _C2RXF2EIDLbits	equ	980
  5174  000000                     _C2RXF2SID	equ	976
  5175  000000                     _C2RXF2SIDbits	equ	976
  5176  000000                     _C2RXF3EIDH	equ	986
  5177  000000                     _C2RXF3EIDHbits	equ	986
  5178  000000                     _C2RXF3EIDL	equ	988
  5179  000000                     _C2RXF3EIDLbits	equ	988
  5180  000000                     _C2RXF3SID	equ	984
  5181  000000                     _C2RXF3SIDbits	equ	984
  5182  000000                     _C2RXF4EIDH	equ	994
  5183  000000                     _C2RXF4EIDHbits	equ	994
  5184  000000                     _C2RXF4EIDL	equ	996
  5185  000000                     _C2RXF4EIDLbits	equ	996
  5186  000000                     _C2RXF4SID	equ	992
  5187  000000                     _C2RXF4SIDbits	equ	992
  5188  000000                     _C2RXF5EIDH	equ	1002
  5189  000000                     _C2RXF5EIDHbits	equ	1002
  5190  000000                     _C2RXF5EIDL	equ	1004
  5191  000000                     _C2RXF5EIDLbits	equ	1004
  5192  000000                     _C2RXF5SID	equ	1000
  5193  000000                     _C2RXF5SIDbits	equ	1000
  5194  000000                     _C2RXM0EIDH	equ	1010
  5195  000000                     _C2RXM0EIDHbits	equ	1010
  5196  000000                     _C2RXM0EIDL	equ	1012
  5197  000000                     _C2RXM0EIDLbits	equ	1012
  5198  000000                     _C2RXM0SID	equ	1008
  5199  000000                     _C2RXM0SIDbits	equ	1008
  5200  000000                     _C2RXM1EIDH	equ	1018
  5201  000000                     _C2RXM1EIDHbits	equ	1018
  5202  000000                     _C2RXM1EIDL	equ	1020
  5203  000000                     _C2RXM1EIDLbits	equ	1020
  5204  000000                     _C2RXM1SID	equ	1016
  5205  000000                     _C2RXM1SIDbits	equ	1016
  5206  000000                     _C2TX0B1	equ	1062
  5207  000000                     _C2TX0B1bits	equ	1062
  5208  000000                     _C2TX0B2	equ	1064
  5209  000000                     _C2TX0B2bits	equ	1064
  5210  000000                     _C2TX0B3	equ	1066
  5211  000000                     _C2TX0B3bits	equ	1066
  5212  000000                     _C2TX0B4	equ	1068
  5213  000000                     _C2TX0B4bits	equ	1068
  5214  000000                     _C2TX0CON	equ	1070
  5215  000000                     _C2TX0CONbits	equ	1070
  5216  000000                     _C2TX0DLC	equ	1060
  5217  000000                     _C2TX0DLCbits	equ	1060
  5218  000000                     _C2TX0EID	equ	1058
  5219  000000                     _C2TX0EIDbits	equ	1058
  5220  000000                     _C2TX0SID	equ	1056
  5221  000000                     _C2TX0SIDbits	equ	1056
  5222  000000                     _C2TX1B1	equ	1046
  5223  000000                     _C2TX1B1bits	equ	1046
  5224  000000                     _C2TX1B2	equ	1048
  5225  000000                     _C2TX1B2bits	equ	1048
  5226  000000                     _C2TX1B3	equ	1050
  5227  000000                     _C2TX1B3bits	equ	1050
  5228  000000                     _C2TX1B4	equ	1052
  5229  000000                     _C2TX1B4bits	equ	1052
  5230  000000                     _C2TX1CON	equ	1054
  5231  000000                     _C2TX1CONbits	equ	1054
  5232  000000                     _C2TX1DLC	equ	1044
  5233  000000                     _C2TX1DLCbits	equ	1044
  5234  000000                     _C2TX1EID	equ	1042
  5235  000000                     _C2TX1EIDbits	equ	1042
  5236  000000                     _C2TX1SID	equ	1040
  5237  000000                     _C2TX1SIDbits	equ	1040
  5238  000000                     _C2TX2B1	equ	1030
  5239  000000                     _C2TX2B1bits	equ	1030
  5240  000000                     _C2TX2B2	equ	1032
  5241  000000                     _C2TX2B2bits	equ	1032
  5242  000000                     _C2TX2B3	equ	1034
  5243  000000                     _C2TX2B3bits	equ	1034
  5244  000000                     _C2TX2B4	equ	1036
  5245  000000                     _C2TX2B4bits	equ	1036
  5246  000000                     _C2TX2CON	equ	1038
  5247  000000                     _C2TX2CONbits	equ	1038
  5248  000000                     _C2TX2DLC	equ	1028
  5249  000000                     _C2TX2DLCbits	equ	1028
  5250  000000                     _C2TX2EID	equ	1026
  5251  000000                     _C2TX2EIDbits	equ	1026
  5252  000000                     _C2TX2SID	equ	1024
  5253  000000                     _C2TX2SIDbits	equ	1024
  5254  000000                     _CNEN1	equ	192
  5255  000000                     _CNEN1bits	equ	192
  5256  000000                     _CNEN2	equ	194
  5257  000000                     _CNEN2bits	equ	194
  5258  000000                     _CNPU1	equ	196
  5259  000000                     _CNPU1bits	equ	196
  5260  000000                     _CNPU2	equ	198
  5261  000000                     _CNPU2bits	equ	198
  5262  000000                     _CORCON	equ	68
  5263  000000                     _CORCONbits	equ	68
  5264  000000                     _DCOUNT	equ	56
  5265  000000                     _DCOUNTbits	equ	56
  5266  000000                     _DFLTCON	equ	292
  5267  000000                     _DFLTCONbits	equ	292
  5268  000000                     _DISICNT	equ	82
  5269  000000                     _DISICNTbits	equ	82
  5270  000000                     _DOENDH	equ	64
  5271  000000                     _DOENDHbits	equ	64
  5272  000000                     _DOENDL	equ	62
  5273  000000                     _DOSTARTH	equ	60
  5274  000000                     _DOSTARTHbits	equ	60
  5275  000000                     _DOSTARTL	equ	58
  5276  000000                     _DTCON1	equ	460
  5277  000000                     _DTCON1bits	equ	460
  5278  000000                     _DTCON2	equ	462
  5279  000000                     _DTCON2bits	equ	462
  5280  000000                     _FLTACON	equ	464
  5281  000000                     _FLTACONbits	equ	464
  5282  000000                     _FLTBCON	equ	466
  5283  000000                     _FLTBCONbits	equ	466
  5284  000000                     _I2CADD	equ	522
  5285  000000                     _I2CADDbits	equ	522
  5286  000000                     _I2CBRG	equ	516
  5287  000000                     _I2CBRGbits	equ	516
  5288  000000                     _I2CCON	equ	518
  5289  000000                     _I2CCONbits	equ	518
  5290  000000                     _I2CRCV	equ	512
  5291  000000                     _I2CRCVbits	equ	512
  5292  000000                     _I2CSTAT	equ	520
  5293  000000                     _I2CSTATbits	equ	520
  5294  000000                     _I2CTRN	equ	514
  5295  000000                     _I2CTRNbits	equ	514
  5296  000000                     _IC1BUF	equ	320
  5297  000000                     _IC1CON	equ	322
  5298  000000                     _IC1CONbits	equ	322
  5299  000000                     _IC2BUF	equ	324
  5300  000000                     _IC2CON	equ	326
  5301  000000                     _IC2CONbits	equ	326
  5302  000000                     _IC3BUF	equ	328
  5303  000000                     _IC3CON	equ	330
  5304  000000                     _IC3CONbits	equ	330
  5305  000000                     _IC4BUF	equ	332
  5306  000000                     _IC4CON	equ	334
  5307  000000                     _IC4CONbits	equ	334
  5308  000000                     _IC5BUF	equ	336
  5309  000000                     _IC5CON	equ	338
  5310  000000                     _IC5CONbits	equ	338
  5311  000000                     _IC6BUF	equ	340
  5312  000000                     _IC6CON	equ	342
  5313  000000                     _IC6CONbits	equ	342
  5314  000000                     _IC7BUF	equ	344
  5315  000000                     _IC7CON	equ	346
  5316  000000                     _IC7CONbits	equ	346
  5317  000000                     _IC8BUF	equ	348
  5318  000000                     _IC8CON	equ	350
  5319  000000                     _IC8CONbits	equ	350
  5320  000000                     _IEC0	equ	140
  5321  000000                     _IEC0bits	equ	140
  5322  000000                     _IEC1	equ	142
  5323  000000                     _IEC1bits	equ	142
  5324  000000                     _IEC2	equ	144
  5325  000000                     _IEC2bits	equ	144
  5326  000000                     _IFS0	equ	132
  5327  000000                     _IFS0bits	equ	132
  5328  000000                     _IFS1	equ	134
  5329  000000                     _IFS1bits	equ	134
  5330  000000                     _IFS2	equ	136
  5331  000000                     _IFS2bits	equ	136
  5332  000000                     _INTCON1	equ	128
  5333  000000                     _INTCON1bits	equ	128
  5334  000000                     _INTCON2	equ	130
  5335  000000                     _INTCON2bits	equ	130
  5336  000000                     _INTTREG	equ	176
  5337  000000                     _INTTREGbits	equ	176
  5338  000000                     _IPC0	equ	148
  5339  000000                     _IPC0bits	equ	148
  5340  000000                     _IPC1	equ	150
  5341  000000                     _IPC10	equ	168
  5342  000000                     _IPC10bits	equ	168
  5343  000000                     _IPC11	equ	170
  5344  000000                     _IPC11bits	equ	170
  5345  000000                     _IPC1bits	equ	150
  5346  000000                     _IPC2	equ	152
  5347  000000                     _IPC2bits	equ	152
  5348  000000                     _IPC3	equ	154
  5349  000000                     _IPC3bits	equ	154
  5350  000000                     _IPC4	equ	156
  5351  000000                     _IPC4bits	equ	156
  5352  000000                     _IPC5	equ	158
  5353  000000                     _IPC5bits	equ	158
  5354  000000                     _IPC6	equ	160
  5355  000000                     _IPC6bits	equ	160
  5356  000000                     _IPC7	equ	162
  5357  000000                     _IPC7bits	equ	162
  5358  000000                     _IPC8	equ	164
  5359  000000                     _IPC8bits	equ	164
  5360  000000                     _IPC9	equ	166
  5361  000000                     _IPC9bits	equ	166
  5362  000000                     _LATA	equ	708
  5363  000000                     _LATAbits	equ	708
  5364  000000                     _LATB	equ	714
  5365  000000                     _LATBbits	equ	714
  5366  000000                     _LATC	equ	720
  5367  000000                     _LATCbits	equ	720
  5368  000000                     _LATD	equ	726
  5369  000000                     _LATDbits	equ	726
  5370  000000                     _LATE	equ	732
  5371  000000                     _LATEbits	equ	732
  5372  000000                     _LATF	equ	738
  5373  000000                     _LATFbits	equ	738
  5374  000000                     _LATG	equ	744
  5375  000000                     _LATGbits	equ	744
  5376  000000                     _MAXCNT	equ	296
  5377  000000                     _MODCON	equ	70
  5378  000000                     _MODCONbits	equ	70
  5379  000000                     _NVMADR	equ	1890
  5380  000000                     _NVMADRU	equ	1892
  5381  000000                     _NVMADRUbits	equ	1892
  5382  000000                     _NVMCON	equ	1888
  5383  000000                     _NVMCONbits	equ	1888
  5384  000000                     _NVMKEY	equ	1894
  5385  000000                     _NVMKEYbits	equ	1894
  5386  000000                     _OC1CON	equ	388
  5387  000000                     _OC1CONbits	equ	388
  5388  000000                     _OC1R	equ	386
  5389  000000                     _OC1RS	equ	384
  5390  000000                     _OC2CON	equ	394
  5391  000000                     _OC2CONbits	equ	394
  5392  000000                     _OC2R	equ	392
  5393  000000                     _OC2RS	equ	390
  5394  000000                     _OC3CON	equ	400
  5395  000000                     _OC3CONbits	equ	400
  5396  000000                     _OC3R	equ	398
  5397  000000                     _OC3RS	equ	396
  5398  000000                     _OC4CON	equ	406
  5399  000000                     _OC4CONbits	equ	406
  5400  000000                     _OC4R	equ	404
  5401  000000                     _OC4RS	equ	402
  5402  000000                     _OC5CON	equ	412
  5403  000000                     _OC5CONbits	equ	412
  5404  000000                     _OC5R	equ	410
  5405  000000                     _OC5RS	equ	408
  5406  000000                     _OC6CON	equ	418
  5407  000000                     _OC6CONbits	equ	418
  5408  000000                     _OC6R	equ	416
  5409  000000                     _OC6RS	equ	414
  5410  000000                     _OC7CON	equ	424
  5411  000000                     _OC7CONbits	equ	424
  5412  000000                     _OC7R	equ	422
  5413  000000                     _OC7RS	equ	420
  5414  000000                     _OC8CON	equ	430
  5415  000000                     _OC8CONbits	equ	430
  5416  000000                     _OC8R	equ	428
  5417  000000                     _OC8RS	equ	426
  5418  000000                     _OSCCON	equ	1858
  5419  000000                     _OSCCONbits	equ	1858
  5420  000000                     _OSCTUN	equ	1860
  5421  000000                     _OSCTUNbits	equ	1860
  5422  000000                     _OVDCON	equ	468
  5423  000000                     _OVDCONbits	equ	468
  5424  000000                     _PCH	equ	48
  5425  000000                     _PCHbits	equ	48
  5426  000000                     _PCL	equ	46
  5427  000000                     _PDC1	equ	470
  5428  000000                     _PDC2	equ	472
  5429  000000                     _PDC3	equ	474
  5430  000000                     _PDC4	equ	476
  5431  000000                     _PMD1	equ	1904
  5432  000000                     _PMD1bits	equ	1904
  5433  000000                     _PMD2	equ	1906
  5434  000000                     _PMD2bits	equ	1906
  5435  000000                     _PORTA	equ	706
  5436  000000                     _PORTAbits	equ	706
  5437  000000                     _PORTB	equ	712
  5438  000000                     _PORTBbits	equ	712
  5439  000000                     _PORTC	equ	718
  5440  000000                     _PORTCbits	equ	718
  5441  000000                     _PORTD	equ	724
  5442  000000                     _PORTDbits	equ	724
  5443  000000                     _PORTE	equ	730
  5444  000000                     _PORTEbits	equ	730
  5445  000000                     _PORTF	equ	736
  5446  000000                     _PORTFbits	equ	736
  5447  000000                     _PORTG	equ	742
  5448  000000                     _PORTGbits	equ	742
  5449  000000                     _POSCNT	equ	294
  5450  000000                     _PR1	equ	258
  5451  000000                     _PR2	equ	268
  5452  000000                     _PR3	equ	270
  5453  000000                     _PR4	equ	282
  5454  000000                     _PR5	equ	284
  5455  000000                     _PSVPAG	equ	52
  5456  000000                     _PSVPAGbits	equ	52
  5457  000000                     _PTCON	equ	448
  5458  000000                     _PTCONbits	equ	448
  5459  000000                     _PTMR	equ	450
  5460  000000                     _PTMRbits	equ	450
  5461  000000                     _PTPER	equ	452
  5462  000000                     _PTPERbits	equ	452
  5463  000000                     _PWMCON1	equ	456
  5464  000000                     _PWMCON1bits	equ	456
  5465  000000                     _PWMCON2	equ	458
  5466  000000                     _PWMCON2bits	equ	458
  5467  000000                     _QEICON	equ	290
  5468  000000                     _QEICONbits	equ	290
  5469  000000                     _RCON	equ	1856
  5470  000000                     _RCONbits	equ	1856
  5471  000000                     _RCOUNT	equ	54
  5472  000000                     _RCOUNTbits	equ	54
  5473  000000                     _SEVTCMP	equ	454
  5474  000000                     _SEVTCMPbits	equ	454
  5475  000000                     _SPI1BUF	equ	548
  5476  000000                     _SPI1CON	equ	546
  5477  000000                     _SPI1CONbits	equ	546
  5478  000000                     _SPI1STAT	equ	544
  5479  000000                     _SPI1STATbits	equ	544
  5480  000000                     _SPI2BUF	equ	554
  5481  000000                     _SPI2CON	equ	552
  5482  000000                     _SPI2CONbits	equ	552
  5483  000000                     _SPI2STAT	equ	550
  5484  000000                     _SPI2STATbits	equ	550
  5485  000000                     _SPLIM	equ	32
  5486  000000                     _SR	equ	66
  5487  000000                     _SRbits	equ	66
  5488  000000                     _SSRAM	equ	1874
  5489  000000                     _SSRAMbits	equ	1874
  5490  000000                     _T1CON	equ	260
  5491  000000                     _T1CONbits	equ	260
  5492  000000                     _T2CON	equ	272
  5493  000000                     _T2CONbits	equ	272
  5494  000000                     _T3CON	equ	274
  5495  000000                     _T3CONbits	equ	274
  5496  000000                     _T4CON	equ	286
  5497  000000                     _T4CONbits	equ	286
  5498  000000                     _T5CON	equ	288
  5499  000000                     _T5CONbits	equ	288
  5500  000000                     _TBLPAG	equ	50
  5501  000000                     _TBLPAGbits	equ	50
  5502  000000                     _TMR1	equ	256
  5503  000000                     _TMR2	equ	262
  5504  000000                     _TMR3	equ	266
  5505  000000                     _TMR3HLD	equ	264
  5506  000000                     _TMR4	equ	276
  5507  000000                     _TMR5	equ	280
  5508  000000                     _TMR5HLD	equ	278
  5509  000000                     _TRISA	equ	704
  5510  000000                     _TRISAbits	equ	704
  5511  000000                     _TRISB	equ	710
  5512  000000                     _TRISBbits	equ	710
  5513  000000                     _TRISC	equ	716
  5514  000000                     _TRISCbits	equ	716
  5515  000000                     _TRISD	equ	722
  5516  000000                     _TRISDbits	equ	722
  5517  000000                     _TRISE	equ	728
  5518  000000                     _TRISEbits	equ	728
  5519  000000                     _TRISF	equ	734
  5520  000000                     _TRISFbits	equ	734
  5521  000000                     _TRISG	equ	740
  5522  000000                     _TRISGbits	equ	740
  5523  000000                     _U1BRG	equ	532
  5524  000000                     _U1MODE	equ	524
  5525  000000                     _U1MODEbits	equ	524
  5526  000000                     _U1RXREG	equ	530
  5527  000000                     _U1RXREGbits	equ	530
  5528  000000                     _U1STA	equ	526
  5529  000000                     _U1STAbits	equ	526
  5530  000000                     _U1TXREG	equ	528
  5531  000000                     _U1TXREGbits	equ	528
  5532  000000                     _U2BRG	equ	542
  5533  000000                     _U2MODE	equ	534
  5534  000000                     _U2MODEbits	equ	534
  5535  000000                     _U2RXREG	equ	540
  5536  000000                     _U2RXREGbits	equ	540
  5537  000000                     _U2STA	equ	536
  5538  000000                     _U2STAbits	equ	536
  5539  000000                     _U2TXREG	equ	538
  5540  000000                     _U2TXREGbits	equ	538
  5541  000000                     _WREG0	equ	0
  5542  000000                     _WREG1	equ	2
  5543  000000                     _WREG10	equ	20
  5544  000000                     _WREG11	equ	22
  5545  000000                     _WREG12	equ	24
  5546  000000                     _WREG13	equ	26
  5547  000000                     _WREG14	equ	28
  5548  000000                     _WREG15	equ	30
  5549  000000                     _WREG2	equ	4
  5550  000000                     _WREG3	equ	6
  5551  000000                     _WREG4	equ	8
  5552  000000                     _WREG5	equ	10
  5553  000000                     _WREG6	equ	12
  5554  000000                     _WREG7	equ	14
  5555  000000                     _WREG8	equ	16
  5556  000000                     _WREG9	equ	18
  5557  000000                     _XBREV	equ	80
  5558  000000                     _XBREVbits	equ	80
  5559  000000                     _XMODEND	equ	74
  5560  000000                     _XMODSRT	equ	72
  5561  000000                     _YMODEND	equ	78
  5562  000000                     _YMODSRT	equ	76
  5563  000000                     _A10M	equ	4154
  5564  000000                     _ABAT	equ	7308
  5565  000000                     _ABAUD	equ	4197
  5566  000000                     _ACCSAT	equ	548
  5567  000000                     _ACKDT	equ	4149
  5568  000000                     _ACKEN	equ	4148
  5569  000000                     _ACKSTAT	equ	4175
  5570  000000                     _ADCMD	equ	15232
  5571  000000                     _ADCS0	equ	5408
  5572  000000                     _ADCS1	equ	5409
  5573  000000                     _ADCS2	equ	5410
  5574  000000                     _ADCS3	equ	5411
  5575  000000                     _ADCS4	equ	5412
  5576  000000                     _ADCS5	equ	5413
  5577  000000                     _ADD10	equ	4168
  5578  000000                     _ADDEN	equ	4213
  5579  000000                     _ADDRERR	equ	1027
  5580  000000                     _ADIE	equ	1131
  5581  000000                     _ADIF	equ	1067
  5582  000000                     _ADIP0	equ	1228
  5583  000000                     _ADIP1	equ	1229
  5584  000000                     _ADIP2	equ	1230
  5585  000000                     _ADON	equ	5391
  5586  000000                     _ADRC	equ	5415
  5587  000000                     _ADSIDL	equ	5389
  5588  000000                     _ALTIO	equ	4202
  5589  000000                     _ALTIVT	equ	1055
  5590  000000                     _ALTS	equ	5392
  5591  000000                     _ASAM	equ	5378
  5592  000000                     _BCL	equ	4170
  5593  000000                     _BGST	equ	14861
  5594  000000                     _BOR	equ	14849
  5595  000000                     _BREN	equ	655
  5596  000000                     _BRP0	equ	7312
  5597  000000                     _BRP1	equ	7313
  5598  000000                     _BRP2	equ	7314
  5599  000000                     _BRP3	equ	7315
  5600  000000                     _BRP4	equ	7316
  5601  000000                     _BRP5	equ	7317
  5602  000000                     _BUFM	equ	5393
  5603  000000                     _BUFS	equ	5399
  5604  000000                     _BWM0	equ	568
  5605  000000                     _BWM1	equ	569
  5606  000000                     _BWM2	equ	570
  5607  000000                     _BWM3	equ	571
  5608  000000                     _C	equ	528
  5609  000000                     _C1IE	equ	1147
  5610  000000                     _C1IF	equ	1083
  5611  000000                     _C1IP0	equ	1292
  5612  000000                     _C1IP1	equ	1293
  5613  000000                     _C1IP2	equ	1294
  5614  000000                     _C1MD	equ	15233
  5615  000000                     _C2IE	equ	1158
  5616  000000                     _C2IF	equ	1094
  5617  000000                     _C2IP0	equ	1336
  5618  000000                     _C2IP1	equ	1337
  5619  000000                     _C2IP2	equ	1338
  5620  000000                     _C2MD	equ	15234
  5621  000000                     _CANCAP	equ	7311
  5622  000000                     _CANCKS	equ	7307
  5623  000000                     _CANFRZ	equ	7310
  5624  000000                     _CANSIDL	equ	7309
  5625  000000                     _CEID	equ	2344
  5626  000000                     _CF	equ	14867
  5627  000000                     _CH0NA	equ	5428
  5628  000000                     _CH0NB	equ	5436
  5629  000000                     _CH0SA0	equ	5424
  5630  000000                     _CH0SA1	equ	5425
  5631  000000                     _CH0SA2	equ	5426
  5632  000000                     _CH0SA3	equ	5427
  5633  000000                     _CH0SB0	equ	5432
  5634  000000                     _CH0SB1	equ	5433
  5635  000000                     _CH0SB2	equ	5434
  5636  000000                     _CH0SB3	equ	5435
  5637  000000                     _CH123NA0	equ	5430
  5638  000000                     _CH123NA1	equ	5431
  5639  000000                     _CH123NB0	equ	5438
  5640  000000                     _CH123NB1	equ	5439
  5641  000000                     _CH123SA	equ	5429
  5642  000000                     _CH123SB	equ	5437
  5643  000000                     _CHPS0	equ	5400
  5644  000000                     _CHPS1	equ	5401
  5645  000000                     _CKE	equ	4376
  5646  000000                     _CKP	equ	4374
  5647  000000                     _CN0IE	equ	1536
  5648  000000                     _CN0PUE	equ	1568
  5649  000000                     _CN10IE	equ	1546
  5650  000000                     _CN10PUE	equ	1578
  5651  000000                     _CN11IE	equ	1547
  5652  000000                     _CN11PUE	equ	1579
  5653  000000                     _CN12IE	equ	1548
  5654  000000                     _CN12PUE	equ	1580
  5655  000000                     _CN13IE	equ	1549
  5656  000000                     _CN13PUE	equ	1581
  5657  000000                     _CN14IE	equ	1550
  5658  000000                     _CN14PUE	equ	1582
  5659  000000                     _CN15IE	equ	1551
  5660  000000                     _CN15PUE	equ	1583
  5661  000000                     _CN16IE	equ	1552
  5662  000000                     _CN16PUE	equ	1584
  5663  000000                     _CN17IE	equ	1553
  5664  000000                     _CN17PUE	equ	1585
  5665  000000                     _CN18IE	equ	1554
  5666  000000                     _CN18PUE	equ	1586
  5667  000000                     _CN19IE	equ	1555
  5668  000000                     _CN19PUE	equ	1587
  5669  000000                     _CN1IE	equ	1537
  5670  000000                     _CN1PUE	equ	1569
  5671  000000                     _CN20IE	equ	1556
  5672  000000                     _CN20PUE	equ	1588
  5673  000000                     _CN21IE	equ	1557
  5674  000000                     _CN21PUE	equ	1589
  5675  000000                     _CN2IE	equ	1538
  5676  000000                     _CN2PUE	equ	1570
  5677  000000                     _CN3IE	equ	1539
  5678  000000                     _CN3PUE	equ	1571
  5679  000000                     _CN4IE	equ	1540
  5680  000000                     _CN4PUE	equ	1572
  5681  000000                     _CN5IE	equ	1541
  5682  000000                     _CN5PUE	equ	1573
  5683  000000                     _CN6IE	equ	1542
  5684  000000                     _CN6PUE	equ	1574
  5685  000000                     _CN7IE	equ	1543
  5686  000000                     _CN7PUE	equ	1575
  5687  000000                     _CN8IE	equ	1544
  5688  000000                     _CN8PUE	equ	1576
  5689  000000                     _CN9IE	equ	1545
  5690  000000                     _CN9PUE	equ	1577
  5691  000000                     _CNIE	equ	1135
  5692  000000                     _CNIF	equ	1071
  5693  000000                     _CNIP0	equ	1244
  5694  000000                     _CNIP1	equ	1245
  5695  000000                     _CNIP2	equ	1246
  5696  000000                     _CNTERR	equ	2335
  5697  000000                     _COSC0	equ	14876
  5698  000000                     _COSC1	equ	14877
  5699  000000                     _COSC2	equ	14878
  5700  000000                     _COVTE	equ	1032
  5701  000000                     _CSCNA	equ	5402
  5702  000000                     _CSSL0	equ	5456
  5703  000000                     _CSSL1	equ	5457
  5704  000000                     _CSSL10	equ	5466
  5705  000000                     _CSSL11	equ	5467
  5706  000000                     _CSSL12	equ	5468
  5707  000000                     _CSSL13	equ	5469
  5708  000000                     _CSSL14	equ	5470
  5709  000000                     _CSSL15	equ	5471
  5710  000000                     _CSSL2	equ	5458
  5711  000000                     _CSSL3	equ	5459
  5712  000000                     _CSSL4	equ	5460
  5713  000000                     _CSSL5	equ	5461
  5714  000000                     _CSSL6	equ	5462
  5715  000000                     _CSSL7	equ	5463
  5716  000000                     _CSSL8	equ	5464
  5717  000000                     _CSSL9	equ	5465
  5718  000000                     _DA	equ	537
  5719  000000                     _DC	equ	536
  5720  000000                     _DISI	equ	1054
  5721  000000                     _DISSDO	equ	4379
  5722  000000                     _DISSLW	equ	4153
  5723  000000                     _DL0	equ	552
  5724  000000                     _DL1	equ	553
  5725  000000                     _DL2	equ	554
  5726  000000                     _DLC0	equ	6691
  5727  000000                     _DLC1	equ	6692
  5728  000000                     _DLC2	equ	6693
  5729  000000                     _DLC3	equ	6694
  5730  000000                     _DONE	equ	5376
  5731  000000                     _DTA0	equ	3680
  5732  000000                     _DTA1	equ	3681
  5733  000000                     _DTA2	equ	3682
  5734  000000                     _DTA3	equ	3683
  5735  000000                     _DTA4	equ	3684
  5736  000000                     _DTA5	equ	3685
  5737  000000                     _DTAPS0	equ	3686
  5738  000000                     _DTAPS1	equ	3687
  5739  000000                     _DTB0	equ	3688
  5740  000000                     _DTB1	equ	3689
  5741  000000                     _DTB2	equ	3690
  5742  000000                     _DTB3	equ	3691
  5743  000000                     _DTB4	equ	3692
  5744  000000                     _DTB5	equ	3693
  5745  000000                     _DTBPS0	equ	3694
  5746  000000                     _DTBPS1	equ	3695
  5747  000000                     _DTS1A	equ	3697
  5748  000000                     _DTS1I	equ	3696
  5749  000000                     _DTS2A	equ	3699
  5750  000000                     _DTS2I	equ	3698
  5751  000000                     _DTS3A	equ	3701
  5752  000000                     _DTS3I	equ	3700
  5753  000000                     _DTS4A	equ	3703
  5754  000000                     _DTS4I	equ	3702
  5755  000000                     _D_A	equ	4165
  5756  000000                     _D_nA	equ	4165
  5757  000000                     _EDT	equ	555
  5758  000000                     _EID0	equ	6186
  5759  000000                     _EID1	equ	6187
  5760  000000                     _EID10	equ	6164
  5761  000000                     _EID11	equ	6165
  5762  000000                     _EID12	equ	6166
  5763  000000                     _EID13	equ	6167
  5764  000000                     _EID14	equ	6168
  5765  000000                     _EID15	equ	6169
  5766  000000                     _EID16	equ	6170
  5767  000000                     _EID17	equ	6171
  5768  000000                     _EID2	equ	6188
  5769  000000                     _EID3	equ	6189
  5770  000000                     _EID4	equ	6190
  5771  000000                     _EID5	equ	6191
  5772  000000                     _EID6	equ	6160
  5773  000000                     _EID7	equ	6161
  5774  000000                     _EID8	equ	6162
  5775  000000                     _EID9	equ	6163
  5776  000000                     _ERRIE	equ	7365
  5777  000000                     _ERRIF	equ	7349
  5778  000000                     _EWARN	equ	7352
  5779  000000                     _EXIDE	equ	6144
  5780  000000                     _EXTR	equ	14855
  5781  000000                     _FAEN1	equ	3712
  5782  000000                     _FAEN2	equ	3713
  5783  000000                     _FAEN3	equ	3714
  5784  000000                     _FAEN4	equ	3715
  5785  000000                     _FAOV1H	equ	3721
  5786  000000                     _FAOV1L	equ	3720
  5787  000000                     _FAOV2H	equ	3723
  5788  000000                     _FAOV2L	equ	3722
  5789  000000                     _FAOV3H	equ	3725
  5790  000000                     _FAOV3L	equ	3724
  5791  000000                     _FAOV4H	equ	3727
  5792  000000                     _FAOV4L	equ	3726
  5793  000000                     _FBEN1	equ	3728
  5794  000000                     _FBEN2	equ	3729
  5795  000000                     _FBEN3	equ	3730
  5796  000000                     _FBEN4	equ	3731
  5797  000000                     _FBOV1H	equ	3737
  5798  000000                     _FBOV1L	equ	3736
  5799  000000                     _FBOV2H	equ	3739
  5800  000000                     _FBOV2L	equ	3738
  5801  000000                     _FBOV3H	equ	3741
  5802  000000                     _FBOV3L	equ	3740
  5803  000000                     _FBOV4H	equ	3743
  5804  000000                     _FBOV4L	equ	3742
  5805  000000                     _FERR	equ	4210
  5806  000000                     _FILHIT	equ	7280
  5807  000000                     _FILHIT0	equ	7152
  5808  000000                     _FILHIT1	equ	7153
  5809  000000                     _FILHIT2	equ	7154
  5810  000000                     _FLTAIE	equ	1163
  5811  000000                     _FLTAIF	equ	1099
  5812  000000                     _FLTAIP0	equ	1356
  5813  000000                     _FLTAIP1	equ	1357
  5814  000000                     _FLTAIP2	equ	1358
  5815  000000                     _FLTAM	equ	3719
  5816  000000                     _FLTBIE	equ	1164
  5817  000000                     _FLTBIF	equ	1100
  5818  000000                     _FLTBIP0	equ	1360
  5819  000000                     _FLTBIP1	equ	1361
  5820  000000                     _FLTBIP2	equ	1362
  5821  000000                     _FLTBM	equ	3735
  5822  000000                     _FORM0	equ	5384
  5823  000000                     _FORM1	equ	5385
  5824  000000                     _FRMEN	equ	4382
  5825  000000                     _GCEN	equ	4151
  5826  000000                     _GCSTAT	equ	4169
  5827  000000                     _I2CEN	equ	4159
  5828  000000                     _I2CMD	equ	15239
  5829  000000                     _I2COV	equ	4166
  5830  000000                     _I2CSIDL	equ	4157
  5831  000000                     _IC1IE	equ	1121
  5832  000000                     _IC1IF	equ	1057
  5833  000000                     _IC1IP0	equ	1188
  5834  000000                     _IC1IP1	equ	1189
  5835  000000                     _IC1IP2	equ	1190
  5836  000000                     _IC1MD	equ	15256
  5837  000000                     _IC2IE	equ	1124
  5838  000000                     _IC2IF	equ	1060
  5839  000000                     _IC2IP0	equ	1200
  5840  000000                     _IC2IP1	equ	1201
  5841  000000                     _IC2IP2	equ	1202
  5842  000000                     _IC2MD	equ	15257
  5843  000000                     _IC3IE	equ	1148
  5844  000000                     _IC3IF	equ	1084
  5845  000000                     _IC3IP0	equ	1296
  5846  000000                     _IC3IP1	equ	1297
  5847  000000                     _IC3IP2	equ	1298
  5848  000000                     _IC3MD	equ	15258
  5849  000000                     _IC4IE	equ	1149
  5850  000000                     _IC4IF	equ	1085
  5851  000000                     _IC4IP0	equ	1300
  5852  000000                     _IC4IP1	equ	1301
  5853  000000                     _IC4IP2	equ	1302
  5854  000000                     _IC4MD	equ	15259
  5855  000000                     _IC5IE	equ	1150
  5856  000000                     _IC5IF	equ	1086
  5857  000000                     _IC5IP0	equ	1304
  5858  000000                     _IC5IP1	equ	1305
  5859  000000                     _IC5IP2	equ	1306
  5860  000000                     _IC5MD	equ	15260
  5861  000000                     _IC6IE	equ	1151
  5862  000000                     _IC6IF	equ	1087
  5863  000000                     _IC6IP0	equ	1308
  5864  000000                     _IC6IP1	equ	1309
  5865  000000                     _IC6IP2	equ	1310
  5866  000000                     _IC6MD	equ	15261
  5867  000000                     _IC7IE	equ	1137
  5868  000000                     _IC7IF	equ	1073
  5869  000000                     _IC7IP0	equ	1252
  5870  000000                     _IC7IP1	equ	1253
  5871  000000                     _IC7IP2	equ	1254
  5872  000000                     _IC7MD	equ	15262
  5873  000000                     _IC8IE	equ	1138
  5874  000000                     _IC8IF	equ	1074
  5875  000000                     _IC8IP0	equ	1256
  5876  000000                     _IC8IP1	equ	1257
  5877  000000                     _IC8IP2	equ	1258
  5878  000000                     _IC8MD	equ	15263
  5879  000000                     _ICBNE	equ	2579
  5880  000000                     _ICI0	equ	2581
  5881  000000                     _ICI1	equ	2582
  5882  000000                     _ICM0	equ	2576
  5883  000000                     _ICM1	equ	2577
  5884  000000                     _ICM2	equ	2578
  5885  000000                     _ICOD0	equ	7297
  5886  000000                     _ICOD1	equ	7298
  5887  000000                     _ICOD2	equ	7299
  5888  000000                     _ICOV	equ	2580
  5889  000000                     _ICSIDL	equ	2589
  5890  000000                     _ICTMR	equ	2583
  5891  000000                     _IDLE	equ	14850
  5892  000000                     _IDLE_MODE	equ	15249
  5893  000000                     _IF	equ	544
  5894  000000                     _ILR0	equ	1416
  5895  000000                     _ILR1	equ	1417
  5896  000000                     _ILR2	equ	1418
  5897  000000                     _ILR3	equ	1419
  5898  000000                     _IMV0	equ	2345
  5899  000000                     _IMV1	equ	2346
  5900  000000                     _INDCK0	equ	2336
  5901  000000                     _INDCK1	equ	2337
  5902  000000                     _INDCK2	equ	2338
  5903  000000                     _INDOUT	equ	2339
  5904  000000                     _INDX	equ	2332
  5905  000000                     _INT0EP	equ	1040
  5906  000000                     _INT0IE	equ	1120
  5907  000000                     _INT0IF	equ	1056
  5908  000000                     _INT0IP0	equ	1184
  5909  000000                     _INT0IP1	equ	1185
  5910  000000                     _INT0IP2	equ	1186
  5911  000000                     _INT1EP	equ	1041
  5912  000000                     _INT1IE	equ	1136
  5913  000000                     _INT1IF	equ	1072
  5914  000000                     _INT1IP0	equ	1248
  5915  000000                     _INT1IP1	equ	1249
  5916  000000                     _INT1IP2	equ	1250
  5917  000000                     _INT2EP	equ	1042
  5918  000000                     _INT2IE	equ	1143
  5919  000000                     _INT2IF	equ	1079
  5920  000000                     _INT2IP0	equ	1276
  5921  000000                     _INT2IP1	equ	1277
  5922  000000                     _INT2IP2	equ	1278
  5923  000000                     _INT3EP	equ	1043
  5924  000000                     _INT3IE	equ	1156
  5925  000000                     _INT3IF	equ	1092
  5926  000000                     _INT3IP0	equ	1328
  5927  000000                     _INT3IP1	equ	1329
  5928  000000                     _INT3IP2	equ	1330
  5929  000000                     _INT4EP	equ	1044
  5930  000000                     _INT4IE	equ	1157
  5931  000000                     _INT4IF	equ	1093
  5932  000000                     _INT4IP0	equ	1332
  5933  000000                     _INT4IP1	equ	1333
  5934  000000                     _INT4IP2	equ	1334
  5935  000000                     _IOPUWR	equ	14862
  5936  000000                     _IPL0	equ	533
  5937  000000                     _IPL1	equ	534
  5938  000000                     _IPL2	equ	535
  5939  000000                     _IPL3	equ	547
  5940  000000                     _IPMIEN	equ	4155
  5941  000000                     _IRQtoCPU	equ	1423
  5942  000000                     _IRXIE	equ	7367
  5943  000000                     _IRXIF	equ	7351
  5944  000000                     _IR_BSR	equ	14977
  5945  000000                     _IR_SSR	equ	14993
  5946  000000                     _IUE	equ	3666
  5947  000000                     _IWCOL	equ	4167
  5948  000000                     _IW_BSR	equ	14978
  5949  000000                     _IW_SSR	equ	14994
  5950  000000                     _JTOFF	equ	7281
  5951  000000                     _LATA10	equ	5674
  5952  000000                     _LATA14	equ	5678
  5953  000000                     _LATA15	equ	5679
  5954  000000                     _LATA9	equ	5673
  5955  000000                     _LATB0	equ	5712
  5956  000000                     _LATB1	equ	5713
  5957  000000                     _LATB10	equ	5722
  5958  000000                     _LATB11	equ	5723
  5959  000000                     _LATB12	equ	5724
  5960  000000                     _LATB13	equ	5725
  5961  000000                     _LATB14	equ	5726
  5962  000000                     _LATB15	equ	5727
  5963  000000                     _LATB2	equ	5714
  5964  000000                     _LATB3	equ	5715
  5965  000000                     _LATB4	equ	5716
  5966  000000                     _LATB5	equ	5717
  5967  000000                     _LATB6	equ	5718
  5968  000000                     _LATB7	equ	5719
  5969  000000                     _LATB8	equ	5720
  5970  000000                     _LATB9	equ	5721
  5971  000000                     _LATC1	equ	5761
  5972  000000                     _LATC13	equ	5773
  5973  000000                     _LATC14	equ	5774
  5974  000000                     _LATC15	equ	5775
  5975  000000                     _LATC3	equ	5763
  5976  000000                     _LATD0	equ	5808
  5977  000000                     _LATD1	equ	5809
  5978  000000                     _LATD10	equ	5818
  5979  000000                     _LATD11	equ	5819
  5980  000000                     _LATD12	equ	5820
  5981  000000                     _LATD13	equ	5821
  5982  000000                     _LATD14	equ	5822
  5983  000000                     _LATD15	equ	5823
  5984  000000                     _LATD2	equ	5810
  5985  000000                     _LATD3	equ	5811
  5986  000000                     _LATD4	equ	5812
  5987  000000                     _LATD5	equ	5813
  5988  000000                     _LATD6	equ	5814
  5989  000000                     _LATD7	equ	5815
  5990  000000                     _LATD8	equ	5816
  5991  000000                     _LATD9	equ	5817
  5992  000000                     _LATE0	equ	5856
  5993  000000                     _LATE1	equ	5857
  5994  000000                     _LATE2	equ	5858
  5995  000000                     _LATE3	equ	5859
  5996  000000                     _LATE4	equ	5860
  5997  000000                     _LATE5	equ	5861
  5998  000000                     _LATE6	equ	5862
  5999  000000                     _LATE7	equ	5863
  6000  000000                     _LATE8	equ	5864
  6001  000000                     _LATE9	equ	5865
  6002  000000                     _LATF0	equ	5904
  6003  000000                     _LATF1	equ	5905
  6004  000000                     _LATF2	equ	5906
  6005  000000                     _LATF3	equ	5907
  6006  000000                     _LATF4	equ	5908
  6007  000000                     _LATF5	equ	5909
  6008  000000                     _LATF6	equ	5910
  6009  000000                     _LATF7	equ	5911
  6010  000000                     _LATF8	equ	5912
  6011  000000                     _LATG0	equ	5952
  6012  000000                     _LATG1	equ	5953
  6013  000000                     _LATG2	equ	5954
  6014  000000                     _LATG3	equ	5955
  6015  000000                     _LATG6	equ	5958
  6016+ 000000                     _LATG7	equ	5959
  6017+ 000000                     _LATG8	equ	5960
  6018+ 000000                     _LATG9	equ	5961
  6019+ 000000                     _LOCK	equ	14869
  6020+ 000000                     _LPBACK	equ	4198
  6021+ 000000                     _LPOSCEN	equ	14865
  6022+ 000000                     _MATHERR	equ	1028
  6023+ 000000                     _MI2CIE	equ	1134
  6024+ 000000                     _MI2CIF	equ	1070
  6025+ 000000                     _MI2CIP0	equ	1240
  6026+ 000000                     _MI2CIP1	equ	1241
  6027+ 000000                     _MI2CIP2	equ	1242
  6028+ 000000                     _MIDE	equ	6528
  6029+ 000000                     _MODE16	equ	4378
  6030+ 000000                     _MSTEN	equ	4373
  6031+ 000000                     _N	equ	531
  6032+ 000000                     _NOSC0	equ	14872
  6033+ 000000                     _NOSC1	equ	14873
  6034+ 000000                     _NOSC2	equ	14874
  6035+ 000000                     _NSTDIS	equ	1039
  6036+ 000000                     _NVMIE	equ	1132
  6037+ 000000                     _NVMIF	equ	1068
  6038+ 000000                     _NVMIP0	equ	1232
  6039+ 000000                     _NVMIP1	equ	1233
  6040+ 000000                     _NVMIP2	equ	1234
  6041+ 000000                     _OA	equ	543
  6042+ 000000                     _OAB	equ	539
  6043+ 000000                     _OB	equ	542
  6044+ 000000                     _OC1IE	equ	1122
  6045+ 000000                     _OC1IF	equ	1058
  6046+ 000000                     _OC1IP0	equ	1192
  6047+ 000000                     _OC1IP1	equ	1193
  6048+ 000000                     _OC1IP2	equ	1194
  6049+ 000000                     _OC1MD	equ	15248
  6050+ 000000                     _OC2IE	equ	1125
  6051+ 000000                     _OC2IF	equ	1061
  6052+ 000000                     _OC2IP0	equ	1204
  6053+ 000000                     _OC2IP1	equ	1205
  6054+ 000000                     _OC2IP2	equ	1206
  6055+ 000000                     _OC2MD	equ	15249
  6056+ 000000                     _OC3IE	equ	1139
  6057+ 000000                     _OC3IF	equ	1075
  6058+ 000000                     _OC3IP0	equ	1260
  6059+ 000000                     _OC3IP1	equ	1261
  6060+ 000000                     _OC3IP2	equ	1262
  6061+ 000000                     _OC3MD	equ	15250
  6062+ 000000                     _OC4IE	equ	1140
  6063+ 000000                     _OC4IF	equ	1076
  6064+ 000000                     _OC4IP0	equ	1264
  6065+ 000000                     _OC4IP1	equ	1265
  6066+ 000000                     _OC4IP2	equ	1266
  6067+ 000000                     _OC4MD	equ	15251
  6068+ 000000                     _OC5IE	equ	1152
  6069+ 000000                     _OC5IF	equ	1088
  6070+ 000000                     _OC5IP0	equ	1312
  6071+ 000000                     _OC5IP1	equ	1313
  6072+ 000000                     _OC5IP2	equ	1314
  6073+ 000000                     _OC5MD	equ	15252
  6074+ 000000                     _OC6IE	equ	1153
  6075+ 000000                     _OC6IF	equ	1089
  6076+ 000000                     _OC6IP0	equ	1316
  6077+ 000000                     _OC6IP1	equ	1317
  6078+ 000000                     _OC6IP2	equ	1318
  6079+ 000000                     _OC6MD	equ	15253
  6080+ 000000                     _OC7IE	equ	1154
  6081+ 000000                     _OC7IF	equ	1090
  6082+ 000000                     _OC7IP0	equ	1320
  6083+ 000000                     _OC7IP1	equ	1321
  6084+ 000000                     _OC7IP2	equ	1322
  6085+ 000000                     _OC7MD	equ	15254
  6086+ 000000                     _OC8IE	equ	1155
  6087+ 000000                     _OC8IF	equ	1091
  6088+ 000000                     _OC8IP0	equ	1324
  6089+ 000000                     _OC8IP1	equ	1325
  6090+ 000000                     _OC8IP2	equ	1326
  6091+ 000000                     _OC8MD	equ	15255
  6092+ 000000                     _OCFLT	equ	3108
  6093+ 000000                     _OCM0	equ	3104
  6094+ 000000                     _OCM1	equ	3105
  6095+ 000000                     _OCM2	equ	3106
  6096+ 000000                     _OCSIDL	equ	3117
  6097+ 000000                     _OCTSEL	equ	3107
  6098+ 000000                     _OERR	equ	4209
  6099+ 000000                     _OFFCAL	equ	5404
  6100+ 000000                     _OPMODE0	equ	7301
  6101+ 000000                     _OPMODE1	equ	7302
  6102+ 000000                     _OPMODE2	equ	7303
  6103+ 000000                     _OSCFAIL	equ	1025
  6104+ 000000                     _OSWEN	equ	14864
  6105+ 000000                     _OSYNC	equ	3665
  6106+ 000000                     _OV	equ	530
  6107+ 000000                     _OVATE	equ	1034
  6108+ 000000                     _OVBTE	equ	1033
  6109+ 000000                     _P	equ	4164
  6110+ 000000                     _PCDOUT	equ	2326
  6111+ 000000                     _PCFG0	equ	5440
  6112+ 000000                     _PCFG1	equ	5441
  6113+ 000000                     _PCFG10	equ	5450
  6114+ 000000                     _PCFG11	equ	5451
  6115+ 000000                     _PCFG12	equ	5452
  6116+ 000000                     _PCFG13	equ	5453
  6117+ 000000                     _PCFG14	equ	5454
  6118+ 000000                     _PCFG15	equ	5455
  6119+ 000000                     _PCFG2	equ	5442
  6120+ 000000                     _PCFG3	equ	5443
  6121+ 000000                     _PCFG4	equ	5444
  6122+ 000000                     _PCFG5	equ	5445
  6123+ 000000                     _PCFG6	equ	5446
  6124+ 000000                     _PCFG7	equ	5447
  6125+ 000000                     _PCFG8	equ	5448
  6126+ 000000                     _PCFG9	equ	5449
  6127+ 000000                     _PDSEL0	equ	4193
  6128+ 000000                     _PDSEL1	equ	4194
  6129+ 000000                     _PEN	equ	4146
  6130+ 000000                     _PEN1H	equ	3652
  6131+ 000000                     _PEN1L	equ	3648
  6132+ 000000                     _PEN2H	equ	3653
  6133+ 000000                     _PEN2L	equ	3649
  6134+ 000000                     _PEN3H	equ	3654
  6135+ 000000                     _PEN3L	equ	3650
  6136+ 000000                     _PEN4H	equ	3655
  6137+ 000000                     _PEN4L	equ	3651
  6138+ 000000                     _PERR	equ	4211
  6139+ 000000                     _POR	equ	14848
  6140+ 000000                     _POSRES	equ	2322
  6141+ 000000                     _POST0	equ	14870
  6142+ 000000                     _POST1	equ	14871
  6143+ 000000                     _POUT1H	equ	3745
  6144+ 000000                     _POUT1L	equ	3744
  6145+ 000000                     _POUT2H	equ	3747
  6146+ 000000                     _POUT2L	equ	3746
  6147+ 000000                     _POUT3H	equ	3749
  6148+ 000000                     _POUT3L	equ	3748
  6149+ 000000                     _POUT4H	equ	3751
  6150+ 000000                     _POUT4L	equ	3750
  6151+ 000000                     _POVD1H	equ	3753
  6152+ 000000                     _POVD1L	equ	3752
  6153+ 000000                     _POVD2H	equ	3755
  6154+ 000000                     _POVD2L	equ	3754
  6155+ 000000                     _POVD3H	equ	3757
  6156+ 000000                     _POVD3L	equ	3756
  6157+ 000000                     _POVD4H	equ	3759
  6158+ 000000                     _POVD4L	equ	3758
  6159+ 000000                     _PPRE0	equ	4368
  6160+ 000000                     _PPRE1	equ	4369
  6161+ 000000                     _PROGOP0	equ	15104
  6162+ 000000                     _PROGOP1	equ	15105
  6163+ 000000                     _PROGOP2	equ	15106
  6164+ 000000                     _PROGOP3	equ	15107
  6165+ 000000                     _PROGOP4	equ	15108
  6166+ 000000                     _PROGOP5	equ	15109
  6167+ 000000                     _PROGOP6	equ	15110
  6168+ 000000                     _PRSEG0	equ	7328
  6169+ 000000                     _PRSEG1	equ	7329
  6170+ 000000                     _PRSEG2	equ	7330
  6171+ 000000                     _PSV	equ	546
  6172+ 000000                     _PTCKPS0	equ	3586
  6173+ 000000                     _PTCKPS1	equ	3587
  6174+ 000000                     _PTDIR	equ	3615
  6175+ 000000                     _PTEN	equ	3599
  6176+ 000000                     _PTMOD0	equ	3584
  6177+ 000000                     _PTMOD1	equ	3585
  6178+ 000000                     _PTMOD2	equ	3657
  6179+ 000000                     _PTMOD3	equ	3658
  6180+ 000000                     _PTMOD4	equ	3659
  6181+ 000000                     _PTMR0	equ	3600
  6182+ 000000                     _PTMR1	equ	3601
  6183+ 000000                     _PTMR10	equ	3610
  6184+ 000000                     _PTMR11	equ	3611
  6185+ 000000                     _PTMR12	equ	3612
  6186+ 000000                     _PTMR13	equ	3613
  6187+ 000000                     _PTMR14	equ	3614
  6188+ 000000                     _PTMR2	equ	3602
  6189+ 000000                     _PTMR3	equ	3603
  6190+ 000000                     _PTMR4	equ	3604
  6191+ 000000                     _PTMR5	equ	3605
  6192+ 000000                     _PTMR6	equ	3606
  6193+ 000000                     _PTMR7	equ	3607
  6194+ 000000                     _PTMR8	equ	3608
  6195+ 000000                     _PTMR9	equ	3609
  6196+ 000000                     _PTOPS0	equ	3588
  6197+ 000000                     _PTOPS1	equ	3589
  6198+ 000000                     _PTOPS2	equ	3590
  6199+ 000000                     _PTOPS3	equ	3591
  6200+ 000000                     _PTSIDL	equ	3597
  6201+ 000000                     _PWMIE	equ	1159
  6202+ 000000                     _PWMIF	equ	1095
  6203+ 000000                     _PWMIP0	equ	1340
  6204+ 000000                     _PWMIP1	equ	1341
  6205+ 000000                     _PWMIP2	equ	1342
  6206+ 000000                     _PWMMD	equ	15241
  6207+ 000000                     _QECK0	equ	2340
  6208+ 000000                     _QECK1	equ	2341
  6209+ 000000                     _QECK2	equ	2342
  6210+ 000000                     _QEIIE	equ	1160
  6211+ 000000                     _QEIIF	equ	1096
  6212+ 000000                     _QEIIP0	equ	1344
  6213+ 000000                     _QEIIP1	equ	1345
  6214+ 000000                     _QEIIP2	equ	1346
  6215+ 000000                     _QEIM0	equ	2328
  6216  000000                     _QEIM1	equ	2329
  6217  000000                     _QEIM2	equ	2330
  6218  000000                     _QEIMD	equ	15242
  6219  000000                     _QEISIDL	equ	2333
  6220  000000                     _QEOUT	equ	2343
  6221  000000                     _RA	equ	532
  6222  000000                     _RA10	equ	5658
  6223  000000                     _RA14	equ	5662
  6224  000000                     _RA15	equ	5663
  6225  000000                     _RA9	equ	5657
  6226  000000                     _RB0	equ	5696
  6227  000000                     _RB1	equ	5697
  6228  000000                     _RB10	equ	5706
  6229  000000                     _RB11	equ	5707
  6230  000000                     _RB12	equ	5708
  6231  000000                     _RB13	equ	5709
  6232  000000                     _RB14	equ	5710
  6233  000000                     _RB15	equ	5711
  6234  000000                     _RB2	equ	5698
  6235  000000                     _RB3	equ	5699
  6236  000000                     _RB4	equ	5700
  6237  000000                     _RB5	equ	5701
  6238  000000                     _RB6	equ	5702
  6239  000000                     _RB7	equ	5703
  6240  000000                     _RB8	equ	5704
  6241  000000                     _RB9	equ	5705
  6242  000000                     _RBF	equ	4161
  6243  000000                     _RC1	equ	5745
  6244  000000                     _RC13	equ	5757
  6245  000000                     _RC14	equ	5758
  6246  000000                     _RC15	equ	5759
  6247  000000                     _RC3	equ	5747
  6248  000000                     _RCEN	equ	4147
  6249  000000                     _RD0	equ	5792
  6250  000000                     _RD1	equ	5793
  6251  000000                     _RD10	equ	5802
  6252  000000                     _RD11	equ	5803
  6253  000000                     _RD12	equ	5804
  6254  000000                     _RD13	equ	5805
  6255  000000                     _RD14	equ	5806
  6256  000000                     _RD15	equ	5807
  6257  000000                     _RD2	equ	5794
  6258  000000                     _RD3	equ	5795
  6259  000000                     _RD4	equ	5796
  6260  000000                     _RD5	equ	5797
  6261  000000                     _RD6	equ	5798
  6262  000000                     _RD7	equ	5799
  6263  000000                     _RD8	equ	5800
  6264  000000                     _RD9	equ	5801
  6265  000000                     _RE0	equ	5840
  6266  000000                     _RE1	equ	5841
  6267  000000                     _RE2	equ	5842
  6268  000000                     _RE3	equ	5843
  6269  000000                     _RE4	equ	5844
  6270  000000                     _RE5	equ	5845
  6271  000000                     _RE6	equ	5846
  6272  000000                     _RE7	equ	5847
  6273  000000                     _RE8	equ	5848
  6274  000000                     _RE9	equ	5849
  6275  000000                     _REC0	equ	7376
  6276  000000                     _REC1	equ	7377
  6277  000000                     _REC2	equ	7378
  6278  000000                     _REC3	equ	7379
  6279  000000                     _REC4	equ	7380
  6280  000000                     _REC5	equ	7381
  6281  000000                     _REC6	equ	7382
  6282  000000                     _REC7	equ	7383
  6283  000000                     _REQOP0	equ	7304
  6284  000000                     _REQOP1	equ	7305
  6285  000000                     _REQOP2	equ	7306
  6286  000000                     _RF0	equ	5888
  6287  000000                     _RF1	equ	5889
  6288  000000                     _RF2	equ	5890
  6289  000000                     _RF3	equ	5891
  6290  000000                     _RF4	equ	5892
  6291  000000                     _RF5	equ	5893
  6292  000000                     _RF6	equ	5894
  6293  000000                     _RF7	equ	5895
  6294  000000                     _RF8	equ	5896
  6295  000000                     _RG0	equ	5936
  6296  000000                     _RG1	equ	5937
  6297  000000                     _RG2	equ	5938
  6298  000000                     _RG3	equ	5939
  6299  000000                     _RG6	equ	5942
  6300  000000                     _RG7	equ	5943
  6301  000000                     _RG8	equ	5944
  6302  000000                     _RG9	equ	5945
  6303  000000                     _RIDLE	equ	4212
  6304  000000                     _RL_BSR	equ	14976
  6305  000000                     _RL_SSR	equ	14992
  6306  000000                     _RND	equ	545
  6307  000000                     _RSEN	equ	4145
  6308  000000                     _RXB0DBEN	equ	7282
  6309  000000                     _RXB0IE	equ	7360
  6310  000000                     _RXB0IF	equ	7344
  6311  000000                     _RXB0OVFL	equ	7359
  6312  000000                     _RXB1IE	equ	7361
  6313  000000                     _RXB1IF	equ	7345
  6314  000000                     _RXB1OVFL	equ	7358
  6315  000000                     _RXBP	equ	7355
  6316  000000                     _RXFUL	equ	7159
  6317  000000                     _RXRB0	equ	7076
  6318  000000                     _RXRB1	equ	7080
  6319  000000                     _RXRTR	equ	7081
  6320  000000                     _RXRTRRO	equ	7155
  6321  000000                     _RXWARN	equ	7353
  6322  000000                     _R_W	equ	4162
  6323  000000                     _R_nW	equ	4162
  6324  000000                     _S	equ	4163
  6325  000000                     _SA	equ	541
  6326  000000                     _SAB	equ	538
  6327  000000                     _SAM	equ	7334
  6328  000000                     _SAMC0	equ	5416
  6329  000000                     _SAMC1	equ	5417
  6330  000000                     _SAMC2	equ	5418
  6331  000000                     _SAMC3	equ	5419
  6332  000000                     _SAMC4	equ	5420
  6333  000000                     _SAMP	equ	5377
  6334  000000                     _SATA	equ	551
  6335  000000                     _SATB	equ	550
  6336  000000                     _SATDW	equ	549
  6337  000000                     _SB	equ	540
  6338  000000                     _SCLREL	equ	4156
  6339  000000                     _SEG1PH0	equ	7331
  6340  000000                     _SEG1PH1	equ	7332
  6341  000000                     _SEG1PH2	equ	7333
  6342  000000                     _SEG2PH0	equ	7336
  6343  000000                     _SEG2PH1	equ	7337
  6344  000000                     _SEG2PH2	equ	7338
  6345  000000                     _SEG2PHTS	equ	7335
  6346  000000                     _SEN	equ	4144
  6347  000000                     _SEVOPS0	equ	3672
  6348  000000                     _SEVOPS1	equ	3673
  6349  000000                     _SEVOPS2	equ	3674
  6350  000000                     _SEVOPS3	equ	3675
  6351  000000                     _SEVTCMP0	equ	3632
  6352  000000                     _SEVTCMP1	equ	3633
  6353  000000                     _SEVTCMP10	equ	3642
  6354  000000                     _SEVTCMP11	equ	3643
  6355  000000                     _SEVTCMP12	equ	3644
  6356  000000                     _SEVTCMP13	equ	3645
  6357  000000                     _SEVTCMP14	equ	3646
  6358  000000                     _SEVTCMP2	equ	3634
  6359  000000                     _SEVTCMP3	equ	3635
  6360  000000                     _SEVTCMP4	equ	3636
  6361  000000                     _SEVTCMP5	equ	3637
  6362  000000                     _SEVTCMP6	equ	3638
  6363  000000                     _SEVTCMP7	equ	3639
  6364  000000                     _SEVTCMP8	equ	3640
  6365  000000                     _SEVTCMP9	equ	3641
  6366  000000                     _SEVTDIR	equ	3647
  6367  000000                     _SI2CIE	equ	1133
  6368  000000                     _SI2CIF	equ	1069
  6369  000000                     _SI2CIP0	equ	1236
  6370  000000                     _SI2CIP1	equ	1237
  6371  000000                     _SI2CIP2	equ	1238
  6372  000000                     _SID0	equ	6146
  6373  000000                     _SID1	equ	6147
  6374  000000                     _SID10	equ	6156
  6375  000000                     _SID2	equ	6148
  6376  000000                     _SID3	equ	6149
  6377  000000                     _SID4	equ	6150
  6378  000000                     _SID5	equ	6151
  6379  000000                     _SID6	equ	6152
  6380  000000                     _SID7	equ	6153
  6381  000000                     _SID8	equ	6154
  6382  000000                     _SID9	equ	6155
  6383  000000                     _SIMSAM	equ	5379
  6384  000000                     _SJW0	equ	7318
  6385  000000                     _SJW1	equ	7319
  6386  000000                     _SLEEP	equ	14851
  6387  000000                     _SLEEP_MODE	equ	15248
  6388  000000                     _SMEN	equ	4152
  6389  000000                     _SMP	equ	4377
  6390  000000                     _SMPI0	equ	5394
  6391  000000                     _SMPI1	equ	5395
  6392  000000                     _SMPI2	equ	5396
  6393  000000                     _SMPI3	equ	5397
  6394  000000                     _SPI1IE	equ	1128
  6395  000000                     _SPI1IF	equ	1064
  6396  000000                     _SPI1IP0	equ	1216
  6397  000000                     _SPI1IP1	equ	1217
  6398  000000                     _SPI1IP2	equ	1218
  6399  000000                     _SPI1MD	equ	15235
  6400  000000                     _SPI2IE	equ	1146
  6401  000000                     _SPI2IF	equ	1082
  6402  000000                     _SPI2IP0	equ	1288
  6403  000000                     _SPI2IP1	equ	1289
  6404  000000                     _SPI2IP2	equ	1290
  6405  000000                     _SPI2MD	equ	15236
  6406  000000                     _SPIEN	equ	4367
  6407  000000                     _SPIFSD	equ	4381
  6408  000000                     _SPIRBF	equ	4352
  6409  000000                     _SPIROV	equ	4358
  6410  000000                     _SPISIDL	equ	4365
  6411  000000                     _SPITBF	equ	4353
  6412  000000                     _SPRE0	equ	4370
  6413  000000                     _SPRE1	equ	4371
  6414  000000                     _SPRE2	equ	4372
  6415  000000                     _SRR	equ	6657
  6416  000000                     _SSEN	equ	4375
  6417  000000                     _SSRC0	equ	5381
  6418  000000                     _SSRC1	equ	5382
  6419  000000                     _SSRC2	equ	5383
  6420  000000                     _STKERR	equ	1026
  6421  000000                     _STREN	equ	4150
  6422  000000                     _STSEL	equ	4192
  6423  000000                     _SWDTEN	equ	14853
  6424  000000                     _SWPAB	equ	2327
  6425  000000                     _SWR	equ	14854
  6426  000000                     _T1IE	equ	1123
  6427  000000                     _T1IF	equ	1059
  6428  000000                     _T1IP0	equ	1196
  6429  000000                     _T1IP1	equ	1197
  6430  000000                     _T1IP2	equ	1198
  6431  000000                     _T1MD	equ	15243
  6432  000000                     _T2IE	equ	1126
  6433  000000                     _T2IF	equ	1062
  6434  000000                     _T2IP0	equ	1208
  6435  000000                     _T2IP1	equ	1209
  6436  000000                     _T2IP2	equ	1210
  6437  000000                     _T2MD	equ	15244
  6438  000000                     _T32	equ	2179
  6439  000000                     _T3IE	equ	1127
  6440  000000                     _T3IF	equ	1063
  6441  000000                     _T3IP0	equ	1212
  6442  000000                     _T3IP1	equ	1213
  6443  000000                     _T3IP2	equ	1214
  6444  000000                     _T3MD	equ	15245
  6445  000000                     _T4IE	equ	1141
  6446  000000                     _T4IF	equ	1077
  6447  000000                     _T4IP0	equ	1268
  6448  000000                     _T4IP1	equ	1269
  6449  000000                     _T4IP2	equ	1270
  6450  000000                     _T4MD	equ	15246
  6451  000000                     _T5IE	equ	1142
  6452  000000                     _T5IF	equ	1078
  6453  000000                     _T5IP0	equ	1272
  6454  000000                     _T5IP1	equ	1273
  6455  000000                     _T5IP2	equ	1274
  6456  000000                     _T5MD	equ	15247
  6457  000000                     _TBF	equ	4160
  6458  000000                     _TCKPS0	equ	2084
  6459  000000                     _TCKPS1	equ	2085
  6460  000000                     _TCS	equ	2081
  6461  000000                     _TEC0	equ	7384
  6462  000000                     _TEC1	equ	7385
  6463  000000                     _TEC2	equ	7386
  6464  000000                     _TEC3	equ	7387
  6465  000000                     _TEC4	equ	7388
  6466  000000                     _TEC5	equ	7389
  6467  000000                     _TEC6	equ	7390
  6468  000000                     _TEC7	equ	7391
  6469  000000                     _TGATE	equ	2086
  6470  000000                     _TMODE	equ	1422
  6471  000000                     _TON	equ	2095
  6472  000000                     _TQCKPS0	equ	2323
  6473  000000                     _TQCKPS1	equ	2324
  6474  000000                     _TQCS	equ	2321
  6475  000000                     _TQGATE	equ	2325
  6476  000000                     _TRAPR	equ	14863
  6477  000000                     _TRISA10	equ	5642
  6478  000000                     _TRISA14	equ	5646
  6479  000000                     _TRISA15	equ	5647
  6480  000000                     _TRISA9	equ	5641
  6481  000000                     _TRISB0	equ	5680
  6482  000000                     _TRISB1	equ	5681
  6483  000000                     _TRISB10	equ	5690
  6484  000000                     _TRISB11	equ	5691
  6485  000000                     _TRISB12	equ	5692
  6486  000000                     _TRISB13	equ	5693
  6487  000000                     _TRISB14	equ	5694
  6488  000000                     _TRISB15	equ	5695
  6489  000000                     _TRISB2	equ	5682
  6490  000000                     _TRISB3	equ	5683
  6491  000000                     _TRISB4	equ	5684
  6492  000000                     _TRISB5	equ	5685
  6493  000000                     _TRISB6	equ	5686
  6494  000000                     _TRISB7	equ	5687
  6495  000000                     _TRISB8	equ	5688
  6496  000000                     _TRISB9	equ	5689
  6497  000000                     _TRISC1	equ	5729
  6498  000000                     _TRISC13	equ	5741
  6499  000000                     _TRISC14	equ	5742
  6500  000000                     _TRISC15	equ	5743
  6501  000000                     _TRISC3	equ	5731
  6502  000000                     _TRISD0	equ	5776
  6503  000000                     _TRISD1	equ	5777
  6504  000000                     _TRISD10	equ	5786
  6505  000000                     _TRISD11	equ	5787
  6506  000000                     _TRISD12	equ	5788
  6507  000000                     _TRISD13	equ	5789
  6508  000000                     _TRISD14	equ	5790
  6509  000000                     _TRISD15	equ	5791
  6510  000000                     _TRISD2	equ	5778
  6511  000000                     _TRISD3	equ	5779
  6512  000000                     _TRISD4	equ	5780
  6513  000000                     _TRISD5	equ	5781
  6514  000000                     _TRISD6	equ	5782
  6515  000000                     _TRISD7	equ	5783
  6516  000000                     _TRISD8	equ	5784
  6517  000000                     _TRISD9	equ	5785
  6518  000000                     _TRISE0	equ	5824
  6519  000000                     _TRISE1	equ	5825
  6520  000000                     _TRISE2	equ	5826
  6521  000000                     _TRISE3	equ	5827
  6522  000000                     _TRISE4	equ	5828
  6523  000000                     _TRISE5	equ	5829
  6524  000000                     _TRISE6	equ	5830
  6525  000000                     _TRISE7	equ	5831
  6526  000000                     _TRISE8	equ	5832
  6527  000000                     _TRISE9	equ	5833
  6528  000000                     _TRISF0	equ	5872
  6529  000000                     _TRISF1	equ	5873
  6530  000000                     _TRISF2	equ	5874
  6531  000000                     _TRISF3	equ	5875
  6532  000000                     _TRISF4	equ	5876
  6533  000000                     _TRISF5	equ	5877
  6534  000000                     _TRISF6	equ	5878
  6535  000000                     _TRISF7	equ	5879
  6536  000000                     _TRISF8	equ	5880
  6537  000000                     _TRISG0	equ	5920
  6538  000000                     _TRISG1	equ	5921
  6539  000000                     _TRISG2	equ	5922
  6540  000000                     _TRISG3	equ	5923
  6541  000000                     _TRISG6	equ	5926
  6542  000000                     _TRISG7	equ	5927
  6543  000000                     _TRISG8	equ	5928
  6544  000000                     _TRISG9	equ	5929
  6545  000000                     _TRMT	equ	4216
  6546  000000                     _TRSTAT	equ	4174
  6547  000000                     _TSIDL	equ	2093
  6548  000000                     _TSYNC	equ	2082
  6549  000000                     _TUN0	equ	14880
  6550  000000                     _TUN1	equ	14881
  6551  000000                     _TUN2	equ	14882
  6552  000000                     _TUN3	equ	14883
  6553  000000                     _TUN4	equ	14884
  6554  000000                     _TUN5	equ	14885
  6555  000000                     _TWRI	equ	15112
  6556  000000                     _TX2B2D40	equ	6736
  6557  000000                     _TX2B2D41	equ	6737
  6558  000000                     _TX2B2D42	equ	6738
  6559  000000                     _TX2B2D43	equ	6739
  6560  000000                     _TX2B2D44	equ	6740
  6561  000000                     _TX2B2D45	equ	6741
  6562  000000                     _TX2B2D46	equ	6742
  6563  000000                     _TX2B2D47	equ	6743
  6564  000000                     _TX2B2D60	equ	6752
  6565  000000                     _TX2B2D61	equ	6753
  6566  000000                     _TX2B2D62	equ	6754
  6567  000000                     _TX2B2D63	equ	6755
  6568  000000                     _TX2B2D64	equ	6756
  6569  000000                     _TX2B2D65	equ	6757
  6570  000000                     _TX2B2D66	equ	6758
  6571  000000                     _TX2B2D67	equ	6759
  6572  000000                     _TX2B2D70	equ	6760
  6573  000000                     _TX2B2D71	equ	6761
  6574  000000                     _TX2B2D72	equ	6762
  6575  000000                     _TX2B2D73	equ	6763
  6576  000000                     _TX2B2D74	equ	6764
  6577  000000                     _TX2B2D75	equ	6765
  6578  000000                     _TX2B2D76	equ	6766
  6579  000000                     _TX2B2D77	equ	6767
  6580  000000                     _TXABT	equ	6774
  6581  000000                     _TXB0D00	equ	6960
  6582  000000                     _TXB0D01	equ	6961
  6583  000000                     _TXB0D02	equ	6962
  6584  000000                     _TXB0D03	equ	6963
  6585  000000                     _TXB0D04	equ	6964
  6586  000000                     _TXB0D05	equ	6965
  6587  000000                     _TXB0D06	equ	6966
  6588  000000                     _TXB0D07	equ	6967
  6589  000000                     _TXB0D10	equ	6968
  6590  000000                     _TXB0D11	equ	6969
  6591  000000                     _TXB0D12	equ	6970
  6592  000000                     _TXB0D13	equ	6971
  6593  000000                     _TXB0D14	equ	6972
  6594  000000                     _TXB0D15	equ	6973
  6595  000000                     _TXB0D16	equ	6974
  6596  000000                     _TXB0D17	equ	6975
  6597  000000                     _TXB0D20	equ	6976
  6598  000000                     _TXB0D21	equ	6977
  6599  000000                     _TXB0D22	equ	6978
  6600  000000                     _TXB0D23	equ	6979
  6601  000000                     _TXB0D24	equ	6980
  6602  000000                     _TXB0D25	equ	6981
  6603  000000                     _TXB0D26	equ	6982
  6604  000000                     _TXB0D27	equ	6983
  6605  000000                     _TXB0D30	equ	6984
  6606  000000                     _TXB0D31	equ	6985
  6607  000000                     _TXB0D32	equ	6986
  6608  000000                     _TXB0D33	equ	6987
  6609  000000                     _TXB0D34	equ	6988
  6610  000000                     _TXB0D35	equ	6989
  6611  000000                     _TXB0D36	equ	6990
  6612  000000                     _TXB0D37	equ	6991
  6613  000000                     _TXB0D40	equ	6992
  6614  000000                     _TXB0D41	equ	6993
  6615  000000                     _TXB0D42	equ	6994
  6616  000000                     _TXB0D43	equ	6995
  6617  000000                     _TXB0D44	equ	6996
  6618  000000                     _TXB0D45	equ	6997
  6619  000000                     _TXB0D46	equ	6998
  6620  000000                     _TXB0D47	equ	6999
  6621  000000                     _TXB0D50	equ	7000
  6622  000000                     _TXB0D51	equ	7001
  6623  000000                     _TXB0D52	equ	7002
  6624  000000                     _TXB0D53	equ	7003
  6625  000000                     _TXB0D54	equ	7004
  6626  000000                     _TXB0D55	equ	7005
  6627  000000                     _TXB0D56	equ	7006
  6628  000000                     _TXB0D57	equ	7007
  6629  000000                     _TXB0D60	equ	7008
  6630  000000                     _TXB0D61	equ	7009
  6631  000000                     _TXB0D62	equ	7010
  6632  000000                     _TXB0D63	equ	7011
  6633  000000                     _TXB0D64	equ	7012
  6634  000000                     _TXB0D65	equ	7013
  6635  000000                     _TXB0D66	equ	7014
  6636  000000                     _TXB0D67	equ	7015
  6637  000000                     _TXB0D70	equ	7016
  6638  000000                     _TXB0D71	equ	7017
  6639  000000                     _TXB0D72	equ	7018
  6640  000000                     _TXB0D73	equ	7019
  6641  000000                     _TXB0D74	equ	7020
  6642  000000                     _TXB0D75	equ	7021
  6643  000000                     _TXB0D76	equ	7022
  6644  000000                     _TXB0D77	equ	7023
  6645  000000                     _TXB0IE	equ	7362
  6646  000000                     _TXB0IF	equ	7346
  6647  000000                     _TXB1D00	equ	6832
  6648  000000                     _TXB1D01	equ	6833
  6649  000000                     _TXB1D02	equ	6834
  6650  000000                     _TXB1D03	equ	6835
  6651  000000                     _TXB1D04	equ	6836
  6652  000000                     _TXB1D05	equ	6837
  6653  000000                     _TXB1D06	equ	6838
  6654  000000                     _TXB1D07	equ	6839
  6655  000000                     _TXB1D10	equ	6840
  6656  000000                     _TXB1D11	equ	6841
  6657  000000                     _TXB1D12	equ	6842
  6658  000000                     _TXB1D13	equ	6843
  6659  000000                     _TXB1D14	equ	6844
  6660  000000                     _TXB1D15	equ	6845
  6661  000000                     _TXB1D16	equ	6846
  6662  000000                     _TXB1D17	equ	6847
  6663  000000                     _TXB1D20	equ	6848
  6664  000000                     _TXB1D21	equ	6849
  6665  000000                     _TXB1D22	equ	6850
  6666  000000                     _TXB1D23	equ	6851
  6667  000000                     _TXB1D24	equ	6852
  6668  000000                     _TXB1D25	equ	6853
  6669  000000                     _TXB1D26	equ	6854
  6670  000000                     _TXB1D27	equ	6855
  6671  000000                     _TXB1D30	equ	6856
  6672  000000                     _TXB1D31	equ	6857
  6673  000000                     _TXB1D32	equ	6858
  6674  000000                     _TXB1D33	equ	6859
  6675  000000                     _TXB1D34	equ	6860
  6676  000000                     _TXB1D35	equ	6861
  6677  000000                     _TXB1D36	equ	6862
  6678  000000                     _TXB1D37	equ	6863
  6679  000000                     _TXB1D40	equ	6864
  6680  000000                     _TXB1D41	equ	6865
  6681  000000                     _TXB1D42	equ	6866
  6682  000000                     _TXB1D43	equ	6867
  6683  000000                     _TXB1D44	equ	6868
  6684  000000                     _TXB1D45	equ	6869
  6685  000000                     _TXB1D46	equ	6870
  6686  000000                     _TXB1D47	equ	6871
  6687  000000                     _TXB1D50	equ	6872
  6688  000000                     _TXB1D51	equ	6873
  6689  000000                     _TXB1D52	equ	6874
  6690  000000                     _TXB1D53	equ	6875
  6691  000000                     _TXB1D54	equ	6876
  6692  000000                     _TXB1D55	equ	6877
  6693  000000                     _TXB1D56	equ	6878
  6694  000000                     _TXB1D57	equ	6879
  6695  000000                     _TXB1D60	equ	6880
  6696  000000                     _TXB1D61	equ	6881
  6697  000000                     _TXB1D62	equ	6882
  6698  000000                     _TXB1D63	equ	6883
  6699  000000                     _TXB1D64	equ	6884
  6700  000000                     _TXB1D65	equ	6885
  6701  000000                     _TXB1D66	equ	6886
  6702  000000                     _TXB1D67	equ	6887
  6703  000000                     _TXB1D70	equ	6888
  6704  000000                     _TXB1D71	equ	6889
  6705  000000                     _TXB1D72	equ	6890
  6706  000000                     _TXB1D73	equ	6891
  6707  000000                     _TXB1D74	equ	6892
  6708  000000                     _TXB1D75	equ	6893
  6709  000000                     _TXB1D76	equ	6894
  6710  000000                     _TXB1D77	equ	6895
  6711  000000                     _TXB1IE	equ	7363
  6712  000000                     _TXB1IF	equ	7347
  6713  000000                     _TXB2D00	equ	6704
  6714  000000                     _TXB2D01	equ	6705
  6715  000000                     _TXB2D02	equ	6706
  6716  000000                     _TXB2D03	equ	6707
  6717  000000                     _TXB2D04	equ	6708
  6718  000000                     _TXB2D05	equ	6709
  6719  000000                     _TXB2D06	equ	6710
  6720  000000                     _TXB2D07	equ	6711
  6721  000000                     _TXB2D10	equ	6712
  6722  000000                     _TXB2D11	equ	6713
  6723  000000                     _TXB2D12	equ	6714
  6724  000000                     _TXB2D13	equ	6715
  6725  000000                     _TXB2D14	equ	6716
  6726  000000                     _TXB2D15	equ	6717
  6727  000000                     _TXB2D16	equ	6718
  6728  000000                     _TXB2D17	equ	6719
  6729  000000                     _TXB2D20	equ	6720
  6730  000000                     _TXB2D21	equ	6721
  6731  000000                     _TXB2D22	equ	6722
  6732  000000                     _TXB2D23	equ	6723
  6733  000000                     _TXB2D24	equ	6724
  6734  000000                     _TXB2D25	equ	6725
  6735  000000                     _TXB2D26	equ	6726
  6736  000000                     _TXB2D27	equ	6727
  6737  000000                     _TXB2D30	equ	6728
  6738  000000                     _TXB2D31	equ	6729
  6739  000000                     _TXB2D32	equ	6730
  6740  000000                     _TXB2D33	equ	6731
  6741  000000                     _TXB2D34	equ	6732
  6742  000000                     _TXB2D35	equ	6733
  6743  000000                     _TXB2D36	equ	6734
  6744  000000                     _TXB2D37	equ	6735
  6745  000000                     _TXB2D40	equ	8272
  6746  000000                     _TXB2D41	equ	8273
  6747  000000                     _TXB2D42	equ	8274
  6748  000000                     _TXB2D43	equ	8275
  6749  000000                     _TXB2D44	equ	8276
  6750  000000                     _TXB2D45	equ	8277
  6751  000000                     _TXB2D46	equ	8278
  6752  000000                     _TXB2D47	equ	8279
  6753  000000                     _TXB2D50	equ	6744
  6754  000000                     _TXB2D51	equ	6745
  6755  000000                     _TXB2D52	equ	6746
  6756  000000                     _TXB2D53	equ	6747
  6757  000000                     _TXB2D54	equ	6748
  6758  000000                     _TXB2D55	equ	6749
  6759  000000                     _TXB2D56	equ	6750
  6760  000000                     _TXB2D57	equ	6751
  6761  000000                     _TXB2D60	equ	8288
  6762  000000                     _TXB2D61	equ	8289
  6763  000000                     _TXB2D62	equ	8290
  6764  000000                     _TXB2D63	equ	8291
  6765  000000                     _TXB2D64	equ	8292
  6766  000000                     _TXB2D65	equ	8293
  6767  000000                     _TXB2D66	equ	8294
  6768  000000                     _TXB2D67	equ	8295
  6769  000000                     _TXB2D70	equ	8296
  6770  000000                     _TXB2D71	equ	8297
  6771  000000                     _TXB2D72	equ	8298
  6772  000000                     _TXB2D73	equ	8299
  6773  000000                     _TXB2D74	equ	8300
  6774  000000                     _TXB2D75	equ	8301
  6775  000000                     _TXB2D76	equ	8302
  6776  000000                     _TXB2D77	equ	8303
  6777  000000                     _TXB2IE	equ	7364
  6778  000000                     _TXB2IF	equ	7348
  6779  000000                     _TXBO	equ	7357
  6780  000000                     _TXBP	equ	7356
  6781  000000                     _TXERR	equ	6772
  6782  000000                     _TXIDE	equ	6656
  6783  000000                     _TXLARB	equ	6773
  6784  000000                     _TXPRI0	equ	6768
  6785  000000                     _TXPRI1	equ	6769
  6786  000000                     _TXRB0	equ	6695
  6787  000000                     _TXRB1	equ	6696
  6788  000000                     _TXREQ	equ	6771
  6789  000000                     _TXRTR	equ	6697
  6790  000000                     _TXWARN	equ	7354
  6791  000000                     _U1MD	equ	15237
  6792  000000                     _U1RXIE	equ	1129
  6793  000000                     _U1RXIF	equ	1065
  6794  000000                     _U1RXIP0	equ	1220
  6795  000000                     _U1RXIP1	equ	1221
  6796  000000                     _U1RXIP2	equ	1222
  6797  000000                     _U1TXIE	equ	1130
  6798  000000                     _U1TXIF	equ	1066
  6799  000000                     _U1TXIP0	equ	1224
  6800  000000                     _U1TXIP1	equ	1225
  6801  000000                     _U1TXIP2	equ	1226
  6802  000000                     _U2MD	equ	15238
  6803  000000                     _U2RXIE	equ	1144
  6804  000000                     _U2RXIF	equ	1080
  6805  000000                     _U2RXIP0	equ	1280
  6806  000000                     _U2RXIP1	equ	1281
  6807  000000                     _U2RXIP2	equ	1282
  6808  000000                     _U2TXIE	equ	1145
  6809  000000                     _U2TXIF	equ	1081
  6810  000000                     _U2TXIP0	equ	1284
  6811  000000                     _U2TXIP1	equ	1285
  6812  000000                     _U2TXIP2	equ	1286
  6813  000000                     _UARTEN	equ	4207
  6814  000000                     _UDIS	equ	3664
  6815  000000                     _UPDN	equ	2331
  6816  000000                     _UPDN_SRC	equ	2320
  6817  000000                     _URXDA	equ	4208
  6818  000000                     _URXISEL0	equ	4214
  6819  000000                     _URXISEL1	equ	4215
  6820  000000                     _URXREG0	equ	4240
  6821  000000                     _URXREG1	equ	4241
  6822  000000                     _URXREG2	equ	4242
  6823  000000                     _URXREG3	equ	4243
  6824  000000                     _URXREG4	equ	4244
  6825  000000                     _URXREG5	equ	4245
  6826  000000                     _URXREG6	equ	4246
  6827  000000                     _URXREG7	equ	4247
  6828  000000                     _URXREG8	equ	4248
  6829  000000                     _US	equ	556
  6830  000000                     _USIDL	equ	4205
  6831  000000                     _UTXBF	equ	4217
  6832  000000                     _UTXBRK	equ	4219
  6833  000000                     _UTXEN	equ	4218
  6834  000000                     _UTXISEL	equ	4223
  6835  000000                     _UTXREG0	equ	4224
  6836  000000                     _UTXREG1	equ	4225
  6837  000000                     _UTXREG2	equ	4226
  6838  000000                     _UTXREG3	equ	4227
  6839  000000                     _UTXREG4	equ	4228
  6840  000000                     _UTXREG5	equ	4229
  6841  000000                     _UTXREG6	equ	4230
  6842  000000                     _UTXREG7	equ	4231
  6843  000000                     _UTXREG8	equ	4232
  6844  000000                     _VCFG0	equ	5405
  6845  000000                     _VCFG1	equ	5406
  6846  000000                     _VCFG2	equ	5407
  6847  000000                     _VECNUM0	equ	1408
  6848  000000                     _VECNUM1	equ	1409
  6849  000000                     _VECNUM2	equ	1410
  6850  000000                     _VECNUM3	equ	1411
  6851  000000                     _VECNUM4	equ	1412
  6852  000000                     _VECNUM5	equ	1413
  6853  000000                     _VHOLD	equ	1421
  6854  000000                     _WAKE	equ	4199
  6855  000000                     _WAKFIL	equ	7342
  6856  000000                     _WAKIE	equ	7366
  6857  000000                     _WAKIF	equ	7350
  6858  000000                     _WDTO	equ	14852
  6859  000000                     _WR	equ	15119
  6860  000000                     _WREN	equ	15118
  6861  000000                     _WRERR	equ	15117
  6862  000000                     _XB0	equ	640
  6863  000000                     _XB1	equ	641
  6864  000000                     _XB10	equ	650
  6865  000000                     _XB11	equ	651
  6866  000000                     _XB12	equ	652
  6867  000000                     _XB13	equ	653
  6868  000000                     _XB14	equ	654
  6869  000000                     _XB2	equ	642
  6870  000000                     _XB3	equ	643
  6871  000000                     _XB4	equ	644
  6872  000000                     _XB5	equ	645
  6873  000000                     _XB6	equ	646
  6874  000000                     _XB7	equ	647
  6875  000000                     _XB8	equ	648
  6876  000000                     _XB9	equ	649
  6877  000000                     _XMODEN	equ	575
  6878  000000                     _XWM0	equ	560
  6879  000000                     _XWM1	equ	561
  6880  000000                     _XWM2	equ	562
  6881  000000                     _XWM3	equ	563
  6882  000000                     _YMODEN	equ	574
  6883  000000                     _YWM0	equ	564
  6884  000000                     _YWM1	equ	565
  6885  000000                     _YWM2	equ	566
  6886  000000                     _YWM3	equ	567
  6887  000000                     _Z	equ	529


HI-TECH Software dsPIC Macro Assembler V9.62 build 7866                    Page 2
Symbol Table                                           Tue Jan 05 21:22:06 2016

                                   u10 00D680  
                                   u11 00D67C  
                                   u20 00D690  
                                   u21 00D68C  
                                   u30 00D6A4  
                                   u31 00D6A0  
                                   u40 00D706  
                                   u41 00D702  
                                   u50 00D746  
                                   u51 00D742  
                                   u60 00D75E  
                                   u61 00D75A  
                                   u70 00D806  
                                   u71 00D7FC  
                                   u80 00D806  
                                   u81 00D80A  
                                   u90 00D812  
                                   u91 00D80E  
                      _vTaskSuspendAll 00EF04  
                                  u100 00D832  
                                  u101 00D82E  
                                  u110 00D846  
                                  u111 00D842  
                                  u200 00D9CC  
                                  u120 00D862  
                                  u201 00D9C2  
                                  u121 00D85E  
                                  u210 00D9CC  
                                  u130 00D888  
                                  u211 00D9D0  
                                  u131 00D884  
                                  u300 00DAE4  
                                  u220 00D9D8  
                                  u140 00D8A6  
                                  u301 00DAE0  
                                  u221 00D9D4  
                                  u141 00D8A2  
                                  u310 00DAF4  
                                  u230 00D9F6  
                                  u150 00D8DA  
                                  u311 00DAF0  
                                  u231 00D9F2  
                                  u151 00D8D6  
                                  u400 00DC82  
                                  u320 00DB78  
                                  u240 00DA06  
                                  u160 00D8F8  
                                  u401 00DC7E  
                                  u321 00DB74  
                                  u241 00DA02  
                                  u161 00D8F4  
                                  u410 00DCA0  
                                  u330 00DB9A  
                                  u250 00DA1A  
                                  u170 00D91E  
                                  u411 00DC9C  
                                  u331 00DB96  
                                  u251 00DA16  
                                  u171 00D91A  
                                  u500 00DE2E  
                                  u420 00DCC6  
                                  u340 00DBB0  
                                  u260 00DA2A  
                                  u180 00D930  
                                  u501 00DE2A  
                                  u421 00DCC2  
                                  u341 00DBAC  
                                  u261 00DA26  
                                  u181 00D92C  
                                  u510 00DF4E  
                                  u430 00DCD8  
                                  u350 00DBC4  
                                  u270 00DAA6  
                                  u190 00D950  
                                  u511 00DF4A  
                                  u431 00DCD4  
                                  u351 00DBC0  
                                  u271 00DAA2  
                                  u191 00D94C  
                                  u600 00E0EA  
                                  u520 00DF62  
                                  u440 00DCF8  
                                  u360 00DBF2  
                                  u280 00DAC0  
                                  u601 00E0E6  
                                  u521 00DF5E  
                                  u441 00DCF4  
                                  u361 00DBEE  
                                  u281 00DABC  
                                  u610 00E114  
                                  u530 00DF9A  
                                  u450 00DD64  
                                  u370 00DC06  
                                  u290 00DAD0  
                                  u611 00E110  
                                  u531 00DF96  
                                  u451 00DD60  
                                  u371 00DC02  
                                  u291 00DACC  
                                  u700 00E2F8  
                                  u620 00E13A  
                                  u540 00DFE4  
                                  u460 00DD86  
                                  u380 00DC30  
                                  u701 00E2F4  
                                  u621 00E136  
                                  u541 00DFE0  
                                  u461 00DD82  
                                  u381 00DC2C  
                                  u710 00E344  
                                  u630 00E14E  
                                  u550 00E00C  
                                  u470 00DD96  
                                  u390 00DC4E  
                                  u711 00E340  
                                  u631 00E14A  
                                  u551 00E008  
                                  u471 00DD92  
                                  u391 00DC4A  
                                  u800 00E51E  
                                  u720 00E366  
                                  u640 00E178  
                                  u560 00E01C  
                                  u480 00DDAA  
                                  u801 00E51A  
                                  u721 00E362  
                                  u641 00E174  
                                  u561 00E018  
                                  u481 00DDA6  
                                  u810 00E538  
                                  u730 00E37A  
                                  u650 00E1AE  
                                  u570 00E062  
                                  u490 00DDBA  
                                  u811 00E534  
                                  u731 00E376  
                                  u651 00E1AA  
                                  u571 00E05E  
                                  u491 00DDB6  
                                  u820 00E548  
                                  u740 00E3E4  
                                  u660 00E1F2  
                                  u580 00E088  
                                  u821 00E544  
                                  u741 00E3E0  
                                  u661 00E1EE  
                                  u581 00E084  
                                  u830 00E55C  
                                  u750 00E3F4  
                                  u670 00E23E  
                                  u590 00E0D6  
                                  u831 00E558  
                                  u751 00E3F0  
                                  u671 00E23A  
                                  u591 00E0D2  
                                  u840 00E5B0  
                                  u760 00E43C  
                                  u680 00E28A  
                                  u841 00E5AC  
                                  u761 00E438  
                                  u681 00E286  
                                  u850 00E5D6  
                                  u770 00E462  
                                  u690 00E2E8  
                                  u851 00E5D2  
                                  u771 00E45E  
                                  u691 00E2E4  
                                  u860 00E610  
                                  u780 00E4A2  
                                  u861 00E60C  
                                  u781 00E49E  
                                  u870 00E620  
                                  u790 00E4B6  
                                  u871 00E61C  
                                  u791 00E4B2  
                                  u880 00E634  
                                  u881 00E630  
            __end_of_xQueuePeekFromISR 00DE74  
                      _vListInitialise 00C6C8  
               _xQueueCRReceiveFromISR 00E584  
                    _xQueueGenericSend 00D7BA  
               _uxQueueMessagesWaiting 00DE74  
                 _xQueueGenericReceive 00DB3A  
                 _prvCopyDataFromQueue 00E042  
             _xTaskRemoveFromEventList 00F3D0  
                    _vPortExitCritical 00CA22  
                 _xTaskCheckForTimeOut 00F54A  
                  _xQueueCRSendFromISR 00E4EA  
       __end_of_uxQueueSpacesAvailable 00DEE0  
                    _xQueueGiveFromISR 00DA70  
              __end_of_xQueueCRReceive 00E4EA  
                         _pvPortMalloc 00C5F0  
                       _prvUnlockQueue 00E0B4  
                 _vTaskSetTimeOutState 00F534  
                   _xQueueGenericReset 00D5EC  
                 _xQueueReceiveFromISR 00DD30  
__end_of_uxQueueMessagesWaitingFromISR 00DF00  
        _uxQueueMessagesWaitingFromISR 00DEE0  
    __end_of_xQueueIsQueueEmptyFromISR 00E218  
                                f20000 00E046  
                                f20001 00E0AE  
                                f20010 00E0B8  
                                f20011 00E18A  
                                f20100 00E3B2  
                                f20101 00E4E4  
                                f20110 00E4EE  
                                f20030 00E194  
                                f20006 FFFFFFFA  
                                f20111 00E57E  
                                f20031 00E1D2  
                                f20120 00E588  
                                f20040 00E1DC  
                                f20016 FFFFFFFC  
                                f20121 00E66A  
                                f20041 00E212  
                                f20106 FFFFFFF4  
                                f20050 00E21C  
                                f20051 00E262  
                                f20116 FFFFFFF6  
                                f20060 00E26C  
                                f20036 FFFFFFFA  
                                f20061 00E2AA  
                                f20126 FFFFFFF4  
                                f20070 00E2B4  
                                f20046 FFFFFFFA  
                                f20071 00E3A8  
                                f20056 FFFFFFFA  
                                f20066 FFFFFFFA  
                                f20076 FFFFFFF4  
                                f19800 00D6DC  
                                f19801 00D7B4  
                                f19900 00DB3E  
                                f19820 00D7BE  
                                f19740 00D5F0  
                                f19901 00DD2A  
                                f19821 00D97E  
                                f19741 00D6D2  
                                f19910 00DD34  
                                f19806 FFFFFFF0  
                                f19911 00DDFA  
                                f19920 00DE04  
                                f19921 00DE6E  
                                f19930 00DE78  
                                f19906 FFFFFFEC  
                                f19826 FFFFFFEC  
                                f19746 FFFFFFF8  
                                f19931 00DE9C  
                                f19940 00DEA6  
                                f19916 FFFFFFF2  
                                f19941 00DEDA  
                                f19950 00DEE4  
                                f19926 FFFFFFF2  
                                f19951 00DEFA  
                                f19960 00DF04  
                                f19936 FFFFFFFA  
                                f19880 00D988  
                                f19961 00DF1A  
                                f19881 00DA6A  
                                f19946 FFFFFFF8  
                                f19890 00DA74  
                                f19891 00DB34  
                                f19980 00DF24  
                                f19956 FFFFFFFC  
                                f19981 00E03C  
                                f19966 FFFFFFFA  
                                f19886 FFFFFFF0  
                                f19896 FFFFFFF4  
                                f19986 FFFFFFF6  
                       _prvIsQueueFull 00E218  
          __end_of_xQueueCRSendFromISR 00E584  
         __end_of_xQueueGenericReceive 00DD30  
           __end_of_prvCopyDataToQueue 00E042  
         __end_of_prvCopyDataFromQueue 00E0B4  
                _vTaskPlaceOnEventList 00F2CA  
                                lab710 00D6B4  
                                lab711 00D6B0  
                                lab800 00DDCC  
                                lab720 00D76C  
                                lab712 00D6AC  
                                lab801 00DDC8  
                                lab721 00D778  
                                lab713 00D6AC  
                                lab810 00DE98  
                                lab802 00DDC8  
                                lab730 00D84E  
                                lab722 00D7A8  
                                lab714 00D6B0  
                                lab811 00DED6  
                                lab803 00DDCC  
                                lab723 00D97A  
                                lab731 00D86A  
                                lab715 00D6C4  
                                lab900 00E65E  
                                lab820 00E02A  
                                lab812 00DEF6  
                                lab804 00DDD0  
                                lab740 00D902  
                                lab732 00D86A  
                                lab724 00D7E4  
                                lab716 00D7B0  
                                lab821 00DFFE  
                                lab813 00DF16  
                                lab805 00DDDA  
                                lab725 00D97A  
                                lab741 00D966  
                                lab733 00D86A  
                                lab717 00D712  
                                lab709 00D6CE  
                                lab830 00E098  
                                lab814 00E038  
                                lab822 00DFFE  
                                lab806 00DDEE  
                                lab750 00DA3C  
                                lab742 00D958  
                                lab734 00D8BA  
                                lab718 00D728  
                                lab831 00E186  
                                lab823 00E02A  
                                lab815 00DF52  
                                lab807 00DE6A  
                                lab751 00DA38  
                                lab743 00D954  
                                lab735 00D896  
                                lab727 00D878  
                                lab719 00D7A8  
                                lab840 00E12A  
                                lab832 00E100  
                                lab824 00E026  
                                lab816 00E02A  
                                lab808 00DE5A  
                                lab760 00DB0A  
                                lab752 00DA38  
                                lab744 00D962  
                                lab736 00D8BA  
                                lab728 00D852  
                                lab841 00E178  
                                lab833 00E0C6  
                                lab825 00E026  
                                lab817 00DFAE  
                                lab809 00DE62  
                                lab761 00DB06  
                                lab753 00DA3C  
                                lab745 00D976  
                                lab737 00D8BA  
                                lab729 00D84E  
                                lab850 00E1FE  
                                lab842 00E160  
                                lab834 00E114  
                                lab826 00E02A  
                                lab818 00DFAA  
                                lab770 00DD26  
                                lab762 00DB02  
                                lab746 00DA66  
                                lab754 00DA40  
                                lab738 00D8BA  
                                lab851 00E206  
                                lab843 00E156  
                                lab835 00E0F6  
                                lab827 00E0AA  
                                lab819 00DFAA  
                                lab763 00DB02  
                                lab755 00DA4A  
                                lab747 00DA56  
                                lab739 00D8E4  
                                lab860 00E314  
                                lab852 00E25E  
                                lab844 00E156  
                                lab836 00E0F2  
                                lab828 00E0AA  
                                lab780 00DC0E  
                                lab772 00DC20  
                                lab764 00DB06  
                                lab756 00DA5E  
                                lab748 00DA44  
                                lab861 00E320  
                                lab853 00E24A  
                                lab845 00E164  
                                lab837 00E0F2  
                                lab829 00E098  
                                lab781 00DC0E  
                                lab773 00DBD4  
                                lab757 00DB30  
                                lab765 00DB0A  
                                lab749 00DA40  
                                lab870 00E410  
                                lab862 00E38E  
                                lab854 00E252  
                                lab846 00E1CE  
                                lab838 00E0FA  
                                lab790 00DD12  
                                lab782 00DC12  
                                lab774 00DBD0  
                                lab766 00DB14  
                                lab758 00DB20  
                                lab871 00E41C  
                                lab863 00E38A  
                                lab855 00E2A6  
                                lab847 00E1BA  
                                lab839 00E164  
                                lab791 00DD04  
                                lab783 00DC62  
                                lab775 00DBCC  
                                lab767 00DB28  
                                lab759 00DB0E  
                                lab880 00E4D2  
                                lab872 00E420  
                                lab864 00E386  
                                lab856 00E296  
                                lab848 00E1C2  
                                lab792 00DD00  
                                lab784 00DC3E  
                                lab768 00DD26  
                                lab776 00DBCC  
                                lab881 00E57A  
                                lab873 00E4CA  
                                lab865 00E386  
                                lab857 00E29E  
                                lab849 00E20E  
                                lab793 00DD00  
                                lab785 00DC62  
                                lab777 00DBD0  
                                lab769 00DB64  
                                lab890 00E666  
                                lab882 00E572  
                                lab874 00E472  
                                lab866 00E38A  
                                lab858 00E3A4  
                                lab794 00DD0E  
                                lab786 00DC62  
                                lab778 00DC12  
                                lab891 00E656  
                                lab883 00E56E  
                                lab875 00E472  
                                lab867 00E396  
                                lab859 00E320  
                                lab795 00DD22  
                                lab787 00DC62  
                                lab779 00DC12  
                                lab892 00E5E6  
                                lab884 00E56A  
                                lab876 00E4C6  
                                lab868 00E4E0  
                                lab796 00DDF6  
                                lab788 00DC8C  
                                lab893 00E5E6  
                                lab885 00E566  
                                lab877 00E4C2  
                                lab869 00E420  
                                lab797 00DDE6  
                                lab789 00DCAA  
                                lab894 00E64A  
                                lab886 00E566  
                                lab878 00E4C2  
                                lab798 00DDD4  
                                lab895 00E646  
                                lab887 00E56A  
                                lab879 00E4C6  
                                lab799 00DDD0  
                                lab896 00E642  
                                lab888 00E56E  
                                lab897 00E642  
                                lab889 00E572  
                                lab898 00E646  
                                lab899 00E64A  
                     _vTaskMissedYield 00F61E  
               _uxQueueSpacesAvailable 00DEA2  
                       _xTaskResumeAll 00EF10  
               __end_of_prvUnlockQueue 00E190  
                            _vPortFree 00C69C  
               __end_of_prvIsQueueFull 00E268  
                    _xQueuePeekFromISR 00DE00  
        _xCoRoutineRemoveFromEventList 00CEFE  
         __end_of_xQueueReceiveFromISR 00DE00  
                  _xQueueGenericCreate 00D6D8  
     __end_of_xQueueGenericSendFromISR 00DA70  
                      _prvIsQueueEmpty 00E190  
             _xQueueGenericSendFromISR 00D984  
            _xQueueIsQueueEmptyFromISR 00E1D8  
                         _vQueueDelete 00DF00  
          __end_of_xQueueGenericCreate 00D7BA  
                 __end_of_vQueueDelete 00DF20  
                   _vPortEnterCritical 00CA10  
     __end_of_xQueueIsQueueFullFromISR 00E2B0  
             _xQueueIsQueueFullFromISR 00E268  
            __end_of_xQueueGenericSend 00D984  
                               _memcpy 00C3F4  
                   _prvCopyDataToQueue 00DF20  
           __end_of_xQueueGenericReset 00D6D8  
                         _xQueueCRSend 00E2B0  
            __end_of_xQueueGiveFromISR 00DB3A  
           _vCoRoutineAddToDelayedList 00CBDA  
                           _vPortYield 00C410  
                 __end_of_xQueueCRSend 00E3AE  
                      _xQueueCRReceive 00E3AE  
              __end_of_prvIsQueueEmpty 00E1D8  
       __end_of_xQueueCRReceiveFromISR 00E670  
       __end_of_uxQueueMessagesWaiting 00DEA2  
